commit 9775a39d9bffff4978e765d9b5ec09c519b84d7c
Author: David Smith <dsmith@redhat.com>
Date:   Fri Apr 16 09:12:06 2010 -0500

    Fixed PR 11480 by updating rpc.stp and its tests.
    
    * tapset/rpc.stp: Large update to get working on RHEL4, RHEL5, f12, and
      rawhide.
    * testsuite/buildok/rpc-detailed.stp: New detailed test of all rpc probes.
    * testsuite/buildok/rpc-embedded.stp: Updated.
    * testsuite/systemtap.pass1-4/buildok.exp: Removed kfail for
      rpc-all-probes.stp.
    
    Added atomic_read() embedded-C function and tests.
    
    * tapset/atomic.stp: Added atomic_read().
    * testsuite/buildok/atomic.stp: Added atomic_read() compile test.
    * testsuite/systemtap.base/atomic.exp: Added atomic_read() tests.
    * testsuite/lib/stap_run_error.exp (stap_run_error): Logs stap command and
      tries to ensure inferior process is killed.
    
    As a part of merging commit 6c62bc42:
    
    Improved atomic.exp testcase by removing the need for an external module.
    
        * testsuite/systemtap.base/atomic.exp: Removed the need for the external
          module by putting the atomic_long_t inside the stap module.
        * testsuite/systemtap.base/atomic_module.c: Removed.
        * testsuite/systemtap.base/atomic_module.makefile: Ditto.
        * testsuite/lib/stap_run_error.exp (stap_run_error): Better error handling.

diff --git a/tapset/atomic.stp b/tapset/atomic.stp
index ab20eb5..a295af6 100644
--- a/tapset/atomic.stp
+++ b/tapset/atomic.stp
@@ -6,6 +6,18 @@
 // Public License (GPL); either version 2, or (at your option) any
 // later version.
 
+function atomic_read:long(addr:long)
+%{ /* pure */
+	atomic_t *a = (atomic_t *)(long)THIS->addr;
+
+	/* We call deref() here to ensure the memory is valid to read.
+	 * Note the result is thrown away, then we use the "real"
+	 * atomic read function now that we know the address is safe. */
+	(void)deref(sizeof(*a), a);
+	THIS->__retvalue = atomic_read(a);
+	CATCH_DEREF_FAULT();
+%}
+
 function atomic_long_read:long(addr:long)
 %{ /* pure */
 #ifdef ATOMIC_LONG_INIT
diff --git a/tapset/nfs_proc.stp b/tapset/nfs_proc.stp
index 3a661d0..60d1359 100644
--- a/tapset/nfs_proc.stp
+++ b/tapset/nfs_proc.stp
@@ -1,3 +1,16 @@
+
+
+%{
+	/* For AF_INET */
+#include <linux/socket.h>
+%}
+
+function AF_INET:long()
+%{ /* pure */ /* unprivileged */
+        THIS->__retvalue = AF_INET;
+%}
+
+
 %{
 	#include <linux/nfs_fs.h>
 	#include <linux/nfs_xdr.h>
diff --git a/tapset/rpc.stp b/tapset/rpc.stp
index 336cfcf..c95c062 100644
--- a/tapset/rpc.stp
+++ b/tapset/rpc.stp
@@ -9,9 +9,8 @@
 // later version.
 
 %{
-#include <linux/kernel.h>
+// Includes everything needed for __rpc_prot_from_protocol().
 #include <linux/sunrpc/clnt.h>
-#include <linux/sunrpc/svc.h>
 %}
 
 probe sunrpc.entry =
@@ -53,16 +52,31 @@ probe sunrpc.clnt.return =
 /*
  * Fires when an RPC client is to be created
  * 
+ * kernels > 2.6.18
+ *
+ *  struct rpc_clnt *
+ *  rpc_create(struct rpc_create_args *args)
+ *	The rpc_create() function is used to create an RPC client.  It
+ *	calculates some arguments (such as args->servername), then
+ *	calls rpc_new_client().  We need the calculated arguments, so
+ *	we'll probe rpc_new_client().  But, see discussion of
+ *	sunrpc.clnt.create_client.return below.
+ *
+ *  static struct rpc_clnt *
+ *  rpc_new_client(const struct rpc_create_args *args, struct rpc_xprt *xprt)
+ *
+ * kernels <= 2.6.18
+ *
+ *  static struct rpc_clnt * 
+ *  rpc_new_client(struct rpc_xprt *xprt, char *servname, 
+ *	struct rpc_program *program, u32 vers, 
+ *	rpc_authflavor_t flavor)
+ * 
  *  struct rpc_clnt * 
  *  rpc_create_client(struct rpc_xprt *xprt, char *servname, 
  *  	struct rpc_program *info, u32 version, 
  * 	rpc_authflavor_t authflavor)
  *
- *  static struct rpc_clnt * 
- *  rpc_new_client(struct rpc_xprt *xprt, char *servname, 
- * struct rpc_program *program, u32 vers, 
- * rpc_authflavor_t flavor)
- * 
  *  @servername: the server machine name
  *  @progname:   the RPC program name
  *  @prog:       the RPC program number
@@ -71,77 +85,174 @@ probe sunrpc.clnt.return =
  *  @port:	 the port number
  *  @authflavor: the authentication flavor
  */
-probe sunrpc.clnt.create_client = _sunrpc.clnt.create_client.*
+probe sunrpc.clnt.create_client =
+	_sunrpc.clnt.create_client.rpc_new_client_inline !,
+	_sunrpc.clnt.create_client.rpc_new_client ?,
+	_sunrpc.clnt.create_client.rpc_create_client ?
 {
-	servername = kernel_string($servname)
-	prot = $xprt->prot
-	port = $xprt->port
+	name = "sunrpc.clnt.create_client"
 	argstr = sprintf("%s %s %d %d %d %d %d", servername, progname, 
 		prog, vers, prot, port, authflavor)
 }
 
-%( kernel_v <= "2.6.18" %?
-probe _sunrpc.clnt.create_client.part1 = kernel.function("rpc_create_client") !,
-	module("sunrpc").function("rpc_create_client")
+/*
+ * Newer kernels (> 2.6.18) compiled with gcc less than version
+ * 4.4.3-16, tend to have debuginfo that doesn't include location
+ * information for inline function arguments.  This is a problem, since
+ * we need the arguments to rpc_new_client(), which is inline.  Since
+ * we can't get them for those kernels, we stash (and delete) the value
+ * of the 'args' parameter of rpc_create().  We then use this value
+ * when probing the inline version of rpc_new_client() (if we don't
+ * have the real arguments to that inline function).
+ */
+
+global __rpc_create_args
+
+probe kernel.function("rpc_create") !,
+	module("sunrpc").function("rpc_create") ?
 {
-	name = "sunrpc.clnt.create_client"
-%( kernel_v >= "2.6.10" %?
-	progname = kernel_string($info->name)
-	prog = $info->number
-	vers = vers_from_prog($info, $version)
-	authflavor = $authflavor
-%:
-	progname = kernel_string($program->name)
-	prog = $program->number
-	vers = vers_from_prog($program, $vers)
-	authflavor = $flavor
-%)
+	__rpc_create_args[tid()] = $args
+}
+	
+probe kernel.function("rpc_create").return !,
+	module("sunrpc").function("rpc_create").return ?
+{
+	delete __rpc_create_args[tid()]
 }
-%)
 
-probe _sunrpc.clnt.create_client.part2 = kernel.function("rpc_new_client") !,
-	module("sunrpc").function("rpc_new_client")
+
+/*
+ * This function could be written in script language, but we'd need
+ * embedded-C functions for XPRT_TRANSPORT_{UDP,TCP,BC_TCP} and
+ * IPPROTO_{UDP,TCP}.  So, do it all in embedded-C.
+ */
+
+function __rpc_prot_from_protocol:long(protocol:long)
+%{
+	switch (THIS->protocol) {
+#ifdef XPRT_TRANSPORT_BC
+	case XPRT_TRANSPORT_UDP:
+		THIS->__retvalue = IPPROTO_UDP;
+		break;
+	case XPRT_TRANSPORT_TCP:
+	case XPRT_TRANSPORT_BC_TCP:
+		THIS->__retvalue = IPPROTO_TCP;
+		break;
+#endif
+	default:
+		THIS->__retvalue = -1;
+		break;
+	}
+%}
+
+/*
+ * The probe for the inline version of "rpc_new_client" (kernels >
+ * 2.6.18) and the non-inline version of "rpc_new_client" (kernels <=
+ * 2.6.18) could be combined.  However, the optimizer isn't smart
+ * enough to optimize away the '__rpc_create_args' global then.
+ */
+
+probe _sunrpc.clnt.create_client.rpc_new_client_inline =
+	kernel.function("rpc_new_client").inline !,
+	module("sunrpc").function("rpc_new_client").inline
+{
+	if (@defined($args)) {		# kernel > 2.6.18 (with good debuginfo)
+		servername = kernel_string($args->servername)
+		progname = kernel_string($args->program->name)
+		prog = $args->prognumber
+		vers = vers_from_prog($args->program, $args->version)
+		authflavor = $args->authflavor
+
+		prot = $xprt->prot
+		port = (@defined($xprt->port)
+			? $xprt->port : port_from_xprt($xprt))
+	}
+	else {				# kernel > 2.6.18 (with bad debuginfo)
+		args = __rpc_create_args[tid()]
+		servername = kernel_string(@cast(args, "rpc_create_args", "kernel:sunrpc")->servername)
+		progname = kernel_string(@cast(args, "rpc_create_args", "kernel:sunrpc")->program->name)
+		prog = @cast(args, "rpc_create_args", "kernel:sunrpc")->prognumber
+		vers = vers_from_prog(@cast(args, "rpc_create_args", "kernel:sunrpc")->program, @cast(args, "rpc_create_args", "kernel:sunrpc")->version)
+		authflavor = @cast(args, "rpc_create_args", "kernel:sunrpc")->authflavor
+
+		prot = __rpc_prot_from_protocol(@cast(args, "rpc_create_args", "kernel:sunrpc")->protocol)
+		# Since we can't find $xprt, we can't know the port
+		port = -1
+	}
+}
+
+probe _sunrpc.clnt.create_client.rpc_new_client =
+	kernel.function("rpc_new_client").call !,
+	module("sunrpc").function("rpc_new_client").call
 {
-	name = "sunrpc.clnt.new_client"
+	# kernel <= 2.6.18
+	servername = kernel_string($servname)
 	progname = kernel_string($program->name)
 	prog = $program->number
-	vers = vers_from_prog($program, $vers)
+	vers = vers = vers_from_prog($program, $vers)
 	authflavor = $flavor
+
+	prot = $xprt->prot
+	port = (@defined($xprt->port)
+		? $xprt->port : port_from_xprt($xprt))
 }
 
-probe sunrpc.clnt.create_client.return = _sunrpc.clnt.create_client.return.*
+probe _sunrpc.clnt.create_client.rpc_create_client =
+	kernel.function("rpc_create_client") !,
+	module("sunrpc").function("rpc_create_client")
 {
-	retstr = returnstr(2)
+	servername = kernel_string($servname)
+	if (@defined($info)) {
+		progname = kernel_string($info->name)
+		prog = $info->number
+		vers = vers_from_prog($info, $version)
+		authflavor = $authflavor
+	}
+	else {
+		progname = kernel_string($program->name)
+		prog = $program->number
+		vers = vers_from_prog($program, $vers)
+		authflavor = $flavor
+	}
+
+	prot = $xprt->prot
+	port = (@defined($xprt->port)
+		? $xprt->port : port_from_xprt($xprt))
 }
 
-%( kernel_v <= "2.6.18" %?
-probe _sunrpc.clnt.create_client.return.part1 = 
-	kernel.function("rpc_create_client").return !,
-	module("sunrpc").function("rpc_create_client").return
+/*
+ * On newer kernels, we want to probe the return of rpc_new_client()
+ * here.  But because of problems with return probes on inline
+ * functions (PR 4413), we have to probe the return of rpc_create()
+ * instead.  So, if we find the return of rpc_create() (the only
+ * caller of rpc_new_client()), we're done.
+ */
+probe sunrpc.clnt.create_client.return =
+	_sunrpc.clnt.create_client.return.rpc_create !,
+	_sunrpc.clnt.create_client.return.rpc_new_client ?,
+	_sunrpc.clnt.create_client.return.rpc_create_client ?
 {
 	name = "sunrpc.clnt.create_client.return"
+	retstr = returnstr(2)
 }
-probe _sunrpc.clnt.create_client.return.part2 =
-	kernel.function("rpc_new_client").return !,
-	module("sunrpc").function("rpc_new_client").return
-{
-	name = "sunrpc.clnt.new_client.return"
-}
-%:
-probe _sunrpc.clnt.create_client.return.part1 = 
+
+probe _sunrpc.clnt.create_client.return.rpc_create =
 	kernel.function("rpc_create").return !,
 	module("sunrpc").function("rpc_create").return
 {
-	name = "sunrpc.clnt.create_client.return"
 }
-probe _sunrpc.clnt.create_client.return.part2 = 
-	kernel.function("rpc_create").return !,
-	module("sunrpc").function("rpc_create").return
+
+probe _sunrpc.clnt.create_client.return.rpc_new_client =
+	kernel.function("rpc_new_client").return !,
+	module("sunrpc").function("rpc_new_client").return
 {
-	name = "sunrpc.clnt.create_client.return"
 }
-%)
 
+probe _sunrpc.clnt.create_client.return.rpc_create_client = 
+	kernel.function("rpc_create_client").return !,
+	module("sunrpc").function("rpc_create_client").return
+{
+}
 
 /*
  * Fires when the RPC client structure is to be cloned
@@ -224,13 +335,24 @@ probe sunrpc.clnt.shutdown_client = kernel.function("rpc_shutdown_client") !,
 	rpccnt = $clnt->cl_stats->rpccnt
 
 	/* per-client statistics */
-	om_ops = $clnt->cl_metrics->om_ops
-	om_ntrans = $clnt->cl_metrics->om_ntrans
-	om_bytes_sent = $clnt->cl_metrics->om_bytes_sent
-	om_bytes_recv = $clnt->cl_metrics->om_bytes_recv
-	om_queue = $clnt->cl_metrics->om_queue
-	om_rtt = $clnt->cl_metrics->om_rtt
-	om_execute = $clnt->cl_metrics->om_execute
+	if (@defined($clnt->cl_metrics)) {
+		om_ops = $clnt->cl_metrics->om_ops
+		om_ntrans = $clnt->cl_metrics->om_ntrans
+		om_bytes_sent = $clnt->cl_metrics->om_bytes_sent
+		om_bytes_recv = $clnt->cl_metrics->om_bytes_recv
+		om_queue = $clnt->cl_metrics->om_queue
+		om_rtt = $clnt->cl_metrics->om_rtt
+		om_execute = $clnt->cl_metrics->om_execute
+	}
+	else {
+		om_ops = -1
+		om_ntrans = -1
+		om_bytes_sent = -1
+		om_bytes_recv = -1
+		om_queue = -1
+		om_rtt = -1
+		om_execute = -1
+	}
 
 	name = "sunrpc.clnt.shutdown_client"
 	argstr = sprintf("%s %s %d %d %d %d %d %d %d", servername, progname, 
@@ -310,13 +432,15 @@ probe sunrpc.clnt.call_sync = kernel.function("rpc_call_sync") !,
 	prot = prot_from_clnt($clnt)
 	port = port_from_clnt($clnt)
 	xid  = xid_from_clnt($clnt)
-	dead = $clnt->cl_dead
+	dead = (! @defined($clnt->cl_dead)
+		? (atomic_read(&$clnt->cl_kref->refcount) == 0)
+		: $clnt->cl_dead)
 
-%( kernel_v >= "2.6.17" %?
-	procname= $msg->rpc_proc->p_name 
-		? kernel_string($msg->rpc_proc->p_name) : "NULL"
-%)
 	proc = proc_from_msg($msg)
+	procname = (@defined($msg->rpc_proc->p_name)
+		    ? ($msg->rpc_proc->p_name
+		       ? kernel_string($msg->rpc_proc->p_name) : "NULL")
+		    : "NULL")
 	flags = $flags
 	
 	name = "sunrpc.clnt.call_sync"
@@ -357,13 +481,15 @@ probe sunrpc.clnt.call_async = kernel.function("rpc_call_async") !,
 	prot = prot_from_clnt($clnt)
 	port = port_from_clnt($clnt)
 	xid  = xid_from_clnt($clnt)
-	dead = $clnt->cl_dead
+	dead = (! @defined($clnt->cl_dead)
+		? (atomic_read(&$clnt->cl_kref->refcount) == 0)
+		: $clnt->cl_dead)
 
 	proc = proc_from_msg($msg)
-%( kernel_v >= "2.6.17" %?
-	procname= $msg->rpc_proc->p_name 
-		? kernel_string($msg->rpc_proc->p_name) : "NULL"
-%)
+	procname = (@defined($msg->rpc_proc->p_name)
+		    ? ($msg->rpc_proc->p_name
+		       ? kernel_string($msg->rpc_proc->p_name) : "NULL")
+		    : "NULL")
 	flags = $flags
 	
 	name = "sunrpc.clnt.call_async"
@@ -413,6 +539,7 @@ probe sunrpc.clnt.restart_call.return =
       	module("sunrpc").function("rpc_restart_call").return
 {
 	name = "sunrpc.clnt.restart_call.return"
+	retstr = "N/A"
 }
 
 /*********************************************
@@ -540,6 +667,7 @@ probe sunrpc.svc.destroy.return = kernel.function("svc_destroy").return !,
       	module("sunrpc").function("svc_destroy").return
 {
 	name = "sunrpc.svc.destroy.return"
+	retstr = "N/A"
 }
 
 /*
@@ -560,15 +688,16 @@ probe sunrpc.svc.destroy.return = kernel.function("svc_destroy").return !,
 probe sunrpc.svc.process = kernel.function("svc_process") !,
       	module("sunrpc").function("svc_process")
 {
-%( kernel_v >= "2.6.19" %?
-	sv_name = kernel_string($rqstp->rq_server->sv_name) /* service name */
-	sv_prog = $rqstp->rq_server->sv_program->pg_prog
-	sv_nrthreads = $rqstp->rq_server->sv_nrthreads
-%:
-	sv_name = kernel_string($serv->sv_name) /* service name */
-	sv_prog = $serv->sv_program->pg_prog
-	sv_nrthreads = $serv->sv_nrthreads
-%)
+	if (! @defined($serv)) {
+		sv_name = kernel_string($rqstp->rq_server->sv_name)
+		sv_prog = $rqstp->rq_server->sv_program->pg_prog
+		sv_nrthreads = $rqstp->rq_server->sv_nrthreads
+	}
+	else {
+		sv_name = kernel_string($serv->sv_name) /* service name */
+		sv_prog = $serv->sv_program->pg_prog
+		sv_nrthreads = $serv->sv_nrthreads
+	}
 	peer_ip = addr_from_rqst($rqstp)
 	rq_xid = $rqstp->rq_xid
 	rq_prog = $rqstp->rq_prog
@@ -637,15 +766,16 @@ probe sunrpc.svc.authorise.return = kernel.function("svc_authorise").return !,
 probe sunrpc.svc.recv = kernel.function("svc_recv") !,
       	module("sunrpc").function("svc_recv")
 {
-%( kernel_v >= "2.6.19" %?
-        sv_name = kernel_string($rqstp->rq_server->sv_name) 
-        sv_prog = $rqstp->rq_server->sv_program->pg_prog
-        sv_nrthreads = $rqstp->rq_server->sv_nrthreads
-%:
-	sv_name = kernel_string($serv->sv_name)	
-	sv_prog = $serv->sv_program->pg_prog
-	sv_nrthreads = $serv->sv_nrthreads
-%)
+	if (! @defined($serv)) {
+	        sv_name = kernel_string($rqstp->rq_server->sv_name) 
+        	sv_prog = $rqstp->rq_server->sv_program->pg_prog
+	        sv_nrthreads = $rqstp->rq_server->sv_nrthreads
+	}
+	else {
+		sv_name = kernel_string($serv->sv_name)	
+		sv_prog = $serv->sv_program->pg_prog
+		sv_nrthreads = $serv->sv_nrthreads
+	}
 	timeout = $timeout
 
 	name = "sunrpc.svc.recv"
@@ -728,6 +858,7 @@ probe sunrpc.svc.drop.return = kernel.function("svc_drop").return !,
       	module("sunrpc").function("svc_drop").return
 {
 	name = "sunrpc.svc.drop.return"
+	retstr = "N/A"
 }
 
 /*******************************************************************
@@ -735,18 +866,14 @@ probe sunrpc.svc.drop.return = kernel.function("svc_drop").return !,
  ******************************************************************/
 probe sunrpc.sched.entry =
 	sunrpc.sched.new_task,
-%( kernel_v <= "2.6.18" %?
-	sunrpc.sched.release_task,
-%)
+	sunrpc.sched.release_task ?,
 	sunrpc.sched.execute,
 	sunrpc.sched.delay
 {}
 
 probe sunrpc.sched.return =
 	sunrpc.sched.new_task.return,
-%( kernel_v <= "2.6.18" %?
-	sunrpc.sched.release_task.return,
-%)
+	sunrpc.sched.release_task.return ?,
 	sunrpc.sched.execute.return,
 	sunrpc.sched.delay.return
 {}
@@ -766,11 +893,20 @@ probe sunrpc.sched.return =
 probe sunrpc.sched.new_task = kernel.function("rpc_new_task") !,
       	module("sunrpc").function("rpc_new_task")
 {
-	xid = xid_from_clnt($clnt)
-	prog = prog_from_clnt($clnt)
-	vers = vers_from_clnt($clnt)
-	prot = prot_from_clnt($clnt)
-	flags  = $flags
+	if (@defined($setup_data)) {
+		xid = xid_from_clnt($setup_data->rpc_client)
+		prog = prog_from_clnt($setup_data->rpc_client)
+		vers = vers_from_clnt($setup_data->rpc_client)
+		prot = prot_from_clnt($setup_data->rpc_client)
+		flags = $setup_data->flags
+	}
+	else {
+		xid = xid_from_clnt($clnt)
+		prog = prog_from_clnt($clnt)
+		vers = vers_from_clnt($clnt)
+		prot = prot_from_clnt($clnt)
+		flags = $flags
+	}
 
 	name = "sunrpc.sched.new_task"
 	argstr = sprintf("%d %d %d %d %d", xid, prog, vers, prot, flags)
@@ -793,28 +929,44 @@ probe sunrpc.sched.new_task.return = kernel.function("rpc_new_task").return !,
  * @vers:        the program version in the RPC call
  * @prot:        the IP protocol in the RPC call
  * @tk_flags:    the flags of the task
+ *
+ * rpc_release_task() might not be found for a particular kernel.  So,
+ * if we can't find it, just return '-1' for everything.
+ *
+ * The '.call' here is so that we're sure to grab the non-inline
+ * version of rpc_release_task() (assuming it exists).  We can't find
+ * the return of rpc_release_task() if it is inline (PR 4413).
  */
-%( kernel_v <= "2.6.18" %?
-probe sunrpc.sched.release_task = kernel.function("rpc_release_task") !,
-      	module("sunrpc").function("rpc_release_task")
-{
-	xid = xid_from_clnt($task->tk_client)
-	prog = prog_from_clnt($task->tk_client)
-	vers = vers_from_clnt($task->tk_client)
-	prot = prot_from_clnt($task->tk_client)
-	tk_flags  = $task->tk_flags
 
+probe sunrpc.sched.release_task = kernel.function("rpc_release_task").call !,
+      	module("sunrpc").function("rpc_release_task").call !,
+	never
+{
+	if (@defined($task)) {
+		xid = xid_from_clnt($task->tk_client)
+		prog = prog_from_clnt($task->tk_client)
+		vers = vers_from_clnt($task->tk_client)
+		prot = prot_from_clnt($task->tk_client)
+		tk_flags  = $task->tk_flags
+	}
+	else {
+		xid = -1
+		prog = -1
+		vers = -1
+		prot = -1
+		tk_flags  = -1
+	}
 	name = "sunrpc.sched.release_task"
 	argstr = sprintf("%d %d %d %d %d", xid, prog, vers, prot, tk_flags)
 }
 
 probe sunrpc.sched.release_task.return = 
 	kernel.function("rpc_release_task").return !,
-      	module("sunrpc").function("rpc_release_task").return
+      	module("sunrpc").function("rpc_release_task").return ?
 {
 	name = "sunrpc.sched.release_task.return"
+	retstr = "N/A"
 }
-%)
 
 /*
  * Fires when the RPC `scheduler'(or rather, the finite state machine) 
@@ -849,11 +1001,13 @@ probe sunrpc.sched.execute.return = kernel.function("__rpc_execute").return !,
 {
 	name = "sunrpc.sched.execute.return"
 
-%( kernel_v <= "2.6.20" %?
-	retstr = returnstr(1)
-%:
-	retstr = "N/A"
-%)
+	# On kernels > 2.6.20, __rpc_execute() is a void function.
+	if (@defined($return)) {
+		retstr = returnstr(1)
+	}
+	else {
+		retstr = "N/A"
+	}
 }
 
 /*
@@ -889,6 +1043,7 @@ probe sunrpc.sched.delay.return = kernel.function("rpc_delay").return !,
       module("sunrpc").function("rpc_delay").return
 {
 	name = "sunrpc.sched.delay.return"
+	retstr = "N/A"
 }
 
 /******************************************************************
@@ -906,22 +1061,20 @@ function prog_from_clnt:long(clnt:long)
 {
 	if (clnt == 0)
 		return 0
-%(kernel_v  >= "2.6.19" %?
-	return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_prog
-%:
-	return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_pmap->pm_prog
-%)
+	if (@defined(@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_prog))
+		return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_prog
+	else
+		return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_pmap->pm_prog
 }
 
 function vers_from_clnt:long(clnt:long)
 {
 	if (clnt == 0)
 		return 0
-%(kernel_v  >= "2.6.19" %?
-	return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_vers
-%:
-	return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_pmap->pm_vers
-%)
+	if (@defined(@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_vers))
+		return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_vers
+	else
+		return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_pmap->pm_vers
 }
 
 function prot_from_clnt:long(clnt:long)
@@ -931,27 +1084,32 @@ function prot_from_clnt:long(clnt:long)
 	return @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_xprt->prot
 }
 
-function port_from_clnt:long(clnt:long)
-%{ /* pure */
-	struct rpc_clnt *clnt = (struct rpc_clnt *)(long)THIS->clnt;
-	struct rpc_xprt *cl_xprt = clnt? kread(&(clnt->cl_xprt)) : NULL;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,19)
-	if (cl_xprt && kread(&(cl_xprt->addr.ss_family)) == AF_INET) {
-		/* Now consider ipv4 only */
-		struct sockaddr_in *sap = (struct sockaddr_in *) &cl_xprt->addr;
+function port_from_xprt:long(cl_xprt:long)
+{
+	if (cl_xprt == 0)
+		return 0
 
-		THIS->__retvalue = ntohs(kread(&(sap->sin_port)));
-	}
-#else
-	if (cl_xprt && kread(&(cl_xprt->addr.sin_family)) == AF_INET) {
-		/* Now consider ipv4 only */
-		THIS->__retvalue = ntohs(kread(&(cl_xprt->addr.sin_port)));
+	addr = &@cast(cl_xprt, "rpc_xprt", "kernel:sunrpc")->addr
+	if (addr == 0)
+		return 0
+
+	/* In reality, 'cl_xprt->addr' is of 'sockaddr_storage' type
+	 * (since 2.6.19). But when used, you cast it to what is
+	 * inside that buffer. */
+	if (@cast(addr, "sockaddr_in")->sin_family == AF_INET()) {
+		/* Now consider ipv4 only */ 
+		return ntohs(@cast(addr, "sockaddr_in")->sin_port)
 	}
-#endif
-	else
-		THIS->__retvalue = 0;
-	CATCH_DEREF_FAULT();
-%}
+}
+
+function port_from_clnt:long(clnt:long)
+{
+	if (clnt == 0)
+		return 0
+
+	cl_xprt = @cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_xprt
+	return port_from_xprt(cl_xprt)
+}
 
 function clones_from_clnt:long(clnt:long)
 %{ /* pure */
diff --git a/testsuite/buildok/atomic.stp b/testsuite/buildok/atomic.stp
index 0069045..5e0375f 100755
--- a/testsuite/buildok/atomic.stp
+++ b/testsuite/buildok/atomic.stp
@@ -1,6 +1,7 @@
 #! stap -p4
 
 probe begin {
+  printf("%d\n", atomic_read(0))
   printf("%d\n", atomic_long_read(0))
   exit()
 }
diff --git a/testsuite/buildok/rpc-detailed.stp b/testsuite/buildok/rpc-detailed.stp
new file mode 100755
index 0000000..2bc23d5
--- /dev/null
+++ b/testsuite/buildok/rpc-detailed.stp
@@ -0,0 +1,104 @@
+#! stap -p4
+
+#
+# Meta sunrpc tests
+#
+
+probe sunrpc.entry {
+      printf("%s(%s)\n", name, argstr)
+}
+
+probe sunrpc.return {
+      printf("%s %s\n", name, retstr)
+}
+
+#
+# sunrpc.clnt.* tests
+#
+
+probe sunrpc.clnt.*.return {
+      printf("%s %s\n", name, retstr)
+}
+
+probe sunrpc.clnt.create_client, sunrpc.clnt.clone_client {
+      printf("%s(%s)\n", name, argstr)
+}
+
+probe sunrpc.clnt.shutdown_client {
+      printf("%s(%s)\n", name, argstr)
+      printf("%d %d %d %d %d %d %d %d %d\n", netreconn, rpccnt,
+	     om_ops, om_ntrans, om_bytes_sent, om_bytes_recv,
+	     om_queue, om_rtt, om_execute)
+}
+
+probe sunrpc.clnt.bind_new_program {
+      printf("%s(%s)\n", name, argstr)
+      printf("%d\n", prog)
+}
+
+probe sunrpc.clnt.call_sync, sunrpc.clnt.call_async {
+      printf("%s(%s)\n", name, argstr)
+      printf("%d %d %d %d %d\n", prog, prot, port, dead, proc)
+}
+
+probe sunrpc.clnt.restart_call {
+      printf("%s(%s)\n", name, argstr)
+}
+
+#
+# sunrpc.svc.* tests
+#
+
+probe sunrpc.svc.*.return {
+      printf("%s %s\n", name, retstr)
+}
+
+probe sunrpc.svc.register
+{
+      printf("%s(%s)\n", name, argstr)
+      printf("%d\n", prog)
+}
+
+probe sunrpc.svc.create
+{
+      printf("%s(%s)\n", name, argstr)
+}
+
+probe sunrpc.svc.destroy
+{
+      printf("%s(%s)\n", name, argstr)
+      printf("%s %d %d %d %d %d\n", sv_progname, netcnt, netcpconn,
+             rpccnt, rpcbadfmt, rpcbadauth)
+}
+
+probe sunrpc.svc.process {
+      printf("%s(%s)\n", name, argstr)
+      printf("%d %d\n", sv_nrthreads, rq_prot)
+}
+
+probe sunrpc.svc.authorise {
+      printf("%s(%s)\n", name, argstr)
+      printf("%s\n", sv_name)
+}
+
+probe sunrpc.svc.recv {
+      printf("%s(%s)\n", name, argstr)
+      printf("%d %d\n", sv_prog, sv_nrthreads)
+}
+
+probe sunrpc.svc.send, sunrpc.svc.drop {
+      printf("%s(%s)\n", name, argstr)
+}
+
+#
+# sunrpc.sched.* tests
+#
+
+probe sunrpc.sched.*.return {
+      printf("%s %s\n", name, retstr)
+}
+
+probe sunrpc.sched.new_task, sunrpc.sched.release_task,
+      sunrpc.sched.execute, sunrpc.sched.delay {
+      printf("%s(%s)\n", name, argstr)
+}
diff --git a/testsuite/buildok/rpc-embedded.stp b/testsuite/buildok/rpc-embedded.stp
index b8ae9ff..1bdb170 100755
--- a/testsuite/buildok/rpc-embedded.stp
+++ b/testsuite/buildok/rpc-embedded.stp
@@ -10,6 +10,7 @@ probe begin {
 	  tasks_from_clnt (0) +
 	  proc_from_msg (0) +
 	  vers_from_clnt (0) +
-	  addr_from_rqst (0))
+	  addr_from_rqst (0) +
+	  __rpc_prot_from_protocol (0))
 }
 
diff --git a/testsuite/lib/stap_run_error.exp b/testsuite/lib/stap_run_error.exp
index bf89498..2d8f46a 100644
--- a/testsuite/lib/stap_run_error.exp
+++ b/testsuite/lib/stap_run_error.exp
@@ -7,6 +7,7 @@
 proc stap_run_error { TEST_NAME EXPECT_ERROR ERROR_STRING OUTPUT_CHECK_STRING args } {
     set full_error "ERROR: $ERROR_STRING\r\n"
     set cmd [concat {stap -v} $args]
+    send_log "executing: $cmd\n"
     eval spawn $cmd
     expect {
 	-timeout 150
@@ -35,7 +36,7 @@ proc stap_run_error { TEST_NAME EXPECT_ERROR ERROR_STRING OUTPUT_CHECK_STRING ar
 	    set output "^systemtap ending probe\r\n$OUTPUT_CHECK_STRING"
 
 	    expect {
-		-timeout 10
+		-timeout 20
 		-re $output {
 		    if {$EXPECT_ERROR} {
 			fail "$TEST_NAME didn't receive expected error"
@@ -57,6 +58,8 @@ proc stap_run_error { TEST_NAME EXPECT_ERROR ERROR_STRING OUTPUT_CHECK_STRING ar
    	          exec kill -INT -[exp_pid] }
 	eof { fail "$TEST_NAME startup (eof)" }
     }
+    # again for good measure
+    exec kill -INT -[exp_pid]
     catch close
     wait
 }
diff --git a/testsuite/systemtap.base/atomic.exp b/testsuite/systemtap.base/atomic.exp
index 4b4fa58..5de2b9d 100644
--- a/testsuite/systemtap.base/atomic.exp
+++ b/testsuite/systemtap.base/atomic.exp
@@ -2,6 +2,10 @@ set test "atomic"
 
 if {![installtest_p]} {untested $test; return}
 
+#
+# First test atomic_long_read()
+#
+
 set script_template {
     probe begin {
 	print("systemtap starting probe\n")
@@ -10,84 +14,110 @@ set script_template {
 
     probe end {
 	print("systemtap ending probe\n")
-	printf("%%d\n", atomic_long_read(%s))
+	printf("%%d\n", %s_read(%s))
     }
 }
 
 # First try reading from address 0, which should fail.
 set test "atomic1"
 set error {kernel read fault at 0x[^\r]+}
-set script [format $script_template "0"]
-stap_run_error $test 1 $error "" -e $script
+set script [format $script_template "atomic_long" "0"]
+stap_run_error $test 1 $error "0\r\n" -e $script
 
 # Try reading from address -1 (top of memory), which should fail.
 set test "atomic2"
-set script [format $script_template "-1"]
-stap_run_error $test 1 $error "" -e $script
+set script [format $script_template "atomic_long" "-1"]
+stap_run_error $test 1 $error "0\r\n" -e $script
 
 # Try reading from address 3, which should fail (if nothing else
 # because it isn't aligned properly).
 set test "atomic3"
-set script [format $script_template "3"]
-stap_run_error $test 1 $error "" -e $script
-
+set script [format $script_template "atomic_long" "3"]
+stap_run_error $test 1 $error "0\r\n" -e $script
 
-set build_dir ""
+# Since we want to fail semi-gracefully (no compile errors), if we
+# don't have atomic_long_t support on this kernel (no
+# ATOMIC_LONG_INIT) the testcase will compile, but fail.
 
-proc cleanup_module {} {
-    global build_dir
-    as_root [list /sbin/rmmod atomic_module]
-    catch { exec rm -rf $build_dir }
-}
+set atomic_long_script_module_template {
+    %%{
+    #include <asm/atomic.h>
+    #ifdef ATOMIC_LONG_INIT
+    struct {
+        ulong barrier1;
+        atomic_long_t a;
+        ulong barrier2;
+    } stp_atomic_struct = { ULONG_MAX, ATOMIC_LONG_INIT(5), ULONG_MAX };
+    #else
+    struct {
+        ulong barrier1;
+        long a;
+        ulong barrier2;
+    } stp_atomic_struct = { ULONG_MAX, 5, ULONG_MAX };
+    #endif
+    %%}
 
-proc build_and_install_module {} {
-    global build_dir
-    global srcdir subdir
+    function get_atomic_long_addr:long()
+    %%{
+	THIS->__retvalue = (long)&stp_atomic_struct.a;
+    %%}
 
-    # Create the build directory and populate it
-    if {[catch {exec mktemp -d staptestXXXXXX} build_dir]} {
-	verbose -log "Failed to create temporary directory: $build_dir"
-	return 0
+    probe begin {
+	print("systemtap starting probe\n")
+	exit()
     }
-    exec cp $srcdir/$subdir/atomic_module.c $build_dir/
-    exec cp -p $srcdir/$subdir/atomic_module.makefile $build_dir/Makefile
 
-    # Build the module
-    if {[catch {exec make -C $build_dir clean} res]} {
-	verbose -log "$res"
-	return 0
-    }
-    catch {exec make -C $build_dir} res
-    if {![file exists $build_dir/atomic_module.ko]} {
-	verbose -log "$res"
-	return 0
+    probe end {
+	print("systemtap ending probe\n")
+	printf("%%d\n", atomic_long_read(get_atomic_long_addr() + %s))
     }
+}
 
-    # Install the module
-    set res [as_root [list /sbin/insmod $build_dir/atomic_module.ko]]
-    if {$res != 0} {
-	return 0
-    }
+set test "atomic4"
+set script [format $atomic_long_script_module_template "0"]
+stap_run_error $test 0 $error "5\r\n" -ge $script
 
-    return 1
-}
+# We should be able to check for trying to read the atomic_long_t with
+# bad alignment here, but it succeeds on {x86, x86_64} and fails on
+# ia64.  Since it doesn't fail consistently, we'll comment this out.
+#set test "atomic5"
+#set script [format $atomic_long_script_module_template "3"]
+#stap_run_error $test 1 $error "" -ge $script
 
-set test "atomic_module_build"
-if {[build_and_install_module] == 0} {
-    verbose -log "BUILD FAILED"
-    fail "$test - could not build/install module"
-    cleanup_module
-    return
-} else {
-    pass $test
-}
+#
+# Now test atomic_read()
+#
+
+# First try reading from address 0, which should fail.
+set test "atomic5"
+set error {kernel read fault at 0x[^\r]+}
+set script [format $script_template "atomic" "0"]
+stap_run_error $test 1 $error "0\r\n" -e $script
+
+# Try reading from address -1 (top of memory), which should fail.
+set test "atomic6"
+set script [format $script_template "atomic" "-1"]
+stap_run_error $test 1 $error "0\r\n" -e $script
+
+# Try reading from address 3, which should fail (if nothing else
+# because it isn't aligned properly).
+set test "atomic7"
+set script [format $script_template "atomic" "3"]
+stap_run_error $test 1 $error "0\r\n" -e $script
+
+set atomic_script_module_template {
+    %%{
+    #include <asm/atomic.h>
+    struct {
+        ulong barrier1;
+        atomic_t a;
+        ulong barrier2;
+    } stp_atomic_struct = { ULONG_MAX, ATOMIC_INIT(5), ULONG_MAX };
+    %%}
 
-set script_module_template {
     function get_atomic_addr:long()
     %%{
-	extern atomic_long_t *stp_get_atomic_long_addr(void);
-	atomic_long_t *a = stp_get_atomic_long_addr();
-	THIS->__retvalue = (long)a;
+	THIS->__retvalue = (long)&stp_atomic_struct.a;
     %%}
 
     probe begin {
@@ -97,19 +127,17 @@ set script_module_template {
 
     probe end {
 	print("systemtap ending probe\n")
-	printf("%%d\n", atomic_long_read(get_atomic_addr() + %s))
+	printf("%%d\n", atomic_read(get_atomic_addr() + %s))
     }
 }
 
-set test "atomic4"
-set script [format $script_module_template "0"]
+set test "atomic8"
+set script [format $atomic_script_module_template "0"]
 stap_run_error $test 0 $error "5\r\n" -ge $script
 
-# We should be able to check for trying to read the atomic_long_t with
+# We should be able to check for trying to read the atomic_t with
 # bad alignment here, but it succeeds on {x86, x86_64} and fails on
 # ia64.  Since it doesn't fail consistently, we'll comment this out.
-#set test "atomic5"
-#set script [format $script_module_template "3"]
+#set test "atomic9"
+#set script [format $atomic_script_module_template "3"]
 #stap_run_error $test 1 $error "" -ge $script
-
-cleanup_module
diff --git a/testsuite/systemtap.base/atomic_module.c b/testsuite/systemtap.base/atomic_module.c
deleted file mode 100644
index 5b4e395..0000000
--- a/testsuite/systemtap.base/atomic_module.c
+++ /dev/null
@@ -1,50 +0,0 @@
-/* -*- linux-c -*- 
- * Systemtap Atomic Test Module
- * Copyright (C) 2010 Red Hat Inc.
- *
- * This file is part of systemtap, and is free software.  You can
- * redistribute it and/or modify it under the terms of the GNU General
- * Public License (GPL); either version 2, or (at your option) any
- * later version.
- */
-
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <asm/atomic.h>
-
-/* The purpose of this module is to provide a bunch of functions that */
-/* do nothing important, and then call them in different contexts. */
-/* We use a /proc file to trigger function calls from user context. */
-/* Then systemtap scripts set probes on the functions and run tests */
-/* to see if the expected output is received. This is better than using */
-/* the kernel because kernel internals frequently change. */
-
-
-/************ Below are the functions to create this module ************/
-
-struct {
-	ulong barrier1;
-	atomic_long_t a;
-	ulong barrier2;
-} stp_atomic_struct;
-
-atomic_long_t *stp_get_atomic_long_addr(void)
-{
-	return(&stp_atomic_struct.a);
-}
-EXPORT_SYMBOL(stp_get_atomic_long_addr);
-
-int init_module(void)
-{
-	stp_atomic_struct.barrier1 = ULONG_MAX;
-	atomic_long_set(&stp_atomic_struct.a, 5);
-        stp_atomic_struct.barrier2 = ULONG_MAX;
-	return 0;
-}
-
-void cleanup_module(void)
-{
-}
-
-MODULE_DESCRIPTION("systemtap atomic test module");
-MODULE_LICENSE("GPL");
diff --git a/testsuite/systemtap.base/atomic_module.makefile b/testsuite/systemtap.base/atomic_module.makefile
deleted file mode 100644
index 14d2b8e..0000000
--- a/testsuite/systemtap.base/atomic_module.makefile
+++ /dev/null
@@ -1,13 +0,0 @@
-obj-m := atomic_module.o
-KDIR := /lib/modules/$(shell uname -r)/build
-PWD := $(shell pwd)
-
-CLEAN_FILES := $(shell echo *.mod.c *.ko *.o .*.cmd *~ *.sgn)
-CLEAN_FILES += Module.markers modules.order Module.symvers
-CLEAN_DIRS  := .tmp_versions
-
-default:
-	$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules
-clean:
-	rm -f $(CLEAN_FILES)
-	rm -rf $(CLEAN_DIRS)
diff --git a/testsuite/systemtap.pass1-4/buildok.exp b/testsuite/systemtap.pass1-4/buildok.exp
index a9f16a8..b2f97cd 100644
--- a/testsuite/systemtap.pass1-4/buildok.exp
+++ b/testsuite/systemtap.pass1-4/buildok.exp
@@ -6,7 +6,6 @@ foreach file [lsort [glob -nocomplain $srcdir/$self/*.stp]] {
     # some tests are known to fail.
     switch $test {
         buildok/perfmon01.stp {setup_kfail 909 *-*-*}
-        buildok/rpc-all-probes.stp {setup_kfail 4413 *-*-*}
         buildok/per-process-syscall.stp {if {![utrace_p]} { setup_kfail 9999 *-*-*} }
     }
     if {$rc == 0} { pass $test } else { fail $test }
