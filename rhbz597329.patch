commit 05f04f9cb1684651a6a041b4ba026b1af83eebca
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Fri May 28 16:15:02 2010 +0530

    Here is a patch implements a way for uprobes to skip single step
    when a probe in on a nop instruction.
    
    Currently its implemented for nop on x86/x86_64 and s390.
    For powerpc, its implemented on all instructions that can be emulated.
    (For this emulation code is borrowed from arch/powerpc/lib/sstep.c)
    
    I havent tested it on s390. Updated with comments from Jim.
    
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
    Reported-by: Josh Stone <jistone@redhat.com>
    
    uprobes_ppc: define MSR_MASK and clean up error cases
    
    - The emulate_step code was copied from the kernel, but needs to have
      the #define MSR_MASK too.
    - A case in emulate_step could fall through with an illegal instruction,
      just break and return 0 instead.
    - A few privileged instructions can't be emulated and so return -1, but
      we don't want uprobe_emulate_insn to see that as non-zero -> TRUE.
    
    At a minimum, this restores whatever SSOL-faulty behavior would have
    existed before emulate_step was added.  We should also add checks in
    arch_validate_probed_insn to avoid such instructions in the first place.
    
    Signed-off-by: Josh Stone <jistone@redhat.com>
    Acked-by: Jim Keniston <jkenisto@us.ibm.com>
    
    uprobes_ppc: Don't emulate privileged MSR opcodes

diff --git a/runtime/uprobes/uprobes.c b/runtime/uprobes/uprobes.c
index 6105012..ed84ed3 100644
--- a/runtime/uprobes/uprobes.c
+++ b/runtime/uprobes/uprobes.c
@@ -1815,6 +1815,9 @@ static u32 uprobe_report_signal(struct utrace_attached_engine *engine,
 			}
 		}
 
+		if (uprobe_emulate_insn(regs, ppt))
+			goto bkpt_done;
+
 		utask->state = UPTASK_PRE_SSTEP;
 #ifdef CONFIG_UPROBES_SSOL
 		if (uproc->sstep_out_of_line)
diff --git a/runtime/uprobes/uprobes.h b/runtime/uprobes/uprobes.h
index 2096ff2..4260be3 100644
--- a/runtime/uprobes/uprobes.h
+++ b/runtime/uprobes/uprobes.h
@@ -433,6 +433,8 @@ static void uprobe_pre_ssout(struct uprobe_task*, struct uprobe_probept*,
 static void uprobe_post_ssout(struct uprobe_task*, struct uprobe_probept*,
 			struct pt_regs*);
 #endif
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt);
 
 #endif	/* UPROBES_IMPLEMENTATION */
 
diff --git a/runtime/uprobes/uprobes_i386.c b/runtime/uprobes/uprobes_i386.c
index 008f32d..589393d 100644
--- a/runtime/uprobes/uprobes_i386.c
+++ b/runtime/uprobes/uprobes_i386.c
@@ -318,3 +318,18 @@ unsigned long arch_predict_sp_at_ret(struct pt_regs *regs,
 {
 	return (unsigned long) (regs->esp + 4 + STRUCT_RETURN_SLOP);
 }
+
+/* Check if instruction is nop and return true. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	uprobe_opcode_t *insn = ppt->insn;
+
+	if (insn[0] == 0x90)
+		/* regs->ip already points to the insn after the nop/int3. */
+		return 1;
+
+	/* TODO: add multibyte nop instructions */
+	/* For multibyte nop instructions, we need to set ip accordingly. */
+	return 0;
+}
diff --git a/runtime/uprobes/uprobes_ppc.c b/runtime/uprobes/uprobes_ppc.c
index b625b87..38cc124 100644
--- a/runtime/uprobes/uprobes_ppc.c
+++ b/runtime/uprobes/uprobes_ppc.c
@@ -22,6 +22,14 @@
  * is #included at the end of uprobes.c.
  */
 
+/* copied from arch/powerpc/lib/sstep.c */
+#ifdef CONFIG_PPC64
+/* Bits in SRR1 that are copied from MSR */
+#define MSR_MASK	0xffffffff87c0ffffUL
+#else
+#define MSR_MASK	0x87c0ffff
+#endif
+
 /*
  * Replace the return address with the trampoline address.  Returns
  * the original return address.
@@ -145,3 +153,188 @@ int arch_validate_probed_insn(struct uprobe_probept *ppt,
 	}
 	return 0;
 }
+
+/*
+ * Determine whether a conditional branch instruction would branch.
+ * copied from arch/powerpc/lib/sstep.c
+ */
+static int branch_taken(unsigned int instr, struct pt_regs *regs)
+{
+	unsigned int bo = (instr >> 21) & 0x1f;
+	unsigned int bi;
+
+	if ((bo & 4) == 0) {
+		/* decrement counter */
+		--regs->ctr;
+		if (((bo >> 1) & 1) ^ (regs->ctr == 0))
+			return 0;
+	}
+	if ((bo & 0x10) == 0) {
+		/* check bit from CR */
+		bi = (instr >> 16) & 0x1f;
+		if (((regs->ccr >> (31 - bi)) & 1) != ((bo >> 3) & 1))
+			return 0;
+	}
+	return 1;
+}
+
+/*
+ * Emulate instructions that cause a transfer of control.
+ * Returns 1 if the step was emulated, 0 if not,
+ * or -1 if the instruction is one that should not be stepped,
+ * such as an rfid, or a mtmsrd that would clear MSR_RI.
+ * copied/modified from arch/powerpc/lib/step.c;
+ */
+static int emulate_step(struct pt_regs *regs, unsigned int instr)
+{
+	unsigned int opcode, rs, rb, rd, spr;
+	unsigned long int imm;
+
+	/* ori 0,0,0 is a nop. Emulate that too */
+	if (instr == 0x60000000) {
+		regs->nip += 4;
+		return 1;
+	}
+
+	opcode = instr >> 26;
+	switch (opcode) {
+	case 16:	/* bc */
+		imm = (signed short)(instr & 0xfffc);
+		if ((instr & 2) == 0)
+			imm += regs->nip;
+		regs->nip += 4;
+		if ((regs->msr & MSR_SF) == 0)
+			regs->nip &= 0xffffffffUL;
+		if (instr & 1)
+			regs->link = regs->nip;
+		if (branch_taken(instr, regs))
+			regs->nip = imm;
+		return 1;
+	case 18:	/* b */
+		imm = instr & 0x03fffffc;
+		if (imm & 0x02000000)
+			imm -= 0x04000000;
+		if ((instr & 2) == 0)
+			imm += regs->nip;
+		if (instr & 1) {
+			regs->link = regs->nip + 4;
+			if ((regs->msr & MSR_SF) == 0)
+				regs->link &= 0xffffffffUL;
+		}
+		if ((regs->msr & MSR_SF) == 0)
+			imm &= 0xffffffffUL;
+		regs->nip = imm;
+		return 1;
+	case 19:
+		switch (instr & 0x7fe) {
+		case 0x20:	/* bclr */
+		case 0x420:	/* bcctr */
+			imm = (instr & 0x400) ? regs->ctr : regs->link;
+			regs->nip += 4;
+			if ((regs->msr & MSR_SF) == 0) {
+				regs->nip &= 0xffffffffUL;
+				imm &= 0xffffffffUL;
+			}
+			if (instr & 1)
+				regs->link = regs->nip;
+			if (branch_taken(instr, regs))
+				regs->nip = imm;
+			return 1;
+		case 0x24:	/* rfid, scary */
+			return -1;
+		}
+		break;
+	case 31:
+		rd = (instr >> 21) & 0x1f;
+		switch (instr & 0x7fe) {
+#if 0 // MSR opcodes are privileged, and must not be emulated for uprobes
+		case 0xa6:	/* mfmsr */
+			regs->gpr[rd] = regs->msr & MSR_MASK;
+			regs->nip += 4;
+			if ((regs->msr & MSR_SF) == 0)
+				regs->nip &= 0xffffffffUL;
+			return 1;
+		case 0x124:	/* mtmsr */
+			imm = regs->gpr[rd];
+			if ((imm & MSR_RI) == 0)
+				/* can't step mtmsr that would clear MSR_RI */
+				return -1;
+			regs->msr = imm;
+			regs->nip += 4;
+			return 1;
+#ifdef CONFIG_PPC64
+		case 0x164:	/* mtmsrd */
+			/* only MSR_EE and MSR_RI get changed if bit 15 set */
+			/* mtmsrd doesn't change MSR_HV and MSR_ME */
+			imm = (instr & 0x10000) ? 0x8002
+						: 0xefffffffffffefffUL;
+			imm = (regs->msr & MSR_MASK & ~imm)
+				| (regs->gpr[rd] & imm);
+			if ((imm & MSR_RI) == 0)
+				/* can't step mtmsrd that would clear MSR_RI */
+				return -1;
+			regs->msr = imm;
+			regs->nip += 4;
+			if ((imm & MSR_SF) == 0)
+				regs->nip &= 0xffffffffUL;
+			return 1;
+#endif
+#endif
+		case 0x26:	/* mfcr */
+			regs->gpr[rd] = regs->ccr;
+			regs->gpr[rd] &= 0xffffffffUL;
+			goto mtspr_out;
+		case 0x2a6:	/* mfspr */
+			spr = (instr >> 11) & 0x3ff;
+			switch (spr) {
+			case 0x20:	/* mfxer */
+				regs->gpr[rd] = regs->xer;
+				regs->gpr[rd] &= 0xffffffffUL;
+				goto mtspr_out;
+			case 0x100:	/* mflr */
+				regs->gpr[rd] = regs->link;
+				goto mtspr_out;
+			case 0x120:	/* mfctr */
+				regs->gpr[rd] = regs->ctr;
+				goto mtspr_out;
+			}
+			break;
+		case 0x378:	/* orx */
+			if (instr & 1)
+				break;
+			rs = (instr >> 21) & 0x1f;
+			rb = (instr >> 11) & 0x1f;
+			if (rs == rb) {		/* mr */
+				rd = (instr >> 16) & 0x1f;
+				regs->gpr[rd] = regs->gpr[rs];
+				goto mtspr_out;
+			}
+			break;
+		case 0x3a6:	/* mtspr */
+			spr = (instr >> 11) & 0x3ff;
+			switch (spr) {
+			case 0x20:	/* mtxer */
+				regs->xer = (regs->gpr[rd] & 0xffffffffUL);
+				goto mtspr_out;
+			case 0x100:	/* mtlr */
+				regs->link = regs->gpr[rd];
+				goto mtspr_out;
+			case 0x120:	/* mtctr */
+				regs->ctr = regs->gpr[rd];
+mtspr_out:
+				regs->nip += 4;
+				return 1;
+			}
+		}
+	}
+	return 0;
+}
+
+/* Check if instruction can be emulated and return 1 if emulated. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	unsigned int insn = *ppt->insn;
+
+	return emulate_step(regs, insn) > 0;
+}
diff --git a/runtime/uprobes/uprobes_s390.c b/runtime/uprobes/uprobes_s390.c
index b01286e..873a000 100644
--- a/runtime/uprobes/uprobes_s390.c
+++ b/runtime/uprobes/uprobes_s390.c
@@ -207,3 +207,16 @@ unsigned long arch_hijack_uret_addr(unsigned long trampoline_address,
 	regs->gprs[14] = trampoline_address;
 	return orig_ret_addr;
 }
+
+
+/* Check if instruction is nop and return true. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	unsigned int insn = *ppt->insn;
+	if (insn == 0x47000000)
+		/* ip already points to the insn after the nop/bkpt insn. */
+		return 1;
+
+	return 0;
+}
diff --git a/runtime/uprobes/uprobes_x86.c b/runtime/uprobes/uprobes_x86.c
index 9333171..9e0bc11 100644
--- a/runtime/uprobes/uprobes_x86.c
+++ b/runtime/uprobes/uprobes_x86.c
@@ -736,3 +736,18 @@ unsigned long arch_predict_sp_at_ret(struct pt_regs *regs,
 	else
 		return (unsigned long) (REGS_SP + 8);
 }
+
+/* Check if instruction is nop and return true. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	uprobe_opcode_t *insn = ppt->insn;
+
+	if (insn[0] == 0x90)
+		/* regs->ip already points to the insn after the nop/int3. */
+		return 1;
+
+	/* TODO: add multibyte nop instructions */
+	/* For multibyte nop instructions, we need to set ip accordingly. */
+	return 0;
+}
diff --git a/runtime/uprobes/uprobes_x86_64.c b/runtime/uprobes/uprobes_x86_64.c
index 56ebe2e..3ad40ea 100644
--- a/runtime/uprobes/uprobes_x86_64.c
+++ b/runtime/uprobes/uprobes_x86_64.c
@@ -710,3 +710,18 @@ unsigned long arch_predict_sp_at_ret(struct pt_regs *regs,
 	else
 		return (unsigned long) regs->rsp + 8;
 }
+
+/* Check if instruction is nop and return true. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	uprobe_opcode_t *insn = ppt->insn;
+
+	if (insn[0] == 0x90)
+		/* regs->ip already points to the insn after the nop/int3. */
+		return 1;
+
+	/* TODO: add multibyte nop instructions */
+	/* For multibyte nop instructions, we need to set ip accordingly. */
+	return 0;
+}
diff --git a/runtime/uprobes2/uprobes.c b/runtime/uprobes2/uprobes.c
index bf31b65..44f9c1c 100644
--- a/runtime/uprobes2/uprobes.c
+++ b/runtime/uprobes2/uprobes.c
@@ -2010,6 +2010,9 @@ static u32 uprobe_report_signal(u32 action,
 			}
 		}
 
+		if (uprobe_emulate_insn(regs, ppt))
+			goto bkpt_done;
+
 		utask->state = UPTASK_PRE_SSTEP;
 #ifdef CONFIG_UPROBES_SSOL
 		if (uproc->sstep_out_of_line)
diff --git a/runtime/uprobes2/uprobes.h b/runtime/uprobes2/uprobes.h
index b48a983..de7a870 100644
--- a/runtime/uprobes2/uprobes.h
+++ b/runtime/uprobes2/uprobes.h
@@ -429,6 +429,8 @@ static void uprobe_pre_ssout(struct uprobe_task*, struct uprobe_probept*,
 static void uprobe_post_ssout(struct uprobe_task*, struct uprobe_probept*,
 			struct pt_regs*);
 #endif
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt);
 
 #endif	/* UPROBES_IMPLEMENTATION */
 
diff --git a/runtime/uprobes2/uprobes_x86.c b/runtime/uprobes2/uprobes_x86.c
index 8c80293..02ec76b 100644
--- a/runtime/uprobes2/uprobes_x86.c
+++ b/runtime/uprobes2/uprobes_x86.c
@@ -720,3 +720,18 @@ unsigned long arch_hijack_uret_addr(unsigned long trampoline_address,
 	}
 	return orig_ret_addr;
 }
+
+/* Check if instruction is nop and return true. */
+static int uprobe_emulate_insn(struct pt_regs *regs,
+						struct uprobe_probept *ppt)
+{
+	uprobe_opcode_t *insn = ppt->insn;
+
+	if (insn[0] == 0x90)
+		/* regs->ip already points to the insn after the nop/int3. */
+		return 1;
+
+	/* TODO: add multibyte nop instructions */
+	/* For multibyte nop instructions, we need to set ip accordingly. */
+	return 0;
+}
