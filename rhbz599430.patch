commit 91099b03be25caeb326f4d1f156bf70a327c0db7
Author: David Smith <dsmith@redhat.com>
Date:   Wed Apr 7 09:42:44 2010 -0500

    PR 9871 (partial) fix.  Removed all embedded-C in rpc.stp.
    
    * tapset/rpc.stp: Replaced all embedded-C functions with script language.
      ... that is, nearly all ...; merged by hand from 7dfee5e and 9f61fce.

diff --git a/tapset/rpc.stp b/tapset/rpc.stp
index c95c062..c96818f 100644
--- a/tapset/rpc.stp
+++ b/tapset/rpc.stp
@@ -1,7 +1,7 @@
 // rpc tapset
 // Copyright (C) 2006 IBM Corp.
 // Copyright (C) 2007 Bull S.A.S
-// Copyright (C) 2008 Red Hat
+// Copyright (C) 2008, 2010 Red Hat
 //
 // This file is part of systemtap, and is free software.  You can
 // redistribute it and/or modify it under the terms of the GNU General
@@ -1100,6 +1100,7 @@ function port_from_xprt:long(cl_xprt:long)
 		/* Now consider ipv4 only */ 
 		return ntohs(@cast(addr, "sockaddr_in")->sin_port)
 	}
+	return 0
 }
 
 function port_from_clnt:long(clnt:long)
@@ -1112,26 +1113,18 @@ function port_from_clnt:long(clnt:long)
 }
 
 function clones_from_clnt:long(clnt:long)
-%{ /* pure */
-	struct rpc_clnt *clnt = (struct rpc_clnt *)(long)THIS->clnt;
-        THIS->__retvalue = -1;
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,22)
-	deref(sizeof(clnt->cl_count), &(clnt->cl_count));
-	THIS->__retvalue = atomic_read(&(clnt->cl_count));
-	CATCH_DEREF_FAULT();
-#endif
-%}
+{
+    return (@defined(@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_count)
+	    ? atomic_read(&@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_count)
+	    : -1)
+}
 
 function tasks_from_clnt:long(clnt:long)
-%{ /* pure */
-	struct rpc_clnt *clnt = (struct rpc_clnt *)(long)THIS->clnt;
-        THIS->__retvalue = -1;
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,22)
-	deref(sizeof(clnt->cl_users), &(clnt->cl_users));
-	THIS->__retvalue = atomic_read(&(clnt->cl_users));
-	CATCH_DEREF_FAULT();
-#endif
-%}
+{
+    return (@defined(@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_users)
+	    ? atomic_read(&@cast(clnt, "rpc_clnt", "kernel:sunrpc")->cl_users)
+	    : -1)
+}
 
 function proc_from_msg:long(msg:long)
 {
@@ -1141,56 +1134,44 @@ function proc_from_msg:long(msg:long)
 }
 
 function vers_from_prog:long(program:long, vers:long)
-%{ /* pure */
-	struct rpc_program *program = (struct rpc_program *)(long)THIS->program;
-	if (program && THIS->vers < kread(&(program->nrvers))) {
-		struct rpc_version **version_array = kread(&(program->version));
-		struct rpc_version *version = kread(&(version_array[THIS->vers]));
-		THIS->__retvalue = kread(&(version->number));
-	} else
-		THIS->__retvalue = 0;
-	CATCH_DEREF_FAULT();
-%}
+{
+    if (program
+	&& vers < @cast(program, "rpc_program", "kernel:sunrpc")->nrvers)
+	return @cast(program, "rpc_program", "kernel:sunrpc")->version[vers]->number
+    return 0
+}
 
 function addr_from_rqst:long(rqstp:long)
-%{ /* pure */
-	struct svc_rqst *rqstp = (struct svc_rqst *)(long)THIS->rqstp;
+{
+    if (rqstp) {
+	addr = &@cast(rqstp, "svc_rqst", "kernel:nfs")->rq_addr
+	if (addr == 0)
+		return 0
 
-	if (rqstp) {
-		struct sockaddr_in *sin = (struct sockaddr_in *) &rqstp->rq_addr;
+	/* In reality, 'rq_addr' is of 'sockaddr_storage' type
+	 * (since 2.6.19). But when used, you cast it to what is
+	 * inside that buffer. */
+	if (@cast(addr, "sockaddr_in")->sin_family == AF_INET()) {
+		/* Now consider ipv4 only */ 
+		return @cast(addr, "sockaddr_in")->sin_addr->s_addr
+	}
+    }
+    return 0
+}
 
-		THIS->__retvalue = kread(&sin->sin_addr.s_addr);
-	} else
-		THIS->__retvalue = 0;
-	CATCH_DEREF_FAULT();
-%}
+function addr_from_rqst_str:string(rqstp:long)
+{
+	if (rqstp == 0)
+		return "Null"
 
-function addr_from_rqst_str:string(_rqstp:long)
-%{ /* pure */
-	struct svc_rqst *rqstp = 
-		(struct svc_rqst *)(long) kread(&(THIS->_rqstp));
-	struct sockaddr_in *addr;
-	unsigned char *bytes;
-
-	if (rqstp) {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
-		if (rqstp->rq_addr.ss_family == AF_INET)
-#else
-		if (rqstp->rq_addr.sin_family == AF_INET)
-#endif
-		{
-			addr = (struct sockaddr_in *) &rqstp->rq_addr;
-			bytes = (unsigned char *)&addr->sin_addr.s_addr;
-
-			snprintf(THIS->__retvalue, MAXSTRINGLEN,
-				"%d.%d.%d.%d:%d", bytes[0], bytes[1], bytes[2], bytes[3],
-				addr->sin_port);
-		} else
-			snprintf(THIS->__retvalue, MAXSTRINGLEN, 
-				"Unsupported Address Family");
-	} else
-		snprintf(THIS->__retvalue, MAXSTRINGLEN, "Null");
-
-	CATCH_DEREF_FAULT();
-%}
+	addr = &@cast(rqstp, "svc_rqst", "kernel:nfs")->rq_addr
+	if (addr == 0)
+		return "Null"
+
+	s_addr = addr_from_rqst(rqstp)
+	if (s_addr == 0)
+		return "Unsupported Address Family"
+	return sprintf("%s:%d", daddr_to_string(s_addr),
+		       @cast(addr, "sockaddr_in")->sin_port)
+}
 
