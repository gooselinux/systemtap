commit 34c08f2a8f83c6ffa6939214448385e42982bace
Author: Josh Stone <jistone@redhat.com>
Date:   Mon Jun 14 10:44:10 2010 -0700

    Banish the SyScall
    
    We don't need to deal with the SYSCALL_WRAPPERS-generated SyS_foo,
    because since the dawn of that feature they have also provided a normal
    sys_foo alias.  So as long as alias tracking is working, both in our
    translator and in kallsyms for kprobe.function, we can be blissfully
    ignorant.
    
    http://sourceware.org/ml/systemtap/2010-q2/msg00551.html
    
    Fixed PR11710 so that nd_syscall probes work on s390x systems.
    
    * tapset/s390/registers.stp (_stp_arg): Fixed logic error.  The last case
      was missing an "if", which caused all _stp_arg() calls to only return
      the value of r6.
    
    Fixed PR11707 so that nd_syscall probes work on ppc64 systems.
    
    * tapset/powerpc/registers.stp (_stp_get_register_by_offset): Fixed
      compile error.
      (_stp_arg): Fixed logic error.  The last case was missing an "if", which
      caused all _stp_arg() to only return the value of r10.

diff --git a/tapset/nd_syscalls.stp b/tapset/nd_syscalls.stp
index a053f8f..406b14f 100644
--- a/tapset/nd_syscalls.stp
+++ b/tapset/nd_syscalls.stp
@@ -34,8 +34,7 @@
 # accept _____________________________________________________
 # long sys_accept(int fd, struct sockaddr __user *upeer_sockaddr,
 #                 int __user *upeer_addrlen)
-probe nd_syscall.accept = kprobe.function("SyS_accept") ?,
-                          kprobe.function("sys_accept") ?
+probe nd_syscall.accept = kprobe.function("sys_accept") ?
 {
 	name = "accept"
 	// sockfd = $fd
@@ -48,8 +47,7 @@ probe nd_syscall.accept = kprobe.function("SyS_accept") ?,
 	addrlen_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %p, %p", sockfd, addr_uaddr, addrlen_uaddr)
 }
-probe nd_syscall.accept.return = kprobe.function("SyS_accept").return ?,
-                                 kprobe.function("sys_accept").return ?
+probe nd_syscall.accept.return = kprobe.function("sys_accept").return ?
 {
 	name = "accept"
 	retstr = returnstr(1)
@@ -57,8 +55,7 @@ probe nd_syscall.accept.return = kprobe.function("SyS_accept").return ?,
 
 # access _____________________________________________________
 # long sys_access(const char __user * filename, int mode)
-probe nd_syscall.access = kprobe.function("SyS_access") ?,
-                          kprobe.function("sys_access") ?
+probe nd_syscall.access = kprobe.function("sys_access") ?
 {
 	name = "access"
 	// pathname = user_string($filename)
@@ -71,8 +68,7 @@ probe nd_syscall.access = kprobe.function("SyS_access") ?,
 	mode_str = _access_mode_str(mode)
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)), mode_str)
 }
-probe nd_syscall.access.return = kprobe.function("SyS_access").return ?,
-                                 kprobe.function("sys_access").return ?
+probe nd_syscall.access.return = kprobe.function("sys_access").return ?
 {
 	name = "access"
 	retstr = returnstr(1)
@@ -102,8 +98,7 @@ probe nd_syscall.acct.return = kprobe.function("sys_acct").return ?
 #             size_t plen,
 #             key_serial_t ringid)
 #
-probe nd_syscall.add_key = kprobe.function("SyS_add_key") ?,
-                           kprobe.function("sys_add_key") ?
+probe nd_syscall.add_key = kprobe.function("sys_add_key") ?
 {
 	name = "add_key"
 	// type_uaddr = $_type
@@ -128,8 +123,7 @@ probe nd_syscall.add_key = kprobe.function("SyS_add_key") ?,
 		text_strn(user_string(payload_uaddr), syscall_string_trunc, 1),
 		plen, ringid)
 }
-probe nd_syscall.add_key.return = kprobe.function("SyS_add_key").return ?,
-                                  kprobe.function("sys_add_key").return ?
+probe nd_syscall.add_key.return = kprobe.function("sys_add_key").return ?
 {
 	name = "add_key"
 	retstr = returnstr(1)
@@ -137,8 +131,7 @@ probe nd_syscall.add_key.return = kprobe.function("SyS_add_key").return ?,
 
 # adjtimex ___________________________________________________
 # long sys_adjtimex(struct timex __user *txc_p)
-probe nd_syscall.adjtimex = kprobe.function("SyS_adjtimex") ?,
-                            kprobe.function("sys_adjtimex") ?
+probe nd_syscall.adjtimex = kprobe.function("sys_adjtimex") ?
 {
 	name = "adjtimex"
 
@@ -159,8 +152,7 @@ probe nd_syscall.adjtimex = kprobe.function("SyS_adjtimex") ?,
 	asmlinkage()
 	argstr = sprintf("%p", pointer_arg(1))
 }
-probe nd_syscall.adjtimex.return = kprobe.function("SyS_adjtimex").return ?,
-                                   kprobe.function("sys_adjtimex").return ?
+probe nd_syscall.adjtimex.return = kprobe.function("sys_adjtimex").return ?
 {
 	name = "adjtimex"
 	// retstr = _adjtimex_return_str($return)
@@ -185,7 +177,6 @@ probe nd_syscall.compat_adjtimex.return = kprobe.function("compat_sys_adjtimex")
 # long sys32_alarm(unsigned int seconds)
 #
 probe nd_syscall.alarm = kprobe.function("sys32_alarm") ?,
-                         kprobe.function("SyS_alarm") ?,
                          kprobe.function("sys_alarm") ?
 {
 	name = "alarm"
@@ -196,7 +187,6 @@ probe nd_syscall.alarm = kprobe.function("sys32_alarm") ?,
 	argstr = sprint(seconds)
 }
 probe nd_syscall.alarm.return = kprobe.function("sys32_alarm").return ?,
-                                kprobe.function("SyS_alarm").return ?,
                                 kprobe.function("sys_alarm").return ?
 {
 	name = "alarm"
@@ -205,8 +195,7 @@ probe nd_syscall.alarm.return = kprobe.function("sys32_alarm").return ?,
 
 # bdflush ____________________________________________________
 # long sys_bdflush(int func, long data)
-probe nd_syscall.bdflush = kprobe.function("SyS_bdflush") ?,
-                           kprobe.function("sys_bdflush") ?
+probe nd_syscall.bdflush = kprobe.function("sys_bdflush") ?
 {
 	name = "bdflush"
 	// func = $func
@@ -224,8 +213,7 @@ probe nd_syscall.bdflush = kprobe.function("SyS_bdflush") ?,
 		data_str = sprintf("%d", data)
 	argstr = sprintf("%d, %s", func, data_str)
 }
-probe nd_syscall.bdflush.return = kprobe.function("SyS_bdflush").return ?,
-                                  kprobe.function("sys_bdflush").return ?
+probe nd_syscall.bdflush.return = kprobe.function("sys_bdflush").return ?
 {
 	name = "bdflush"
 	retstr = returnstr(1)
@@ -233,8 +221,7 @@ probe nd_syscall.bdflush.return = kprobe.function("SyS_bdflush").return ?,
 
 # bind _______________________________________________________
 # long sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
-probe nd_syscall.bind = kprobe.function("SyS_bind") ?,
-                        kprobe.function("sys_bind") ?
+probe nd_syscall.bind = kprobe.function("sys_bind") ?
 {
 	name = "bind"
 	// sockfd = $fd
@@ -247,8 +234,7 @@ probe nd_syscall.bind = kprobe.function("SyS_bind") ?,
 	addrlen = int_arg(3)
 	argstr = sprintf("%d, %s, %d", sockfd, _struct_sockaddr_u(my_addr_uaddr, addrlen), addrlen)
 }
-probe nd_syscall.bind.return = kprobe.function("SyS_bind").return ?,
-                               kprobe.function("sys_bind").return ?
+probe nd_syscall.bind.return = kprobe.function("sys_bind").return ?
 {
 	name = "bind"
 	retstr = returnstr(1)
@@ -257,7 +243,6 @@ probe nd_syscall.bind.return = kprobe.function("SyS_bind").return ?,
 # brk ________________________________________________________
 # unsigned long sys_brk(unsigned long brk)
 probe nd_syscall.brk = kprobe.function("ia64_brk") ?,
-                       kprobe.function("SyS_brk") ?,
                        kprobe.function("sys_brk") ?
 {
 	name = "brk"
@@ -267,7 +252,6 @@ probe nd_syscall.brk = kprobe.function("ia64_brk") ?,
 	argstr = sprintf("%p", brk)
 }
 probe nd_syscall.brk.return = kprobe.function("ia64_brk").return ?,
-                              kprobe.function("SyS_brk").return ?,
                               kprobe.function("sys_brk").return ?
 {
 	name = "brk"
@@ -287,8 +271,7 @@ probe nd_syscall.brk.return = kprobe.function("ia64_brk").return ?,
  *   functions to export.
  */
 # long sys_capget(cap_user_header_t header, cap_user_data_t dataptr)
-probe nd_syscall.capget = kprobe.function("SyS_capget") ?,
-                          kprobe.function("sys_capget") ?
+probe nd_syscall.capget = kprobe.function("sys_capget") ?
 {
 	name = "capget"
 	// header_uaddr = $header
@@ -299,8 +282,7 @@ probe nd_syscall.capget = kprobe.function("SyS_capget") ?,
 	data_uaddr = pointer_arg(2)
 	argstr = sprintf("%p, %p", header_uaddr, data_uaddr)
 }
-probe nd_syscall.capget.return = kprobe.function("SyS_capget").return ?,
-                                 kprobe.function("sys_capget").return ?
+probe nd_syscall.capget.return = kprobe.function("sys_capget").return ?
 {
 	name = "capget"
 	retstr = returnstr(1)
@@ -318,8 +300,7 @@ probe nd_syscall.capget.return = kprobe.function("SyS_capget").return ?,
  *   functions to export.
  */
 # long sys_capset(cap_user_header_t header, const cap_user_data_t data)
-probe nd_syscall.capset = kprobe.function("SyS_capset") ?,
-                          kprobe.function("sys_capset") ?
+probe nd_syscall.capset = kprobe.function("sys_capset") ?
 {
 	name = "capset"
 	// header_uaddr = $header
@@ -330,8 +311,7 @@ probe nd_syscall.capset = kprobe.function("SyS_capset") ?,
 	data_uaddr = pointer_arg(2)
 	argstr = sprintf("%p, %p", header_uaddr, data_uaddr)
 }
-probe nd_syscall.capset.return = kprobe.function("SyS_capset").return ?,
-                                 kprobe.function("sys_capset").return ?
+probe nd_syscall.capset.return = kprobe.function("sys_capset").return ?
 {
 	name = "capset"
 	retstr = returnstr(1)
@@ -339,8 +319,7 @@ probe nd_syscall.capset.return = kprobe.function("SyS_capset").return ?,
 
 # chdir ______________________________________________________
 # long sys_chdir(const char __user * filename)
-probe nd_syscall.chdir = kprobe.function("SyS_chdir") ?,
-                         kprobe.function("sys_chdir") ?
+probe nd_syscall.chdir = kprobe.function("sys_chdir") ?
 {
 	name = "chdir"
 	// path = user_string($filename)
@@ -349,8 +328,7 @@ probe nd_syscall.chdir = kprobe.function("SyS_chdir") ?,
 	path = user_string(pointer_arg(1))
 	argstr = user_string_quoted(pointer_arg(1))
 }
-probe nd_syscall.chdir.return = kprobe.function("SyS_chdir").return ?,
-                                kprobe.function("sys_chdir").return ?
+probe nd_syscall.chdir.return = kprobe.function("sys_chdir").return ?
 {
 	name = "chdir"
 	retstr = returnstr(1)
@@ -358,8 +336,7 @@ probe nd_syscall.chdir.return = kprobe.function("SyS_chdir").return ?,
 
 # chmod ______________________________________________________
 # long sys_chmod(const char __user * filename, mode_t mode)
-probe nd_syscall.chmod = kprobe.function("SyS_chmod") ?,
-                         kprobe.function("sys_chmod") ?
+probe nd_syscall.chmod = kprobe.function("sys_chmod") ?
 {
 	name = "chmod"
 	// path = user_string($filename)
@@ -370,8 +347,7 @@ probe nd_syscall.chmod = kprobe.function("SyS_chmod") ?,
 	mode = uint_arg(2)
 	argstr = sprintf("%s, %#o", user_string_quoted(pointer_arg(1)), mode)
 }
-probe nd_syscall.chmod.return = kprobe.function("SyS_chmod").return ?,
-                                kprobe.function("sys_chmod").return ?
+probe nd_syscall.chmod.return = kprobe.function("sys_chmod").return ?
 {
 	name = "chmod"
 	retstr = returnstr(1)
@@ -379,8 +355,7 @@ probe nd_syscall.chmod.return = kprobe.function("SyS_chmod").return ?,
 
 # chown ______________________________________________________
 # long sys_chown(const char __user * filename, uid_t user, gid_t group)
-probe nd_syscall.chown = kprobe.function("SyS_chown") ?,
-                         kprobe.function("sys_chown") ?
+probe nd_syscall.chown = kprobe.function("sys_chown") ?
 {
 	name = "chown"
 	// path = user_string($filename)
@@ -393,8 +368,7 @@ probe nd_syscall.chown = kprobe.function("SyS_chown") ?,
 	group = __int32(uint_arg(3))
 	argstr = sprintf("%s, %d, %d", user_string_quoted(pointer_arg(1)), owner, group)
 }
-probe nd_syscall.chown.return = kprobe.function("SyS_chown").return ?,
-                                kprobe.function("sys_chown").return ?
+probe nd_syscall.chown.return = kprobe.function("sys_chown").return ?
 {
 	name = "chown"
 	retstr = returnstr(1)
@@ -424,8 +398,7 @@ probe nd_syscall.chown16.return = kprobe.function("sys_chown16").return ?
 
 # chroot _____________________________________________________
 # long sys_chroot(const char __user * filename)
-probe nd_syscall.chroot = kprobe.function("SyS_chroot") ?,
-                          kprobe.function("sys_chroot") ?
+probe nd_syscall.chroot = kprobe.function("sys_chroot") ?
 {
 	name = "chroot"
 	// path = user_string($filename)
@@ -434,8 +407,7 @@ probe nd_syscall.chroot = kprobe.function("SyS_chroot") ?,
 	path = user_string(pointer_arg(1))
 	argstr = user_string_quoted(pointer_arg(1))
 }
-probe nd_syscall.chroot.return = kprobe.function("SyS_chroot").return ?,
-                                 kprobe.function("sys_chroot").return ?
+probe nd_syscall.chroot.return = kprobe.function("sys_chroot").return ?
 {
 	name = "chroot"
 	retstr = returnstr(1)
@@ -446,7 +418,6 @@ probe nd_syscall.chroot.return = kprobe.function("SyS_chroot").return ?,
 # long compat_clock_getres(clockid_t which_clock, struct compat_timespec __user *tp)
 #
 probe nd_syscall.clock_getres = kprobe.function("compat_clock_getres") ?,
-                                kprobe.function("SyS_clock_getres") ?,
                                 kprobe.function("sys_clock_getres") ?
 {
 	name = "clock_getres"
@@ -461,7 +432,6 @@ probe nd_syscall.clock_getres = kprobe.function("compat_clock_getres") ?,
 	argstr = sprintf("%s, %p", clk_id_str, res_uaddr)
 }
 probe nd_syscall.clock_getres.return = kprobe.function("compat_clock_getres").return ?,
-                                       kprobe.function("SyS_clock_getres").return ?,
                                        kprobe.function("sys_clock_getres").return ?
 {
 	name = "clock_getres"
@@ -471,8 +441,7 @@ probe nd_syscall.clock_getres.return = kprobe.function("compat_clock_getres").re
 # clock_gettime ______________________________________________
 # long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp)
 #
-probe nd_syscall.clock_gettime = kprobe.function("SyS_clock_gettime") ?,
-                                 kprobe.function("sys_clock_gettime") ?
+probe nd_syscall.clock_gettime = kprobe.function("sys_clock_gettime") ?
 {
 	name = "clock_gettime"
 	// clk_id = $which_clock
@@ -483,8 +452,7 @@ probe nd_syscall.clock_gettime = kprobe.function("SyS_clock_gettime") ?,
 	clk_id_str = _get_wc_str(clk_id)
 	argstr = sprintf("%s, %p", clk_id_str, pointer_arg(2))
 }
-probe nd_syscall.clock_gettime.return = kprobe.function("SyS_clock_gettime").return ?,
-                                        kprobe.function("sys_clock_gettime").return ?
+probe nd_syscall.clock_gettime.return = kprobe.function("sys_clock_gettime").return ?
 {
 	name = "clock_gettime"
 	retstr = returnstr(1)
@@ -496,8 +464,7 @@ probe nd_syscall.clock_gettime.return = kprobe.function("SyS_clock_gettime").ret
 #                     const struct timespec __user *rqtp,
 #                     struct timespec __user *rmtp)
 #
-probe nd_syscall.clock_nanosleep = kprobe.function("SyS_clock_nanosleep") ?,
-                                   kprobe.function("sys_clock_nanosleep") ?
+probe nd_syscall.clock_nanosleep = kprobe.function("sys_clock_nanosleep") ?
 {
 	name = "clock_nanosleep"
 	// if ($flags == 1)
@@ -515,8 +482,7 @@ probe nd_syscall.clock_nanosleep = kprobe.function("SyS_clock_nanosleep") ?,
 	argstr = sprintf("%s, %s, %s, %p", _get_wc_str(int_arg(1)), flag_str,
 		_struct_timespec_u(pointer_arg(3), 1), pointer_arg(4))
 }
-probe nd_syscall.clock_nanosleep.return = kprobe.function("SyS_clock_nanosleep").return ?,
-                                          kprobe.function("sys_clock_nanosleep").return ?
+probe nd_syscall.clock_nanosleep.return = kprobe.function("sys_clock_nanosleep").return ?
 {
 	name = "clock_nanosleep"
 	retstr = returnstr(1)
@@ -558,8 +524,7 @@ probe nd_syscall.compat_clock_nanosleep.return = kprobe.function("compat_clock_n
 # long sys_clock_settime(clockid_t which_clock,
 #                   const struct timespec __user *tp)
 #
-probe nd_syscall.clock_settime = kprobe.function("SyS_clock_settime") ?,
-                                 kprobe.function("sys_clock_settime") ?
+probe nd_syscall.clock_settime = kprobe.function("sys_clock_settime") ?
 {
 	name = "clock_settime"
 	// clk_id = $which_clock
@@ -572,8 +537,7 @@ probe nd_syscall.clock_settime = kprobe.function("SyS_clock_settime") ?,
 	tp_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %s", clk_id_str, _struct_timespec_u(tp_uaddr, 1))
 }
-probe nd_syscall.clock_settime.return = kprobe.function("SyS_clock_settime").return ?,
-                                        kprobe.function("sys_clock_settime").return ?
+probe nd_syscall.clock_settime.return = kprobe.function("sys_clock_settime").return ?
 {
 	name = "clock_settime"
 	retstr = returnstr(1)
@@ -581,8 +545,7 @@ probe nd_syscall.clock_settime.return = kprobe.function("SyS_clock_settime").ret
 
 # close ______________________________________________________
 # long sys_close(unsigned int fd)
-probe nd_syscall.close = kprobe.function("SyS_close") ?,
-                         kprobe.function("sys_close") ?
+probe nd_syscall.close = kprobe.function("sys_close") ?
 {
 	name = "close"
 	// fd = $fd
@@ -590,16 +553,14 @@ probe nd_syscall.close = kprobe.function("SyS_close") ?,
 	fd = int_arg(1)
 	argstr = sprint(fd)
 }
-probe nd_syscall.close.return = kprobe.function("SyS_close").return ?,
-                                kprobe.function("sys_close").return ?
+probe nd_syscall.close.return = kprobe.function("sys_close").return ?
 {
 	name = "close"
 	retstr = returnstr(1)
 }
 # connect ____________________________________________________
 # long sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
-probe nd_syscall.connect = kprobe.function("SyS_connect") ?,
-                           kprobe.function("sys_connect") ?
+probe nd_syscall.connect = kprobe.function("sys_connect") ?
 {
 	name = "connect"
 	// sockfd = $fd
@@ -612,8 +573,7 @@ probe nd_syscall.connect = kprobe.function("SyS_connect") ?,
 	addrlen = int_arg(3)
 	argstr = sprintf("%d, %s, %d", sockfd, _struct_sockaddr_u(serv_addr_uaddr, addrlen), addrlen)
 }
-probe nd_syscall.connect.return = kprobe.function("SyS_connect").return ?,
-                                  kprobe.function("sys_connect").return ?
+probe nd_syscall.connect.return = kprobe.function("sys_connect").return ?
 {
 	name = "connect"
 	retstr = returnstr(1)
@@ -621,8 +581,7 @@ probe nd_syscall.connect.return = kprobe.function("SyS_connect").return ?,
 
 # creat
 # long sys_creat(const char __user * pathname, int mode)
-probe nd_syscall.creat = kprobe.function("SyS_creat") ?,
-                         kprobe.function("sys_creat") ?
+probe nd_syscall.creat = kprobe.function("sys_creat") ?
 {
 	name = "creat"
 	// mode = $mode
@@ -633,8 +592,7 @@ probe nd_syscall.creat = kprobe.function("SyS_creat") ?,
 	pathname = user_string(pointer_arg(1))
 	argstr = sprintf("%s, %#o", user_string_quoted(pointer_arg(1)), mode)
 }
-probe nd_syscall.creat.return = kprobe.function("SyS_creat").return ?,
-                                kprobe.function("sys_creat").return ?
+probe nd_syscall.creat.return = kprobe.function("sys_creat").return ?
 {
 	name = "creat"
 	retstr = returnstr(1)
@@ -642,8 +600,7 @@ probe nd_syscall.creat.return = kprobe.function("SyS_creat").return ?,
 
 # delete_module ______________________________________________
 # long sys_delete_module(const char __user *name_user, unsigned int flags)
-probe nd_syscall.delete_module = kprobe.function("SyS_delete_module") ?,
-                                 kprobe.function("sys_delete_module") ?
+probe nd_syscall.delete_module = kprobe.function("sys_delete_module") ?
 {
 	name = "delete_module"
 	// name_user = user_string($name_user)
@@ -654,8 +611,7 @@ probe nd_syscall.delete_module = kprobe.function("SyS_delete_module") ?,
 	flags = uint_arg(2)
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)), _module_flags_str(uint_arg(2)))
 }
-probe nd_syscall.delete_module.return = kprobe.function("SyS_delete_module").return ?,
-                                        kprobe.function("sys_delete_module").return ?
+probe nd_syscall.delete_module.return = kprobe.function("sys_delete_module").return ?
 {
 	name = "delete_module"
 	retstr = returnstr(1)
@@ -663,8 +619,7 @@ probe nd_syscall.delete_module.return = kprobe.function("SyS_delete_module").ret
 
 # dup ________________________________________________________
 # long sys_dup(unsigned int fildes)
-probe nd_syscall.dup = kprobe.function("SyS_dup") ?,
-                       kprobe.function("sys_dup") ?
+probe nd_syscall.dup = kprobe.function("sys_dup") ?
 {
 	name = "dup"
 	// oldfd = $fildes
@@ -673,8 +628,7 @@ probe nd_syscall.dup = kprobe.function("SyS_dup") ?,
 	old_fd = int_arg(1)
 	argstr = sprint(old_fd)
 }
-probe nd_syscall.dup.return = kprobe.function("SyS_dup").return ?,
-                              kprobe.function("sys_dup").return ?
+probe nd_syscall.dup.return = kprobe.function("sys_dup").return ?
 {
 	name = "dup"
 	retstr = returnstr(1)
@@ -682,8 +636,7 @@ probe nd_syscall.dup.return = kprobe.function("SyS_dup").return ?,
 
 # dup2 _______________________________________________________
 # long sys_dup2(unsigned int oldfd, unsigned int newfd)
-probe nd_syscall.dup2 = kprobe.function("SyS_dup2") ?,
-                        kprobe.function("sys_dup2") ?
+probe nd_syscall.dup2 = kprobe.function("sys_dup2") ?
 {
 	name = "dup2"
 	// oldfd = $oldfd
@@ -694,8 +647,7 @@ probe nd_syscall.dup2 = kprobe.function("SyS_dup2") ?,
 	newfd = int_arg(2)
 	argstr = sprintf("%d, %d", oldfd, newfd)
 }
-probe nd_syscall.dup2.return = kprobe.function("SyS_dup2").return ?,
-                               kprobe.function("sys_dup2").return ?
+probe nd_syscall.dup2.return = kprobe.function("sys_dup2").return ?
 {
 	name = "dup2"
 	retstr = returnstr(1)
@@ -703,8 +655,7 @@ probe nd_syscall.dup2.return = kprobe.function("SyS_dup2").return ?,
 
 # epoll_create _______________________________________________
 # long sys_epoll_create(int size)
-probe nd_syscall.epoll_create = kprobe.function("SyS_epoll_create") ?,
-                                kprobe.function("sys_epoll_create") ?
+probe nd_syscall.epoll_create = kprobe.function("sys_epoll_create") ?
 {
 	name = "epoll_create"
 	// size = $size
@@ -713,8 +664,7 @@ probe nd_syscall.epoll_create = kprobe.function("SyS_epoll_create") ?,
 	size = int_arg(1)
 	argstr = sprint(size)
 }
-probe nd_syscall.epoll_create.return = kprobe.function("SyS_epoll_create").return ?,
-                                       kprobe.function("sys_epoll_create").return ?
+probe nd_syscall.epoll_create.return = kprobe.function("sys_epoll_create").return ?
 {
 	name = "epoll_create"
 	retstr = returnstr(1)
@@ -727,7 +677,6 @@ probe nd_syscall.epoll_create.return = kprobe.function("SyS_epoll_create").retur
 #			struct compat_epoll_event __user *event)
 #
 probe nd_syscall.epoll_ctl = kprobe.function("compat_sys_epoll_ctl") ?,
-                             kprobe.function("SyS_epoll_ctl") ?,
                              kprobe.function("sys_epoll_ctl") ?
 {
 	name = "epoll_ctl"
@@ -746,7 +695,6 @@ probe nd_syscall.epoll_ctl = kprobe.function("compat_sys_epoll_ctl") ?,
 	argstr = sprintf("%d, %s, %d, %p", epfd, op_str, fd, event_uaddr)
 }
 probe nd_syscall.epoll_ctl.return = kprobe.function("compat_sys_epoll_ctl").return ?,
-                                    kprobe.function("SyS_epoll_ctl").return ?,
                                     kprobe.function("sys_epoll_ctl").return ?
 {
 	name = "epoll_ctl"
@@ -765,7 +713,6 @@ probe nd_syscall.epoll_ctl.return = kprobe.function("compat_sys_epoll_ctl").retu
 #			compat_size_t sigsetsize)
 #
 probe nd_syscall.epoll_pwait = kprobe.function("compat_sys_epoll_pwait") ?,
-                               kprobe.function("SyS_epoll_pwait") ?,
                                kprobe.function("sys_epoll_pwait") ?
 {
 	name = "epoll_pwait"
@@ -775,7 +722,6 @@ probe nd_syscall.epoll_pwait = kprobe.function("compat_sys_epoll_pwait") ?,
 		int_arg(1), pointer_arg(2), int_arg(3), int_arg(4), pointer_arg(5), ulong_arg(6))
 }
 probe nd_syscall.epoll_pwait.return = kprobe.function("compat_sys_epoll_pwait").return ?,
-                                      kprobe.function("SyS_epoll_pwait").return ?,
                                       kprobe.function("sys_epoll_pwait").return ?
 {
 	name = "epoll_pwait"
@@ -791,7 +737,6 @@ probe nd_syscall.epoll_pwait.return = kprobe.function("compat_sys_epoll_pwait").
 #		int maxevents, int timeout)
 #
 probe nd_syscall.epoll_wait = kprobe.function("compat_sys_epoll_wait") ?,
-                              kprobe.function("SyS_epoll_wait") ?,
                               kprobe.function("sys_epoll_wait") ?
 {
 	name = "epoll_wait"
@@ -808,7 +753,6 @@ probe nd_syscall.epoll_wait = kprobe.function("compat_sys_epoll_wait") ?,
 	argstr = sprintf("%d, %p, %d, %d", epfd, events_uaddr, maxevents, timeout)
 }
 probe nd_syscall.epoll_wait.return = kprobe.function("compat_sys_epoll_wait").return ?,
-                                     kprobe.function("SyS_epoll_wait").return ?,
                                      kprobe.function("sys_epoll_wait").return ?
 {
 	name = "epoll_wait"
@@ -818,16 +762,14 @@ probe nd_syscall.epoll_wait.return = kprobe.function("compat_sys_epoll_wait").re
 # eventfd _____________________________________________________
 # long sys_eventfd(unsigned int count)
 #
-probe nd_syscall.eventfd = kprobe.function("SyS_eventfd") ?,
-                           kprobe.function("sys_eventfd") ?
+probe nd_syscall.eventfd = kprobe.function("sys_eventfd") ?
 {
 	name = "eventfd"
 	// argstr = sprint($count)
 	asmlinkage()
 	argstr = sprint(uint_arg(1))
 }
-probe nd_syscall.eventfd.return = kprobe.function("SyS_eventfd").return ?,
-                                  kprobe.function("sys_eventfd").return ?
+probe nd_syscall.eventfd.return = kprobe.function("sys_eventfd").return ?
 {
 	name = "eventfd"
 	retstr = returnstr(1)
@@ -896,8 +838,7 @@ probe nd_syscall.exit = kprobe.function("do_exit")
 # exit_group _________________________________________________
 # void sys_exit_group(int error_code)
 #
-probe nd_syscall.exit_group = kprobe.function("SyS_exit_group") ?,
-                              kprobe.function("sys_exit_group") ?
+probe nd_syscall.exit_group = kprobe.function("sys_exit_group") ?
 {
 	name = "exit_group"
 	// status = $error_code
@@ -912,8 +853,7 @@ probe nd_syscall.exit_group = kprobe.function("SyS_exit_group") ?,
 # faccessat __________________________________________________
 # new function with 2.6.16
 # long sys_faccessat(int dfd, const char __user *filename, int mode)
-probe nd_syscall.faccessat = kprobe.function("SyS_faccessat") ?,
-                             kprobe.function("sys_faccessat") ?
+probe nd_syscall.faccessat = kprobe.function("sys_faccessat") ?
 {
 	name = "faccessat"
 	// dirfd = $dfd
@@ -930,8 +870,7 @@ probe nd_syscall.faccessat = kprobe.function("SyS_faccessat") ?,
 	mode_str = _access_mode_str(mode)
 	argstr = sprintf("%s, %s, %s", dirfd_str, user_string_quoted(pointer_arg(2)), mode_str)
 }
-probe nd_syscall.faccessat.return = kprobe.function("SyS_faccessat").return ?,
-                                    kprobe.function("sys_faccessat").return ?
+probe nd_syscall.faccessat.return = kprobe.function("sys_faccessat").return ?
 {
 	name = "faccessat"
 	retstr = returnstr(1)
@@ -941,8 +880,7 @@ probe nd_syscall.faccessat.return = kprobe.function("SyS_faccessat").return ?,
 # fadvise64 __________________________________________________
 # long sys_fadvise64(int fd, loff_t offset, size_t len,  int advice)
 #
-probe nd_syscall.fadvise64 = kprobe.function("SyS_fadvise64") ?,
-                             kprobe.function("sys_fadvise64") ?
+probe nd_syscall.fadvise64 = kprobe.function("sys_fadvise64") ?
 {
 	name = "fadvise64"
 	// fd = $fd
@@ -957,8 +895,7 @@ probe nd_syscall.fadvise64 = kprobe.function("SyS_fadvise64") ?,
 	advice = int_arg(4)
 	argstr = sprintf("%d, %d, %d, %s", fd, offset, len, _fadvice_advice_str(advice))
 }
-probe nd_syscall.fadvise64.return = kprobe.function("SyS_fadvise64").return ?,
-                                    kprobe.function("sys_fadvise64").return ?
+probe nd_syscall.fadvise64.return = kprobe.function("sys_fadvise64").return ?
 {
 	name = "fadvise64"
 	retstr = returnstr(1)
@@ -967,8 +904,7 @@ probe nd_syscall.fadvise64.return = kprobe.function("SyS_fadvise64").return ?,
 # fadvise64_64 _______________________________________________
 # long sys_fadvise64_64(int fd, loff_t offset, loff_t len,  int advice)
 #
-probe nd_syscall.fadvise64_64 = kprobe.function("SyS_fadvise64_64") ?,
-                                kprobe.function("sys_fadvise64_64") ?
+probe nd_syscall.fadvise64_64 = kprobe.function("sys_fadvise64_64") ?
 {
 	name = "fadvise64_64"
 	// fd = $fd
@@ -983,8 +919,7 @@ probe nd_syscall.fadvise64_64 = kprobe.function("SyS_fadvise64_64") ?,
 	advice = int_arg(4)
 	argstr = sprintf("%d, %d, %d, %s", fd, offset, len, _fadvice_advice_str(advice))
 }
-probe nd_syscall.fadvise64_64.return = kprobe.function("SyS_fadvise64_64").return ?,
-                                       kprobe.function("sys_fadvise64_64").return ?
+probe nd_syscall.fadvise64_64.return = kprobe.function("sys_fadvise64_64").return ?
 {
 	name = "fadvise64_64"
 	retstr = returnstr(1)
@@ -995,8 +930,7 @@ probe nd_syscall.fadvise64_64.return = kprobe.function("SyS_fadvise64_64").retur
 # fadvise64 __________________________________________________
 # long sys_fadvise64(int fd, loff_t offset, size_t len,  int advice)
 #
-probe nd_syscall.fadvise64 = kprobe.function("SyS_fadvise64") ?,
-                             kprobe.function("sys_fadvise64") ?
+probe nd_syscall.fadvise64 = kprobe.function("sys_fadvise64") ?
 {
 	name = "fadvise64"
 	fd = 0
@@ -1005,8 +939,7 @@ probe nd_syscall.fadvise64 = kprobe.function("SyS_fadvise64") ?,
 	advice = 0
 	argstr = ""
 }
-probe nd_syscall.fadvise64.return = kprobe.function("SyS_fadvise64").return ?,
-                                    kprobe.function("sys_fadvise64").return ?
+probe nd_syscall.fadvise64.return = kprobe.function("sys_fadvise64").return ?
 {
 	name = "fadvise64"
 	retstr = returnstr(1)
@@ -1015,8 +948,7 @@ probe nd_syscall.fadvise64.return = kprobe.function("SyS_fadvise64").return ?,
 # fadvise64_64 _______________________________________________
 # long sys_fadvise64_64(int fd, loff_t offset, loff_t len,  int advice)
 #
-probe nd_syscall.fadvise64_64 = kprobe.function("SyS_fadvise64_64") ?,
-                                kprobe.function("sys_fadvise64_64") ?
+probe nd_syscall.fadvise64_64 = kprobe.function("sys_fadvise64_64") ?
 {
 	name = "fadvise64_64"
 	fd = 0
@@ -1025,8 +957,7 @@ probe nd_syscall.fadvise64_64 = kprobe.function("SyS_fadvise64_64") ?,
 	advice = 0
 	argstr = ""
 }
-probe nd_syscall.fadvise64_64.return = kprobe.function("SyS_fadvise64_64").return ?,
-                                       kprobe.function("sys_fadvise64_64").return ?
+probe nd_syscall.fadvise64_64.return = kprobe.function("sys_fadvise64_64").return ?
 {
 	name = "fadvise64_64"
 	retstr = returnstr(1)
@@ -1035,8 +966,7 @@ probe nd_syscall.fadvise64_64.return = kprobe.function("SyS_fadvise64_64").retur
 
 # fchdir _____________________________________________________
 # long sys_fchdir(unsigned int fd)
-probe nd_syscall.fchdir = kprobe.function("SyS_fchdir") ?,
-                          kprobe.function("sys_fchdir") ?
+probe nd_syscall.fchdir = kprobe.function("sys_fchdir") ?
 {
 	name = "fchdir"
 	// fd = $fd
@@ -1045,8 +975,7 @@ probe nd_syscall.fchdir = kprobe.function("SyS_fchdir") ?,
 	fd = int_arg(1)
 	argstr = sprint(fd)
 }
-probe nd_syscall.fchdir.return = kprobe.function("SyS_fchdir").return ?,
-                                 kprobe.function("sys_fchdir").return ?
+probe nd_syscall.fchdir.return = kprobe.function("sys_fchdir").return ?
 {
 	name = "fchdir"
 	retstr = returnstr(1)
@@ -1054,8 +983,7 @@ probe nd_syscall.fchdir.return = kprobe.function("SyS_fchdir").return ?,
 
 # fchmod _____________________________________________________
 # long sys_fchmod(unsigned int fd, mode_t mode)
-probe nd_syscall.fchmod = kprobe.function("SyS_fchmod") ?,
-                          kprobe.function("sys_fchmod") ?
+probe nd_syscall.fchmod = kprobe.function("sys_fchmod") ?
 {
 	name = "fchmod"
 	// fildes = $fd
@@ -1065,8 +993,7 @@ probe nd_syscall.fchmod = kprobe.function("SyS_fchmod") ?,
 	mode = uint_arg(2) # SAFE?
 	argstr = sprintf("%d, %#o", fildes, mode)
 }
-probe nd_syscall.fchmod.return = kprobe.function("SyS_fchmod").return ?,
-                                 kprobe.function("sys_fchmod").return ?
+probe nd_syscall.fchmod.return = kprobe.function("sys_fchmod").return ?
 {
 	name = "fchmod"
 	retstr = returnstr(1)
@@ -1076,8 +1003,7 @@ probe nd_syscall.fchmod.return = kprobe.function("SyS_fchmod").return ?,
 # new function with 2.6.16
 # long sys_fchmodat(int dfd, const char __user *filename,
 #	mode_t mode)
-probe nd_syscall.fchmodat = kprobe.function("SyS_fchmodat") ?,
-                            kprobe.function("sys_fchmodat") ?
+probe nd_syscall.fchmodat = kprobe.function("sys_fchmodat") ?
 {
 	name = "fchmodat"
 	// dirfd = $dfd
@@ -1092,8 +1018,7 @@ probe nd_syscall.fchmodat = kprobe.function("SyS_fchmodat") ?,
 	mode = uint_arg(3)
 	argstr = sprintf("%s, %s, %#o", dirfd_str, user_string_quoted(pointer_arg(2)), mode)
 }
-probe nd_syscall.fchmodat.return = kprobe.function("SyS_fchmodat").return ?,
-                                   kprobe.function("sys_fchmodat").return ?
+probe nd_syscall.fchmodat.return = kprobe.function("sys_fchmodat").return ?
 {
 	name = "fchmodat"
 	retstr = returnstr(1)
@@ -1101,8 +1026,7 @@ probe nd_syscall.fchmodat.return = kprobe.function("SyS_fchmodat").return ?,
 
 # fchown _____________________________________________________
 # long sys_fchown(unsigned int fd, uid_t user, gid_t group)
-probe nd_syscall.fchown = kprobe.function("SyS_fchown") ?,
-                          kprobe.function("sys_fchown") ?
+probe nd_syscall.fchown = kprobe.function("sys_fchown") ?
 {
 	name = "fchown"
 	// fd = $fd
@@ -1115,8 +1039,7 @@ probe nd_syscall.fchown = kprobe.function("SyS_fchown") ?,
 	group = __int32(uint_arg(3))
 	argstr = sprintf("%d, %d, %d", fd, owner, group)
 }
-probe nd_syscall.fchown.return = kprobe.function("SyS_fchown").return ?,
-                                 kprobe.function("sys_fchown").return ?
+probe nd_syscall.fchown.return = kprobe.function("sys_fchown").return ?
 {
 	name = "fchown"
 	retstr = returnstr(1)
@@ -1147,8 +1070,7 @@ probe nd_syscall.fchown16.return = kprobe.function("sys_fchown16").return ?
 # new function with 2.6.16
 # long sys_fchownat(int dfd, const char __user *filename,
 #	uid_t user, gid_t group, int flag)
-probe nd_syscall.fchownat = kprobe.function("SyS_fchownat") ?,
-                            kprobe.function("sys_fchownat") ?
+probe nd_syscall.fchownat = kprobe.function("sys_fchownat") ?
 {
 	name = "fchownat"
 	// dirfd = $dfd
@@ -1171,8 +1093,7 @@ probe nd_syscall.fchownat = kprobe.function("SyS_fchownat") ?,
 	argstr = sprintf("%s, %s, %d, %d, %s",
 		dirfd_str, user_string_quoted(pointer_arg(2)), owner, group, flags_str)
 }
-probe nd_syscall.fchownat.return = kprobe.function("SyS_fchownat").return ?,
-                                   kprobe.function("sys_fchownat").return ?
+probe nd_syscall.fchownat.return = kprobe.function("sys_fchownat").return ?
 {
 	name = "fchownat"
 	retstr = returnstr(1)
@@ -1187,7 +1108,6 @@ probe nd_syscall.fchownat.return = kprobe.function("SyS_fchownat").return ?,
 probe nd_syscall.fcntl = kprobe.function("compat_sys_fcntl") ?,
                          kprobe.function("compat_sys_fcntl64") ?,
                          kprobe.function("sys_fcntl64") ?,
-                         kprobe.function("SyS_fcntl") ?,
                          kprobe.function("sys_fcntl") ?
 {
 	name = "fcntl"
@@ -1206,7 +1126,6 @@ probe nd_syscall.fcntl = kprobe.function("compat_sys_fcntl") ?,
 probe nd_syscall.fcntl.return = kprobe.function("compat_sys_fcntl").return ?,
                                 kprobe.function("compat_sys_fcntl64").return ?,
                                 kprobe.function("sys_fcntl64").return ?,
-                                kprobe.function("SyS_fcntl").return ?,
                                 kprobe.function("sys_fcntl").return ?
 {
 	name = "fcntl"
@@ -1215,8 +1134,7 @@ probe nd_syscall.fcntl.return = kprobe.function("compat_sys_fcntl").return ?,
 
 # fdatasync __________________________________________________
 # long sys_fdatasync(unsigned int fd)
-probe nd_syscall.fdatasync = kprobe.function("SyS_fdatasync") ?,
-                             kprobe.function("sys_fdatasync") ?
+probe nd_syscall.fdatasync = kprobe.function("sys_fdatasync") ?
 {
 	name = "fdatasync"
 	// fd = $fd
@@ -1224,8 +1142,7 @@ probe nd_syscall.fdatasync = kprobe.function("SyS_fdatasync") ?,
 	fd = int_arg(1)
 	argstr = sprint(fd)
 }
-probe nd_syscall.fdatasync.return = kprobe.function("SyS_fdatasync").return ?,
-                                    kprobe.function("sys_fdatasync").return ?
+probe nd_syscall.fdatasync.return = kprobe.function("sys_fdatasync").return ?
 {
 	name = "fdatasync"
 	retstr = returnstr(1)
@@ -1234,8 +1151,7 @@ probe nd_syscall.fdatasync.return = kprobe.function("SyS_fdatasync").return ?,
 # fgetxattr __________________________________________________
 # ssize_t sys_fgetxattr(int fd, char __user *name,
 # 		void __user *value, size_t size)
-probe nd_syscall.fgetxattr = kprobe.function("SyS_fgetxattr") ?,
-                             kprobe.function("sys_fgetxattr") ?
+probe nd_syscall.fgetxattr = kprobe.function("sys_fgetxattr") ?
 {
 	name = "fgetxattr"
 	// filedes = $fd
@@ -1251,16 +1167,14 @@ probe nd_syscall.fgetxattr = kprobe.function("SyS_fgetxattr") ?,
 	size  = ulong_arg(4)
 	argstr = sprintf("%d, %s, %p, %d", filedes, user_string_quoted(pointer_arg(2)), value_uaddr, size)
 }
-probe nd_syscall.fgetxattr.return = kprobe.function("SyS_fgetxattr").return ?,
-                                    kprobe.function("sys_fgetxattr").return ?
+probe nd_syscall.fgetxattr.return = kprobe.function("sys_fgetxattr").return ?
 {
 	name = "fgetxattr"
 	retstr = returnstr(1)
 }
 # flistxattr _________________________________________________
 # ssize_t sys_flistxattr(int fd, char __user *list, size_t size)
-probe nd_syscall.flistxattr = kprobe.function("SyS_flistxattr") ?,
-                              kprobe.function("sys_flistxattr") ?
+probe nd_syscall.flistxattr = kprobe.function("sys_flistxattr") ?
 {
 	name = "flistxattr"
 	// filedes = $fd
@@ -1272,8 +1186,7 @@ probe nd_syscall.flistxattr = kprobe.function("SyS_flistxattr") ?,
 	size = ulong_arg(3)
 	argstr = sprintf("%d, %p, %d", filedes, list_uaddr, size)
 }
-probe nd_syscall.flistxattr.return = kprobe.function("SyS_flistxattr").return ?,
-                                     kprobe.function("sys_flistxattr").return ?
+probe nd_syscall.flistxattr.return = kprobe.function("sys_flistxattr").return ?
 {
 	name = "flistxattr"
 	retstr = returnstr(1)
@@ -1281,8 +1194,7 @@ probe nd_syscall.flistxattr.return = kprobe.function("SyS_flistxattr").return ?,
 
 # flock ______________________________________________________
 # long sys_flock(unsigned int fd, unsigned int cmd)
-probe nd_syscall.flock = kprobe.function("SyS_flock") ?,
-                         kprobe.function("sys_flock") ?
+probe nd_syscall.flock = kprobe.function("sys_flock") ?
 {
 	name = "flock"
 	// fd = $fd
@@ -1292,8 +1204,7 @@ probe nd_syscall.flock = kprobe.function("SyS_flock") ?,
 	operation = int_arg(2)
 	argstr = sprintf("%d, %s", fd, _flock_cmd_str(operation))
 }
-probe nd_syscall.flock.return = kprobe.function("SyS_flock").return ?,
-                                kprobe.function("sys_flock").return ?
+probe nd_syscall.flock.return = kprobe.function("sys_flock").return ?
 {
 	name = "flock"
 	retstr = returnstr(1)
@@ -1377,8 +1288,7 @@ probe nd_syscall.fork.return = kprobe.function("do_fork").return
 }
 # fremovexattr _______________________________________________
 # long sys_fremovexattr(int fd, char __user *name)
-probe nd_syscall.fremovexattr = kprobe.function("SyS_fremovexattr") ?,
-                                kprobe.function("sys_fremovexattr") ?
+probe nd_syscall.fremovexattr = kprobe.function("sys_fremovexattr") ?
 {
 	name = "fremovexattr"
 	// filedes = $fd
@@ -1390,8 +1300,7 @@ probe nd_syscall.fremovexattr = kprobe.function("SyS_fremovexattr") ?,
 	name2 = user_string(pointer_arg(2))
 	argstr = sprintf("%d, %s", filedes, user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.fremovexattr.return = kprobe.function("SyS_fremovexattr").return ?,
-                                       kprobe.function("sys_fremovexattr").return ?
+probe nd_syscall.fremovexattr.return = kprobe.function("sys_fremovexattr").return ?
 {
 	name = "fremovexattr"
 	retstr = returnstr(1)
@@ -1406,8 +1315,7 @@ probe nd_syscall.fremovexattr.return = kprobe.function("SyS_fremovexattr").retur
  *               size_t size,
  *               int flags)
  */
-probe nd_syscall.fsetxattr = kprobe.function("SyS_fsetxattr") ?,
-                             kprobe.function("sys_fsetxattr") ?
+probe nd_syscall.fsetxattr = kprobe.function("sys_fsetxattr") ?
 {
 	name = "fsetxattr"
 	// filedes = $fd
@@ -1425,8 +1333,7 @@ probe nd_syscall.fsetxattr = kprobe.function("SyS_fsetxattr") ?,
 	flags = int_arg(5)
 	argstr = sprintf("%d, %s, %p, %d, %p", filedes, user_string_quoted(pointer_arg(2)), value_uaddr, size, flags)
 }
-probe nd_syscall.fsetxattr.return = kprobe.function("SyS_fsetxattr").return ?,
-                                    kprobe.function("sys_fsetxattr").return ?
+probe nd_syscall.fsetxattr.return = kprobe.function("sys_fsetxattr").return ?
 {
 	name = "fsetxattr"
 	retstr = returnstr(1)
@@ -1442,10 +1349,8 @@ probe nd_syscall.fsetxattr.return = kprobe.function("SyS_fsetxattr").return ?,
 # long compat_sys_newfstat(unsigned int fd, struct compat_stat __user * statbuf)
 #
 probe nd_syscall.fstat = kprobe.function("sys_fstat") ?,
-                         kprobe.function("SyS_fstat64") ?,
                          kprobe.function("sys_fstat64") ?,
                          kprobe.function("sys32_fstat64") ?,
-                         kprobe.function("SyS_newfstat") ?,
                          kprobe.function("sys_newfstat") ?,
                          kprobe.function("sys_oabi_fstat64") ?,
                          kprobe.function("compat_sys_newfstat") ?
@@ -1460,10 +1365,8 @@ probe nd_syscall.fstat = kprobe.function("sys_fstat") ?,
 	argstr = sprintf("%d, %p", filedes, buf_uaddr)
 }
 probe nd_syscall.fstat.return = kprobe.function("sys_fstat").return ?,
-                                kprobe.function("SyS_fstat64").return ?,
                                 kprobe.function("sys_fstat64").return ?,
                                 kprobe.function("sys32_fstat64").return ?,
-                                kprobe.function("SyS_newfstat").return ?,
                                 kprobe.function("sys_newfstat").return ?,
                                 kprobe.function("sys_oabi_fstat64").return ?,
                                 kprobe.function("compat_sys_newfstat").return ?
@@ -1477,9 +1380,7 @@ probe nd_syscall.fstat.return = kprobe.function("sys_fstat").return ?,
 # long sys_newfstatat(int dfd, char __user *filename, struct stat __user *statbuf, int flag)
 # long sys_fstatat64(int dfd, char __user *filename, struct stat64 __user *statbuf, int flag)
 # long compat_sys_newfstatat(unsigned int dfd, char __user *filename, struct compat_stat __user *statbuf, int flag)
-probe nd_syscall.fstatat = kprobe.function("SyS_fstatat64") ?,
-                           kprobe.function("sys_fstatat64") ?,
-                           kprobe.function("SyS_newfstatat") ?,
+probe nd_syscall.fstatat = kprobe.function("sys_fstatat64") ?,
                            kprobe.function("sys_newfstatat") ?,
                            kprobe.function("compat_sys_newfstatat") ?,
                            kprobe.function("sys32_fstatat64") ?
@@ -1495,9 +1396,7 @@ probe nd_syscall.fstatat = kprobe.function("SyS_fstatat64") ?,
 	buf_uaddr = pointer_arg(3)
 	argstr = sprintf("%s, %s, %p, %s", _dfd_str(dirfd), user_string_quoted(pointer_arg(2)), buf_uaddr, _at_flag_str(int_arg(4)))
 }
-probe nd_syscall.fstatat.return = kprobe.function("SyS_fstatat64").return ?,
-                                  kprobe.function("sys_fstatat64").return ?,
-                                  kprobe.function("SyS_newfstatat").return ?,
+probe nd_syscall.fstatat.return = kprobe.function("sys_fstatat64").return ?,
                                   kprobe.function("sys_newfstatat").return ?,
                                   kprobe.function("compat_sys_newfstatat").return ?,
                                   kprobe.function("sys32_fstatat64").return ?
@@ -1511,7 +1410,6 @@ probe nd_syscall.fstatat.return = kprobe.function("SyS_fstatat64").return ?,
 # long compat_sys_fstatfs(unsigned int fd, struct compat_statfs __user *buf)
 #
 probe nd_syscall.fstatfs = kprobe.function("compat_sys_fstatfs") ?,
-                           kprobe.function("SyS_fstatfs") ?,
                            kprobe.function("sys_fstatfs") ?
 {
 	name = "fstatfs"
@@ -1524,7 +1422,6 @@ probe nd_syscall.fstatfs = kprobe.function("compat_sys_fstatfs") ?,
 	argstr = sprintf("%d, %p", fd, buf_uaddr)
 }
 probe nd_syscall.fstatfs.return = kprobe.function("compat_sys_fstatfs").return ?,
-                                  kprobe.function("SyS_fstatfs").return ?,
                                   kprobe.function("sys_fstatfs").return ?
 {
 	name = "fstatfs"
@@ -1536,7 +1433,6 @@ probe nd_syscall.fstatfs.return = kprobe.function("compat_sys_fstatfs").return ?
 # long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz, struct compat_statfs64 __user *buf)
 #
 probe nd_syscall.fstatfs64 = kprobe.function("compat_sys_fstatfs64") ?,
-                             kprobe.function("SyS_fstatfs64") ?,
                              kprobe.function("sys_fstatfs64") ?
 {
 	name = "fstatfs"
@@ -1551,7 +1447,6 @@ probe nd_syscall.fstatfs64 = kprobe.function("compat_sys_fstatfs64") ?,
 	argstr = sprintf("%d, %d, %p", fd, sz, buf_uaddr)
 }
 probe nd_syscall.fstatfs64.return = kprobe.function("compat_sys_fstatfs64").return ?,
-                                    kprobe.function("SyS_fstatfs64").return ?,
                                     kprobe.function("sys_fstatfs64").return ?
 {
 	name = "fstatfs"
@@ -1560,8 +1455,7 @@ probe nd_syscall.fstatfs64.return = kprobe.function("compat_sys_fstatfs64").retu
 
 # fsync ______________________________________________________
 # long sys_fsync(unsigned int fd)
-probe nd_syscall.fsync = kprobe.function("SyS_fsync") ?,
-                         kprobe.function("sys_fsync") ?
+probe nd_syscall.fsync = kprobe.function("sys_fsync") ?
 {
 	name = "fsync"
 	// fd = $fd
@@ -1569,16 +1463,14 @@ probe nd_syscall.fsync = kprobe.function("SyS_fsync") ?,
 	fd = int_arg(1)
 	argstr = sprint(fd)
 }
-probe nd_syscall.fsync.return = kprobe.function("SyS_fsync").return ?,
-                                kprobe.function("sys_fsync").return ?
+probe nd_syscall.fsync.return = kprobe.function("sys_fsync").return ?
 {
 	name = "fsync"
 	retstr = returnstr(1)
 }
 # ftruncate __________________________________________________
 # long sys_ftruncate(unsigned int fd, unsigned long length)
-probe nd_syscall.ftruncate = kprobe.function("SyS_ftruncate") ?,
-                             kprobe.function("sys_ftruncate") ?
+probe nd_syscall.ftruncate = kprobe.function("sys_ftruncate") ?
 {
 	name = "ftruncate"
 	// fd = $fd
@@ -1588,8 +1480,7 @@ probe nd_syscall.ftruncate = kprobe.function("SyS_ftruncate") ?,
 	length = ulong_arg(2)
 	argstr = sprintf("%d, %d", fd, length)
 }
-probe nd_syscall.ftruncate.return = kprobe.function("SyS_ftruncate").return ?,
-                                    kprobe.function("sys_ftruncate").return ?
+probe nd_syscall.ftruncate.return = kprobe.function("sys_ftruncate").return ?
 {
 	name = "ftruncate"
 	retstr = returnstr(1)
@@ -1624,8 +1515,7 @@ probe nd_syscall.ftruncate64.return = kprobe.function("sys_ftruncate64").return
 #		struct compat_timespec __user *utime, u32 __user *uaddr2,
 #		u32 val3)
 #
-probe nd_syscall.futex = kprobe.function("SyS_futex") ?,
-                         kprobe.function("sys_futex") ?
+probe nd_syscall.futex = kprobe.function("sys_futex") ?
 {
 	name = "futex"
 	// futex_uaddr = $uaddr
@@ -1655,8 +1545,7 @@ probe nd_syscall.futex = kprobe.function("SyS_futex") ?,
 		argstr = sprintf("%p, %s, %d", futex_uaddr,
 			_futex_op_str(op), val)
 }
-probe nd_syscall.futex.return = kprobe.function("SyS_futex").return ?,
-                                kprobe.function("sys_futex").return ?
+probe nd_syscall.futex.return = kprobe.function("sys_futex").return ?
 {
 	name = "futex"
 	retstr = returnstr(1)
@@ -1703,8 +1592,7 @@ probe nd_syscall.compat_futex.return = kprobe.function("compat_sys_futex").retur
 # long compat_sys_futimesat(unsigned int dfd, char __user *filename, struct compat_timeval __user *t)
 #
 
-probe nd_syscall.futimesat = kprobe.function("SyS_futimesat") ?,
-                             kprobe.function("sys_futimesat") ?
+probe nd_syscall.futimesat = kprobe.function("sys_futimesat") ?
 {
 	name = "futimesat"
 	// dirfd = $dfd
@@ -1738,8 +1626,7 @@ probe nd_syscall.compat_futimesat = kprobe.function("compat_sys_futimesat") ?
 	argstr = sprintf("%s, %s, %s", _dfd_str(uint_arg(1)), user_string_quoted(pointer_arg(2)),
 		_struct_compat_timeval_u(pointer_arg(3), 2))
 }
-probe nd_syscall.futimesat.return = kprobe.function("SyS_futimesat").return ?,
-                                    kprobe.function("sys_futimesat").return ?
+probe nd_syscall.futimesat.return = kprobe.function("sys_futimesat").return ?
 {
 	name = "futimesat"
 	retstr = returnstr(1)
@@ -1752,8 +1639,7 @@ probe nd_syscall.compat_futimesat.return = kprobe.function("compat_sys_futimesat
 
 # getcwd _____________________________________________________
 # long sys_getcwd(char __user *buf, unsigned long size)
-probe nd_syscall.getcwd = kprobe.function("SyS_getcwd") ?,
-                          kprobe.function("sys_getcwd") ?
+probe nd_syscall.getcwd = kprobe.function("sys_getcwd") ?
 {
 	name = "getcwd"
 	// buf_uaddr = $buf
@@ -1763,8 +1649,7 @@ probe nd_syscall.getcwd = kprobe.function("SyS_getcwd") ?,
 	size = ulong_arg(2)
 	argstr = sprintf("%p, %d", buf_uaddr, size)
 }
-probe nd_syscall.getcwd.return = kprobe.function("SyS_getcwd").return ?,
-                                 kprobe.function("sys_getcwd").return ?
+probe nd_syscall.getcwd.return = kprobe.function("sys_getcwd").return ?
 {
 	name = "getcwd"
 	retstr = returnstr(1)
@@ -1776,9 +1661,7 @@ probe nd_syscall.getcwd.return = kprobe.function("SyS_getcwd").return ?,
 # long sys_getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
 # long compat_sys_getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
 #
-probe nd_syscall.getdents = kprobe.function("SyS_getdents") ?,
-                            kprobe.function("sys_getdents") ?,
-                            kprobe.function("SyS_getdents64") ?,
+probe nd_syscall.getdents = kprobe.function("sys_getdents") ?,
                             kprobe.function("sys_getdents64") ?,
                             kprobe.function("compat_sys_getdents") ?,
                             kprobe.function("compat_sys_getdents64") ?
@@ -1794,9 +1677,7 @@ probe nd_syscall.getdents = kprobe.function("SyS_getdents") ?,
 	count = uint_arg(3)
 	argstr = sprintf("%d, %p, %d", fd, dirp_uaddr, count)
 }
-probe nd_syscall.getdents.return = kprobe.function("SyS_getdents").return ?,
-                                   kprobe.function("sys_getdents").return ?,
-                                   kprobe.function("SyS_getdents64").return ?,
+probe nd_syscall.getdents.return = kprobe.function("sys_getdents").return ?,
                                    kprobe.function("sys_getdents64").return ?,
                                    kprobe.function("compat_sys_getdents").return ?,
                                    kprobe.function("compat_sys_getdents64").return ?
@@ -1870,7 +1751,6 @@ probe nd_syscall.getgid.return = kprobe.function("sys_getgid16").return ?,
 #
 probe nd_syscall.getgroups = kprobe.function("sys_getgroups16") ?,
                              kprobe.function("sys32_getgroups16") ?,
-                             kprobe.function("SyS_getgroups") ?,
                              kprobe.function("sys_getgroups") ?
 {
 	name = "getgroups"
@@ -1884,7 +1764,6 @@ probe nd_syscall.getgroups = kprobe.function("sys_getgroups16") ?,
 }
 probe nd_syscall.getgroups.return = kprobe.function("sys_getgroups16").return ?,
                                     kprobe.function("sys32_getgroups16").return ?,
-                                    kprobe.function("SyS_getgroups").return ?,
                                     kprobe.function("sys_getgroups").return ?
 {
 	name = "getgroups"
@@ -1893,8 +1772,7 @@ probe nd_syscall.getgroups.return = kprobe.function("sys_getgroups16").return ?,
 
 # gethostname ________________________________________________
 # long sys_gethostname(char __user *name, int len)
-probe nd_syscall.gethostname = kprobe.function("SyS_gethostname") ?,
-                               kprobe.function("sys_gethostname") ?
+probe nd_syscall.gethostname = kprobe.function("sys_gethostname") ?
 {
 	name = "gethostname"
 	// name_uaddr = $name
@@ -1904,8 +1782,7 @@ probe nd_syscall.gethostname = kprobe.function("SyS_gethostname") ?,
 	len = int_arg(2)
 	argstr = sprintf ("%p, %d", name_uaddr, len)
 }
-probe nd_syscall.gethostname.return = kprobe.function("SyS_gethostname").return ?,
-                                      kprobe.function("sys_gethostname").return ?
+probe nd_syscall.gethostname.return = kprobe.function("sys_gethostname").return ?
 {
 	name = "gethostname"
 	retstr = returnstr(1)
@@ -1914,8 +1791,7 @@ probe nd_syscall.gethostname.return = kprobe.function("SyS_gethostname").return
 # getitimer __________________________________________________
 # sys_getitimer(int which, struct itimerval __user *value)
 #
-probe nd_syscall.getitimer = kprobe.function("SyS_getitimer") ?,
-                             kprobe.function("sys_getitimer") ?
+probe nd_syscall.getitimer = kprobe.function("sys_getitimer") ?
 {
 	name = "getitimer"
 	// which = $which
@@ -1926,8 +1802,7 @@ probe nd_syscall.getitimer = kprobe.function("SyS_getitimer") ?,
 	value_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %p", _itimer_which_str(which), value_uaddr)
 }
-probe nd_syscall.getitimer.return = kprobe.function("SyS_getitimer").return ?,
-                                    kprobe.function("sys_getitimer").return ?
+probe nd_syscall.getitimer.return = kprobe.function("sys_getitimer").return ?
 {
 	name = "getitimer"
 	retstr = returnstr(1)
@@ -1962,7 +1837,6 @@ probe nd_syscall.compat_getitimer.return = kprobe.function("compat_sys_getitimer
 #		     compat_ulong_t addr, compat_ulong_t flags)
 #
 probe nd_syscall.get_mempolicy = kprobe.function("compat_sys_get_mempolicy") ?,
-                                 kprobe.function("SyS_get_mempolicy") ?,
                                  kprobe.function("sys_get_mempolicy") ?
 {
 	name = "get_mempolicy"
@@ -1983,7 +1857,6 @@ probe nd_syscall.get_mempolicy = kprobe.function("compat_sys_get_mempolicy") ?,
 		nmask_uaddr, maxnode, addr, flags)
 }
 probe nd_syscall.get_mempolicy.return = kprobe.function("compat_sys_get_mempolicy").return ?,
-                                        kprobe.function("SyS_get_mempolicy").return ?,
                                         kprobe.function("sys_get_mempolicy").return ?
 {
 	name = "get_mempolicy"
@@ -1993,8 +1866,7 @@ probe nd_syscall.get_mempolicy.return = kprobe.function("compat_sys_get_mempolic
 # getpeername ________________________________________________
 # long sys_getpeername(int fd, struct sockaddr __user *usockaddr, int __user *usockaddr_len)
 #
-probe nd_syscall.getpeername = kprobe.function("SyS_getpeername") ?,
-                               kprobe.function("sys_getpeername") ?
+probe nd_syscall.getpeername = kprobe.function("sys_getpeername") ?
 {
 	name = "getpeername"
 	// s = $fd
@@ -2007,8 +1879,7 @@ probe nd_syscall.getpeername = kprobe.function("SyS_getpeername") ?,
 	namelen_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %p, %p", s, name_uaddr, namelen_uaddr)
 }
-probe nd_syscall.getpeername.return = kprobe.function("SyS_getpeername").return ?,
-                                      kprobe.function("sys_getpeername").return ?
+probe nd_syscall.getpeername.return = kprobe.function("sys_getpeername").return ?
 {
 	name = "getpeername"
 	retstr = returnstr(1)
@@ -2016,8 +1887,7 @@ probe nd_syscall.getpeername.return = kprobe.function("SyS_getpeername").return
 
 # getpgid ____________________________________________________
 # long sys_getpgid(pid_t pid)
-probe nd_syscall.getpgid = kprobe.function("SyS_getpgid") ?,
-                           kprobe.function("sys_getpgid") ?
+probe nd_syscall.getpgid = kprobe.function("sys_getpgid") ?
 {
 	name = "getpgid"
 	// pid = $pid
@@ -2026,8 +1896,7 @@ probe nd_syscall.getpgid = kprobe.function("SyS_getpgid") ?,
 	pid = int_arg(1)
 	argstr = sprintf("%d", pid)
 }
-probe nd_syscall.getpgid.return = kprobe.function("SyS_getpgid").return ?,
-                                  kprobe.function("sys_getpgid").return ?
+probe nd_syscall.getpgid.return = kprobe.function("sys_getpgid").return ?
 {
 	name = "getpgid"
 	retstr = returnstr(1)
@@ -2074,8 +1943,7 @@ probe nd_syscall.getppid.return = kprobe.function("sys_getppid").return
 
 # getpriority ________________________________________________
 # long sys_getpriority(int which, int who)
-probe nd_syscall.getpriority = kprobe.function("SyS_getpriority") ?,
-                               kprobe.function("sys_getpriority") ?
+probe nd_syscall.getpriority = kprobe.function("sys_getpriority") ?
 {
 	name = "getpriority"
 	// which = $which
@@ -2085,8 +1953,7 @@ probe nd_syscall.getpriority = kprobe.function("SyS_getpriority") ?,
 	who = int_arg(2)
 	argstr = sprintf("%s, %d", _priority_which_str(which), who)
 }
-probe nd_syscall.getpriority.return = kprobe.function("SyS_getpriority").return ?,
-                                      kprobe.function("sys_getpriority").return ?
+probe nd_syscall.getpriority.return = kprobe.function("sys_getpriority").return ?
 {
 	name = "getpriority"
 	retstr = returnstr(1)
@@ -2100,7 +1967,6 @@ probe nd_syscall.getpriority.return = kprobe.function("SyS_getpriority").return
 #                 old_uid_t __user *egid,
 #                 old_uid_t __user *sgid)
 probe nd_syscall.getresgid = kprobe.function("sys_getresgid16") ?,
-                             kprobe.function("SyS_getresgid") ?,
                              kprobe.function("sys_getresgid") ?
 {
 	name = "getresgid"
@@ -2115,7 +1981,6 @@ probe nd_syscall.getresgid = kprobe.function("sys_getresgid16") ?,
 	argstr = sprintf("%p, %p, %p", rgid_uaddr, egid_uaddr, sgid_uaddr)
 }
 probe nd_syscall.getresgid.return = kprobe.function("sys_getresgid16").return ?,
-                                    kprobe.function("SyS_getresgid").return ?,
                                     kprobe.function("sys_getresgid").return ?
 {
 	name = "getresgid"
@@ -2127,7 +1992,6 @@ probe nd_syscall.getresgid.return = kprobe.function("sys_getresgid16").return ?,
 #		uid_t __user *euid,
 #		uid_t __user *suid)
 probe nd_syscall.getresuid = kprobe.function("sys_getresuid16") ?,
-                             kprobe.function("SyS_getresuid") ?,
                              kprobe.function("sys_getresuid") ?
 {
 	name = "getresuid"
@@ -2142,7 +2006,6 @@ probe nd_syscall.getresuid = kprobe.function("sys_getresuid16") ?,
 	argstr = sprintf("%p, %p, %p", ruid_uaddr, euid_uaddr, suid_uaddr)
 }
 probe nd_syscall.getresuid.return = kprobe.function("sys_getresuid16").return ?,
-                                    kprobe.function("SyS_getresuid").return ?,
                                     kprobe.function("sys_getresuid").return ?
 {
 	name = "getresuid"
@@ -2153,9 +2016,7 @@ probe nd_syscall.getresuid.return = kprobe.function("sys_getresuid16").return ?,
 # long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim)
 # long sys_old_getrlimit(unsigned int resource, struct rlimit __user *rlim)
 # long compat_sys_getrlimit (unsigned int resource, struct compat_rlimit __user *rlim)
-probe nd_syscall.getrlimit = kprobe.function("SyS_getrlimit") ?,
-                             kprobe.function("sys_getrlimit") ?,
-                             kprobe.function("SyS_old_getrlimit") ?,
+probe nd_syscall.getrlimit = kprobe.function("sys_getrlimit") ?,
                              kprobe.function("sys_old_getrlimit") ?,
                              kprobe.function("compat_sys_getrlimit") ?
 {
@@ -2168,9 +2029,7 @@ probe nd_syscall.getrlimit = kprobe.function("SyS_getrlimit") ?,
 	rlim_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %p", _rlimit_resource_str(resource), rlim_uaddr)
 }
-probe nd_syscall.getrlimit.return = kprobe.function("SyS_getrlimit").return ?,
-                                    kprobe.function("sys_getrlimit").return ?,
-                                    kprobe.function("SyS_old_getrlimit").return ?,
+probe nd_syscall.getrlimit.return = kprobe.function("sys_getrlimit").return ?,
                                     kprobe.function("sys_old_getrlimit").return ?,
                                     kprobe.function("compat_sys_getrlimit").return ?
 {
@@ -2180,8 +2039,7 @@ probe nd_syscall.getrlimit.return = kprobe.function("SyS_getrlimit").return ?,
 
 # getrusage __________________________________________________
 # long sys_getrusage(int who, struct rusage __user *ru)
-probe nd_syscall.getrusage = kprobe.function("SyS_getrusage") ?,
-                             kprobe.function("sys_getrusage") ?
+probe nd_syscall.getrusage = kprobe.function("sys_getrusage") ?
 {
 	name = "getrusage"
 	// who = $who
@@ -2201,8 +2059,7 @@ probe nd_syscall.getrusage = kprobe.function("SyS_getrusage") ?,
 	usage_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %p", who_str, usage_uaddr)
 }
-probe nd_syscall.getrusage.return = kprobe.function("SyS_getrusage").return ?,
-                                    kprobe.function("sys_getrusage").return ?
+probe nd_syscall.getrusage.return = kprobe.function("sys_getrusage").return ?
 {
 	name = "getrusage"
 	retstr = returnstr(1)
@@ -2210,8 +2067,7 @@ probe nd_syscall.getrusage.return = kprobe.function("SyS_getrusage").return ?,
 
 # getsid _____________________________________________________
 # long sys_getsid(pid_t pid)
-probe nd_syscall.getsid = kprobe.function("SyS_getsid") ?,
-                          kprobe.function("sys_getsid") ?
+probe nd_syscall.getsid = kprobe.function("sys_getsid") ?
 {
 	name = "getsid"
 	// pid = $pid
@@ -2219,8 +2075,7 @@ probe nd_syscall.getsid = kprobe.function("SyS_getsid") ?,
 	pid = int_arg(1)
 	argstr = sprint(pid)
 }
-probe nd_syscall.getsid.return = kprobe.function("SyS_getsid").return ?,
-                                 kprobe.function("sys_getsid").return ?
+probe nd_syscall.getsid.return = kprobe.function("sys_getsid").return ?
 {
 	name = "getsid"
 	retstr = returnstr(1)
@@ -2230,8 +2085,7 @@ probe nd_syscall.getsid.return = kprobe.function("SyS_getsid").return ?,
 # long sys_getsockname(int fd,
 #		struct sockaddr __user *usockaddr,
 #		int __user *usockaddr_len)
-probe nd_syscall.getsockname = kprobe.function("SyS_getsockname") ?,
-                               kprobe.function("sys_getsockname") ?
+probe nd_syscall.getsockname = kprobe.function("sys_getsockname") ?
 {
 	name = "getsockname"
 	// s = $fd
@@ -2244,8 +2098,7 @@ probe nd_syscall.getsockname = kprobe.function("SyS_getsockname") ?,
 	namelen_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %p, %p", s, name_uaddr, namelen_uaddr)
 }
-probe nd_syscall.getsockname.return = kprobe.function("SyS_getsockname").return ?,
-                                      kprobe.function("sys_getsockname").return ?
+probe nd_syscall.getsockname.return = kprobe.function("sys_getsockname").return ?
 {
 	name = "getsockname"
 	retstr = returnstr(1)
@@ -2259,7 +2112,6 @@ probe nd_syscall.getsockname.return = kprobe.function("SyS_getsockname").return
 #                int __user *optlen)
 #
 probe nd_syscall.getsockopt = kprobe.function("compat_sys_getsockopt") ?,
-                              kprobe.function("SyS_getsockopt") ?,
                               kprobe.function("sys_getsockopt") ?
 {
 	name = "getsockopt"
@@ -2284,7 +2136,6 @@ probe nd_syscall.getsockopt = kprobe.function("compat_sys_getsockopt") ?,
 		_sockopt_optname_str(optname), optval_uaddr, optlen_uaddr)
 }
 probe nd_syscall.getsockopt.return = kprobe.function("compat_sys_getsockopt").return ?,
-                                     kprobe.function("SyS_getsockopt").return ?,
                                      kprobe.function("sys_getsockopt").return ?
 {
 	name = "getsockopt"
@@ -2313,7 +2164,6 @@ probe nd_syscall.gettid.return = kprobe.function("sys_gettid").return
 #	struct timezone __user *tz)
 probe nd_syscall.gettimeofday = kprobe.function("compat_sys_gettimeofday") ?,
                                 kprobe.function("sys32_gettimeofday") ?,
-                                kprobe.function("SyS_gettimeofday") ?,
                                 kprobe.function("sys_gettimeofday") ?
 {
 	name = "gettimeofday"
@@ -2328,7 +2178,6 @@ probe nd_syscall.gettimeofday = kprobe.function("compat_sys_gettimeofday") ?,
 
 probe nd_syscall.gettimeofday.return = kprobe.function("compat_sys_gettimeofday").return ?,
                                        kprobe.function("sys32_gettimeofday").return ?,
-                                       kprobe.function("SyS_gettimeofday").return ?,
                                        kprobe.function("sys_gettimeofday").return ?
 {
 	name = "gettimeofday"
@@ -2358,8 +2207,7 @@ probe nd_syscall.getuid.return = kprobe.function("sys_getuid16").return ?,
 # getxattr ___________________________________________________
 # ssize_t sys_getxattr(char __user *path, char __user *name,
 #		void __user *value, size_t size)
-probe nd_syscall.getxattr = kprobe.function("SyS_getxattr") ?,
-                            kprobe.function("sys_getxattr") ?
+probe nd_syscall.getxattr = kprobe.function("sys_getxattr") ?
 {
 	name = "getxattr"
 	//	path = user_string(@defined($pathname) ? $pathname : $path)
@@ -2381,8 +2229,7 @@ probe nd_syscall.getxattr = kprobe.function("SyS_getxattr") ?,
 		user_string_quoted(pointer_arg(2)),
 		value_uaddr, size)
 }
-probe nd_syscall.getxattr.return = kprobe.function("SyS_getxattr").return ?,
-                                   kprobe.function("sys_getxattr").return ?
+probe nd_syscall.getxattr.return = kprobe.function("sys_getxattr").return ?
 {
 	name = "getxattr"
 	retstr = returnstr(1)
@@ -2393,8 +2240,7 @@ probe nd_syscall.getxattr.return = kprobe.function("SyS_getxattr").return ?,
 #		unsigned long len,
 #		const char __user *uargs)
 #
-probe nd_syscall.init_module = kprobe.function("SyS_init_module") ?,
-                               kprobe.function("sys_init_module") ?
+probe nd_syscall.init_module = kprobe.function("sys_init_module") ?
 {
 	name = "init_module"
 	// umod_uaddr = $umod
@@ -2407,8 +2253,7 @@ probe nd_syscall.init_module = kprobe.function("SyS_init_module") ?,
 	uargs = user_string(pointer_arg(3))
 	argstr = sprintf("%p, %d, %s", umod_uaddr, len, user_string_quoted(pointer_arg(4)))
 }
-probe nd_syscall.init_module.return = kprobe.function("SyS_init_module").return ?,
-                                      kprobe.function("sys_init_module").return ?
+probe nd_syscall.init_module.return = kprobe.function("sys_init_module").return ?
 {
 	name = "init_module"
 	retstr = returnstr(1)
@@ -2418,8 +2263,7 @@ probe nd_syscall.init_module.return = kprobe.function("SyS_init_module").return
 #
 # long sys_inotify_add_watch(int fd, const char __user *path, u32 mask)
 #
-probe nd_syscall.inotify_add_watch = kprobe.function("SyS_inotify_add_watch") ?,
-                                     kprobe.function("sys_inotify_add_watch") ?
+probe nd_syscall.inotify_add_watch = kprobe.function("sys_inotify_add_watch") ?
 {
 	name = "inotify_add_watch"
 	// 	fd = $fd
@@ -2436,8 +2280,7 @@ probe nd_syscall.inotify_add_watch = kprobe.function("SyS_inotify_add_watch") ?,
 	mask = uint_arg(3)
 	argstr = sprintf("%d, %s, %d", fd, user_string_quoted(path_uaddr), mask)
 }
-probe nd_syscall.inotify_add_watch.return = kprobe.function("SyS_inotify_add_watch").return ?,
-                                            kprobe.function("sys_inotify_add_watch").return ?
+probe nd_syscall.inotify_add_watch.return = kprobe.function("sys_inotify_add_watch").return ?
 {
 	name = "inotify_add_watch"
 	retstr = returnstr(1)
@@ -2462,8 +2305,7 @@ probe nd_syscall.inotify_init.return = kprobe.function("sys_inotify_init").retur
 #
 # long sys_inotify_rm_watch(int fd, u32 wd)
 #
-probe nd_syscall.inotify_rm_watch = kprobe.function("SyS_inotify_rm_watch") ?,
-                                    kprobe.function("sys_inotify_rm_watch") ?
+probe nd_syscall.inotify_rm_watch = kprobe.function("sys_inotify_rm_watch") ?
 {
 	name = "inotify_rm_watch"
 	// fd = $fd
@@ -2474,8 +2316,7 @@ probe nd_syscall.inotify_rm_watch = kprobe.function("SyS_inotify_rm_watch") ?,
 	wd = uint_arg(2)
 	argstr = sprintf("%d, %d", fd, wd)
 }
-probe nd_syscall.inotify_rm_watch.return = kprobe.function("SyS_inotify_rm_watch").return ?,
-                                           kprobe.function("sys_inotify_rm_watch").return ?
+probe nd_syscall.inotify_rm_watch.return = kprobe.function("sys_inotify_rm_watch").return ?
 {
 	name = "inotify_rm_watch"
 	retstr = returnstr(1)
@@ -2485,8 +2326,7 @@ probe nd_syscall.inotify_rm_watch.return = kprobe.function("SyS_inotify_rm_watch
 # long sys_io_cancel(aio_context_t ctx_id,
 #		struct iocb __user *iocb,
 #		struct io_event __user *result)
-probe nd_syscall.io_cancel = kprobe.function("SyS_io_cancel") ?,
-                             kprobe.function("sys_io_cancel") ?
+probe nd_syscall.io_cancel = kprobe.function("sys_io_cancel") ?
 {
 	name = "io_cancel"
 	// ctx_id = $ctx_id
@@ -2498,8 +2338,7 @@ probe nd_syscall.io_cancel = kprobe.function("SyS_io_cancel") ?,
 	result_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %p, %p", ctx_id, iocb_uaddr, result_uaddr)
 }
-probe nd_syscall.io_cancel.return = kprobe.function("SyS_io_cancel").return ?,
-                                    kprobe.function("sys_io_cancel").return ?
+probe nd_syscall.io_cancel.return = kprobe.function("sys_io_cancel").return ?
 {
 	name = "io_cancel"
 	retstr = returnstr(1)
@@ -2510,7 +2349,6 @@ probe nd_syscall.io_cancel.return = kprobe.function("SyS_io_cancel").return ?,
 # long compat_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
 #
 probe nd_syscall.ioctl = kprobe.function("compat_sys_ioctl") ?,
-                         kprobe.function("SyS_ioctl") ?,
                          kprobe.function("sys_ioctl") ?
 {
 	name = "ioctl"
@@ -2525,7 +2363,6 @@ probe nd_syscall.ioctl = kprobe.function("compat_sys_ioctl") ?,
 	argstr = sprintf("%d, %d, %p", fd, request, argp)
 }
 probe nd_syscall.ioctl.return = kprobe.function("compat_sys_ioctl").return ?,
-                                kprobe.function("SyS_ioctl").return ?,
                                 kprobe.function("sys_ioctl").return ?
 {
 	name = "ioctl"
@@ -2534,8 +2371,7 @@ probe nd_syscall.ioctl.return = kprobe.function("compat_sys_ioctl").return ?,
 
 # io_destroy _________________________________________________
 # long sys_io_destroy(aio_context_t ctx)
-probe nd_syscall.io_destroy = kprobe.function("SyS_io_destroy") ?,
-                              kprobe.function("sys_io_destroy") ?
+probe nd_syscall.io_destroy = kprobe.function("sys_io_destroy") ?
 {
 	name = "io_destroy"
 	// ctx = $ctx
@@ -2543,8 +2379,7 @@ probe nd_syscall.io_destroy = kprobe.function("SyS_io_destroy") ?,
 	ctx = ulong_arg(1)
 	argstr = sprintf("%d", ctx)
 }
-probe nd_syscall.io_destroy.return = kprobe.function("SyS_io_destroy").return ?,
-                                     kprobe.function("sys_io_destroy").return ?
+probe nd_syscall.io_destroy.return = kprobe.function("sys_io_destroy").return ?
 {
 	name = "io_destroy"
 	retstr = returnstr(1)
@@ -2563,7 +2398,6 @@ probe nd_syscall.io_destroy.return = kprobe.function("SyS_io_destroy").return ?,
 #		 struct compat_timespec __user *timeout)
 #
 probe nd_syscall.io_getevents = kprobe.function("compat_sys_io_getevents") ?,
-                                kprobe.function("SyS_io_getevents") ?,
                                 kprobe.function("sys_io_getevents") ?
 {
 	name = "io_getevents"
@@ -2586,7 +2420,6 @@ probe nd_syscall.io_getevents = kprobe.function("compat_sys_io_getevents") ?,
 		nr, events_uaddr, timeout_uaddr, timestr)
 }
 probe nd_syscall.io_getevents.return = kprobe.function("compat_sys_io_getevents").return ?,
-                                       kprobe.function("SyS_io_getevents").return ?,
                                        kprobe.function("sys_io_getevents").return ?
 {
 	name = "io_getevents"
@@ -2618,8 +2451,7 @@ probe nd_syscall.ioperm.return = kprobe.function("sys_ioperm").return ?
 # io_setup ___________________________________________________
 # long sys_io_setup(unsigned nr_events, aio_context_t __user *ctxp)
 #
-probe nd_syscall.io_setup = kprobe.function("SyS_io_setup") ?,
-                            kprobe.function("sys_io_setup") ?
+probe nd_syscall.io_setup = kprobe.function("sys_io_setup") ?
 {
 	name = "io_setup"
 	// maxevents = $nr_events
@@ -2631,8 +2463,7 @@ probe nd_syscall.io_setup = kprobe.function("SyS_io_setup") ?,
 	argstr = sprintf("%d, %p", maxevents, ctxp_uaddr)
 }
 
-probe nd_syscall.io_setup.return = kprobe.function("SyS_io_setup").return ?,
-                                   kprobe.function("sys_io_setup").return ?
+probe nd_syscall.io_setup.return = kprobe.function("sys_io_setup").return ?
 {
 	name = "io_setup"
 	retstr = returnstr(1)
@@ -2660,8 +2491,7 @@ probe nd_syscall.compat_io_setup.return = kprobe.function("compat_sys_io_setup")
 # io_submit __________________________________________________
 # long sys_io_submit(aio_context_t ctx_id, long nr, struct iocb __user * __user *iocbpp)
 #
-probe nd_syscall.io_submit = kprobe.function("SyS_io_submit") ?,
-                             kprobe.function("sys_io_submit") ?
+probe nd_syscall.io_submit = kprobe.function("sys_io_submit") ?
 {
 	name = "io_submit"
 	// ctx_id = $ctx_id
@@ -2674,8 +2504,7 @@ probe nd_syscall.io_submit = kprobe.function("SyS_io_submit") ?,
 	iocbpp_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %d, %p", ctx_id, nr, iocbpp_uaddr)
 }
-probe nd_syscall.io_submit.return = kprobe.function("SyS_io_submit").return ?,
-                                    kprobe.function("sys_io_submit").return ?
+probe nd_syscall.io_submit.return = kprobe.function("sys_io_submit").return ?
 {
 	name = "io_submit"
 	retstr = returnstr(1)
@@ -2704,8 +2533,7 @@ probe nd_syscall.compat_io_submit.return = kprobe.function("compat_sys_io_submit
 # ioprio_get _________________________________________________
 # long sys_ioprio_get(int which, int who)
 #
-probe nd_syscall.ioprio_get = kprobe.function("SyS_ioprio_get") ?,
-                              kprobe.function("sys_ioprio_get") ?
+probe nd_syscall.ioprio_get = kprobe.function("sys_ioprio_get") ?
 {
 	name = "ioprio_get"
 	// which = $which
@@ -2716,8 +2544,7 @@ probe nd_syscall.ioprio_get = kprobe.function("SyS_ioprio_get") ?,
 	who = int_arg(2)
 	argstr = sprintf("%d, %d", which, who)
 }
-probe nd_syscall.ioprio_get.return = kprobe.function("SyS_ioprio_get").return ?,
-                                     kprobe.function("sys_ioprio_get").return ?
+probe nd_syscall.ioprio_get.return = kprobe.function("sys_ioprio_get").return ?
 {
 	name = "ioprio_get"
 	retstr = returnstr(1)
@@ -2726,8 +2553,7 @@ probe nd_syscall.ioprio_get.return = kprobe.function("SyS_ioprio_get").return ?,
 # ioprio_set _________________________________________________
 # long sys_ioprio_set(int which, int who, int ioprio)
 #
-probe nd_syscall.ioprio_set = kprobe.function("SyS_ioprio_set") ?,
-                              kprobe.function("sys_ioprio_set") ?
+probe nd_syscall.ioprio_set = kprobe.function("sys_ioprio_set") ?
 {
 	name = "ioprio_set"
 	// which = $which
@@ -2740,8 +2566,7 @@ probe nd_syscall.ioprio_set = kprobe.function("SyS_ioprio_set") ?,
 	ioprio = int_arg(3)
 	argstr = sprintf("%d, %d, %d", which, who, ioprio)
 }
-probe nd_syscall.ioprio_set.return = kprobe.function("SyS_ioprio_set").return ?,
-                                     kprobe.function("sys_ioprio_set").return ?
+probe nd_syscall.ioprio_set.return = kprobe.function("sys_ioprio_set").return ?
 {
 	name = "ioprio_set"
 	retstr = returnstr(1)
@@ -2758,7 +2583,6 @@ probe nd_syscall.ioprio_set.return = kprobe.function("SyS_ioprio_set").return ?,
 #		unsigned long flags)
 #
 probe nd_syscall.kexec_load = kprobe.function("compat_sys_kexec_load") ?,
-                              kprobe.function("SyS_kexec_load") ?,
                               kprobe.function("sys_kexec_load") ?
 {
 	name = "kexec_load"
@@ -2775,7 +2599,6 @@ probe nd_syscall.kexec_load = kprobe.function("compat_sys_kexec_load") ?,
 	argstr = sprintf("%p, %d, %p, %d", entry, nr_segments, segments_uaddr, flags)
 }
 probe nd_syscall.kexec_load.return = kprobe.function("compat_sys_kexec_load").return ?,
-                                     kprobe.function("SyS_kexec_load").return ?,
                                      kprobe.function("sys_kexec_load").return ?
 {
 	name = "kexec_load"
@@ -2791,7 +2614,6 @@ probe nd_syscall.kexec_load.return = kprobe.function("compat_sys_kexec_load").re
 # long compat_sys_keyctl(u32 option, u32 arg2, u32 arg3, u32 arg4, u32 arg5)
 #
 probe nd_syscall.keyctl = kprobe.function("compat_sys_keyctl") ?,
-                          kprobe.function("SyS_keyctl") ?,
                           kprobe.function("sys_keyctl") ?
 {
 	name = "keyctl"
@@ -2801,7 +2623,6 @@ probe nd_syscall.keyctl = kprobe.function("compat_sys_keyctl") ?,
 
 }
 probe nd_syscall.keyctl.return = kprobe.function("compat_sys_keyctl").return ?,
-                                 kprobe.function("SyS_keyctl").return ?,
                                  kprobe.function("sys_keyctl").return ?
 {
 	name = "keyctl"
@@ -2810,8 +2631,7 @@ probe nd_syscall.keyctl.return = kprobe.function("compat_sys_keyctl").return ?,
 
 # kill _______________________________________________________
 # long sys_kill(int pid, int sig)
-probe nd_syscall.kill = kprobe.function("SyS_kill") ?,
-                        kprobe.function("sys_kill") ?
+probe nd_syscall.kill = kprobe.function("sys_kill") ?
 {
 	name = "kill"
 	// pid = $pid
@@ -2822,8 +2642,7 @@ probe nd_syscall.kill = kprobe.function("SyS_kill") ?,
 	sig = int_arg(2)
 	argstr = sprintf("%d, %s", pid, _signal_name(sig))
 }
-probe nd_syscall.kill.return = kprobe.function("SyS_kill").return ?,
-                               kprobe.function("sys_kill").return ?
+probe nd_syscall.kill.return = kprobe.function("sys_kill").return ?
 {
 	name = "kill"
 	retstr = returnstr(1)
@@ -2832,8 +2651,7 @@ probe nd_syscall.kill.return = kprobe.function("SyS_kill").return ?,
 # lchown _____________________________________________________
 # long sys_lchown(const char __user * filename, uid_t user, gid_t group)
 #
-probe nd_syscall.lchown = kprobe.function("SyS_lchown") ?,
-                          kprobe.function("sys_lchown") ?
+probe nd_syscall.lchown = kprobe.function("sys_lchown") ?
 {
 	name = "lchown"
 	// path = user_string($filename)
@@ -2846,8 +2664,7 @@ probe nd_syscall.lchown = kprobe.function("SyS_lchown") ?,
 	group = __int32(uint_arg(3))
 	argstr = sprintf("%s, %d, %d", user_string_quoted(pointer_arg(1)), owner, group)
 }
-probe nd_syscall.lchown.return = kprobe.function("SyS_lchown").return ?,
-                                 kprobe.function("sys_lchown").return ?
+probe nd_syscall.lchown.return = kprobe.function("sys_lchown").return ?
 {
 	name = "lchown"
 	retstr = returnstr(1)
@@ -2881,8 +2698,7 @@ probe nd_syscall.lchown16.return = kprobe.function("sys_lchown16").return ?
 #               void __user *value,
 #               size_t size)
 #
-probe nd_syscall.lgetxattr = kprobe.function("SyS_lgetxattr") ?,
-                             kprobe.function("sys_lgetxattr") ?
+probe nd_syscall.lgetxattr = kprobe.function("sys_lgetxattr") ?
 {
 	name = "lgetxattr"
 	//	path = user_string(@defined($pathname) ? $pathname : $path)
@@ -2905,8 +2721,7 @@ probe nd_syscall.lgetxattr = kprobe.function("SyS_lgetxattr") ?,
 		user_string_quoted(pointer_arg(2)),
 		value_uaddr, size)
 }
-probe nd_syscall.lgetxattr.return = kprobe.function("SyS_lgetxattr").return ?,
-                                    kprobe.function("sys_lgetxattr").return ?
+probe nd_syscall.lgetxattr.return = kprobe.function("sys_lgetxattr").return ?
 {
 	name = "lgetxattr"
 	retstr = returnstr(1)
@@ -2914,8 +2729,7 @@ probe nd_syscall.lgetxattr.return = kprobe.function("SyS_lgetxattr").return ?,
 # link _______________________________________________________
 # long sys_link(const char __user * oldname,
 #          const char __user * newname)
-probe nd_syscall.link = kprobe.function("SyS_link") ?,
-                        kprobe.function("sys_link") ?
+probe nd_syscall.link = kprobe.function("sys_link") ?
 {
 	name = "link"
 	// oldpath = user_string($oldname)
@@ -2930,8 +2744,7 @@ probe nd_syscall.link = kprobe.function("SyS_link") ?,
 		user_string_quoted(pointer_arg(1)),
 		user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.link.return = kprobe.function("SyS_link").return ?,
-                               kprobe.function("sys_link").return ?
+probe nd_syscall.link.return = kprobe.function("sys_link").return ?
 {
 	name = "link"
 	retstr = returnstr(1)
@@ -2941,8 +2754,7 @@ probe nd_syscall.link.return = kprobe.function("SyS_link").return ?,
 # new function with 2.6.16
 # long sys_linkat(int olddfd, const char __user *oldname,
 #	int newdfd, const char __user *newname, int flags)
-probe nd_syscall.linkat = kprobe.function("SyS_linkat") ?,
-                          kprobe.function("sys_linkat") ?
+probe nd_syscall.linkat = kprobe.function("sys_linkat") ?
 {
 	name = "linkat"
 	// olddirfd = $olddfd
@@ -2971,8 +2783,7 @@ probe nd_syscall.linkat = kprobe.function("SyS_linkat") ?,
 		newdirfd_str, user_string_quoted(pointer_arg(4)),
 		flags_str)
 }
-probe nd_syscall.linkat.return = kprobe.function("SyS_linkat").return ?,
-                                 kprobe.function("sys_linkat").return ?
+probe nd_syscall.linkat.return = kprobe.function("sys_linkat").return ?
 {
 	name = "linkat"
 	retstr = returnstr(1)
@@ -2980,8 +2791,7 @@ probe nd_syscall.linkat.return = kprobe.function("SyS_linkat").return ?,
 
 # listen _____________________________________________________
 # long sys_listen(int fd, int backlog)
-probe nd_syscall.listen = kprobe.function("SyS_listen") ?,
-                          kprobe.function("sys_listen") ?
+probe nd_syscall.listen = kprobe.function("sys_listen") ?
 {
 	name = "listen"
 	// sockfd = $fd
@@ -2992,8 +2802,7 @@ probe nd_syscall.listen = kprobe.function("SyS_listen") ?,
 	backlog = int_arg(2)
 	argstr = sprintf("%d, %d", sockfd, backlog)
 }
-probe nd_syscall.listen.return = kprobe.function("SyS_listen").return ?,
-                                 kprobe.function("sys_listen").return ?
+probe nd_syscall.listen.return = kprobe.function("sys_listen").return ?
 {
 	name = "listen"
 	retstr = returnstr(1)
@@ -3002,8 +2811,7 @@ probe nd_syscall.listen.return = kprobe.function("SyS_listen").return ?,
 # listxattr __________________________________________________
 # ssize_t sys_listxattr(char __user *path, char __user *list, size_t size)
 #
-probe nd_syscall.listxattr = kprobe.function("SyS_listxattr") ?,
-                             kprobe.function("sys_listxattr") ?
+probe nd_syscall.listxattr = kprobe.function("sys_listxattr") ?
 {
 	name = "listxattr"
 	// 	list_uaddr = $list
@@ -3020,8 +2828,7 @@ probe nd_syscall.listxattr = kprobe.function("SyS_listxattr") ?,
 	size = ulong_arg(3)
 	argstr = sprintf("%s, %p, %d", user_string_quoted(path_uaddr), list_uaddr, size)
 }
-probe nd_syscall.listxattr.return = kprobe.function("SyS_listxattr").return ?,
-                                    kprobe.function("sys_listxattr").return ?
+probe nd_syscall.listxattr.return = kprobe.function("sys_listxattr").return ?
 {
 	name = "listxattr"
 	retstr = returnstr(1)
@@ -3030,8 +2837,7 @@ probe nd_syscall.listxattr.return = kprobe.function("SyS_listxattr").return ?,
 # llistxattr _________________________________________________
 # ssize_t sys_llistxattr(char __user *path, char __user *list, size_t size)
 #
-probe nd_syscall.llistxattr = kprobe.function("SyS_llistxattr") ?,
-                              kprobe.function("sys_llistxattr") ?
+probe nd_syscall.llistxattr = kprobe.function("sys_llistxattr") ?
 {
 	name = "llistxattr"
 	// 	list_uaddr = $list
@@ -3048,8 +2854,7 @@ probe nd_syscall.llistxattr = kprobe.function("SyS_llistxattr") ?,
 	size = ulong_arg(3)
 	argstr = sprintf("%s, %p, %d", user_string_quoted(path_uaddr), list_uaddr, size)
 }
-probe nd_syscall.llistxattr.return = kprobe.function("SyS_llistxattr").return ?,
-                                     kprobe.function("sys_llistxattr").return ?
+probe nd_syscall.llistxattr.return = kprobe.function("sys_llistxattr").return ?
 {
 	name = "llistxattr"
 	retstr = returnstr(1)
@@ -3061,8 +2866,7 @@ probe nd_syscall.llistxattr.return = kprobe.function("SyS_llistxattr").return ?,
 #            unsigned long offset_low,
 #            loff_t __user * result,
 #            unsigned int origin)
-probe nd_syscall.llseek = kprobe.function("SyS_llseek") ?,
-                          kprobe.function("sys_llseek") ?
+probe nd_syscall.llseek = kprobe.function("sys_llseek") ?
 {
 	name = "llseek"
 	// fd = $fd
@@ -3083,8 +2887,7 @@ probe nd_syscall.llseek = kprobe.function("SyS_llseek") ?,
 	argstr = sprintf("%d, 0x%x, 0x%x, %p, %s", fd, offset_high,
 		offset_low, result_uaddr, whence_str)
 }
-probe nd_syscall.llseek.return = kprobe.function("SyS_llseek").return ?,
-                                 kprobe.function("sys_llseek").return ?
+probe nd_syscall.llseek.return = kprobe.function("sys_llseek").return ?
 {
 	name = "llseek"
 	retstr = returnstr(1)
@@ -3093,8 +2896,7 @@ probe nd_syscall.llseek.return = kprobe.function("SyS_llseek").return ?,
 # lookup_dcookie _____________________________________________
 # long sys_lookup_dcookie(u64 cookie64, char __user * buf, size_t len)
 #
-probe nd_syscall.lookup_dcookie = kprobe.function("SyS_lookup_dcookie") ?,
-                                  kprobe.function("sys_lookup_dcookie") ?
+probe nd_syscall.lookup_dcookie = kprobe.function("sys_lookup_dcookie") ?
 {
 	name = "lookup_dcookie"
 	// cookie = $cookie64
@@ -3107,8 +2909,7 @@ probe nd_syscall.lookup_dcookie = kprobe.function("SyS_lookup_dcookie") ?,
 	len = ulong_arg(3)
 	argstr = sprintf("%d, %p, %d", cookie, buffer_uaddr, len)
 }
-probe nd_syscall.lookup_dcookie.return = kprobe.function("SyS_lookup_dcookie").return ?,
-                                         kprobe.function("sys_lookup_dcookie").return ?
+probe nd_syscall.lookup_dcookie.return = kprobe.function("sys_lookup_dcookie").return ?
 {
 	name = "lookup_dcookie"
 	retstr = returnstr(1)
@@ -3117,8 +2918,7 @@ probe nd_syscall.lookup_dcookie.return = kprobe.function("SyS_lookup_dcookie").r
 # lremovexattr _______________________________________________
 # long sys_lremovexattr(char __user *path, char __user *name)
 #
-probe nd_syscall.lremovexattr = kprobe.function("SyS_lremovexattr") ?,
-                                kprobe.function("sys_lremovexattr") ?
+probe nd_syscall.lremovexattr = kprobe.function("sys_lremovexattr") ?
 {
 	name = "lremovexattr"
 	// 	name_uaddr = $name
@@ -3135,8 +2935,7 @@ probe nd_syscall.lremovexattr = kprobe.function("SyS_lremovexattr") ?,
 	name2 = user_string(name_uaddr)
 	argstr = sprintf("%s, %s", user_string_quoted(path_uaddr), user_string_quoted(name_uaddr))
 }
-probe nd_syscall.lremovexattr.return = kprobe.function("SyS_lremovexattr").return ?,
-                                       kprobe.function("sys_lremovexattr").return ?
+probe nd_syscall.lremovexattr.return = kprobe.function("sys_lremovexattr").return ?
 {
 	name = "lremovexattr"
 	retstr = returnstr(1)
@@ -3144,8 +2943,7 @@ probe nd_syscall.lremovexattr.return = kprobe.function("SyS_lremovexattr").retur
 
 # lseek ______________________________________________________
 # off_t sys_lseek(unsigned int fd, off_t offset, unsigned int origin)
-probe nd_syscall.lseek = kprobe.function("SyS_lseek") ?,
-                         kprobe.function("sys_lseek") ?
+probe nd_syscall.lseek = kprobe.function("sys_lseek") ?
 {
 	name = "lseek"
 	// fildes = $fd
@@ -3161,8 +2959,7 @@ probe nd_syscall.lseek = kprobe.function("SyS_lseek") ?,
 	whence_str = _seek_whence_str(whence)
 	argstr = sprintf("%d, %d, %s", fildes, offset, whence_str)
 }
-probe nd_syscall.lseek.return = kprobe.function("SyS_lseek").return ?,
-                                kprobe.function("sys_lseek").return ?
+probe nd_syscall.lseek.return = kprobe.function("sys_lseek").return ?
 {
 	name = "lseek"
 	retstr = returnstr(1)
@@ -3175,8 +2972,7 @@ probe nd_syscall.lseek.return = kprobe.function("SyS_lseek").return ?,
 #               size_t size,
 #               int flags)
 #
-probe nd_syscall.lsetxattr = kprobe.function("SyS_lsetxattr") ?,
-                             kprobe.function("sys_lsetxattr") ?
+probe nd_syscall.lsetxattr = kprobe.function("sys_lsetxattr") ?
 {
 	name = "lsetxattr"
 	//	path_uaddr = (@defined($pathname) ? $pathname : $path)
@@ -3203,8 +2999,7 @@ probe nd_syscall.lsetxattr = kprobe.function("SyS_lsetxattr") ?,
 		user_string_quoted(name_uaddr),
 		value_uaddr, size, flags)
 }
-probe nd_syscall.lsetxattr.return = kprobe.function("SyS_lsetxattr").return ?,
-                                    kprobe.function("sys_lsetxattr").return ?
+probe nd_syscall.lsetxattr.return = kprobe.function("sys_lsetxattr").return ?
 {
 	name = "lsetxattr"
 	retstr = returnstr(1)
@@ -3220,11 +3015,9 @@ probe nd_syscall.lsetxattr.return = kprobe.function("SyS_lsetxattr").return ?,
 #			struct oldabi_stat64 __user * statbuf)
 #
 probe nd_syscall.lstat = kprobe.function("sys_lstat") ?,
-                         kprobe.function("SyS_newlstat") ?,
                          kprobe.function("sys_newlstat") ?,
                          kprobe.function("compat_sys_newlstat") ?,
                          kprobe.function("sys32_lstat64") ?,
-                         kprobe.function("SyS_lstat64") ?,
                          kprobe.function("sys_lstat64") ?,
                          kprobe.function("sys_oabi_lstat64") ?
 {
@@ -3238,11 +3031,9 @@ probe nd_syscall.lstat = kprobe.function("sys_lstat") ?,
 	argstr = sprintf("%s, %p", user_string_quoted(pointer_arg(1)), buf_uaddr)
 }
 probe nd_syscall.lstat.return = kprobe.function("sys_lstat").return ?,
-                                kprobe.function("SyS_newlstat").return ?,
                                 kprobe.function("sys_newlstat").return ?,
                                 kprobe.function("compat_sys_newlstat").return ?,
                                 kprobe.function("sys32_lstat64").return ?,
-                                kprobe.function("SyS_lstat64").return ?,
                                 kprobe.function("sys_lstat64").return ?,
                                 kprobe.function("sys_oabi_lstat64").return ?
 {
@@ -3253,8 +3044,7 @@ probe nd_syscall.lstat.return = kprobe.function("sys_lstat").return ?,
 # madvise ____________________________________________________
 # long sys_madvise(unsigned long start, size_t len_in, int behavior)
 #
-probe nd_syscall.madvise = kprobe.function("SyS_madvise") ?,
-                           kprobe.function("sys_madvise") ?
+probe nd_syscall.madvise = kprobe.function("sys_madvise") ?
 {
 	name = "madvise"
 	// start = $start
@@ -3269,8 +3059,7 @@ probe nd_syscall.madvise = kprobe.function("SyS_madvise") ?,
 	advice_str = _madvice_advice_str(advice)
 	argstr = sprintf("%p, %d, %s", start, length, _madvice_advice_str(advice))
 }
-probe nd_syscall.madvise.return = kprobe.function("SyS_madvise").return ?,
-                                  kprobe.function("sys_madvise").return ?
+probe nd_syscall.madvise.return = kprobe.function("sys_madvise").return ?
 {
 	name = "madvise"
 	retstr = returnstr(1)
@@ -3292,7 +3081,6 @@ probe nd_syscall.madvise.return = kprobe.function("SyS_madvise").return ?,
 #	compat_ulong_t flags)
 #
 probe nd_syscall.mbind = kprobe.function("compat_sys_mbind") ?,
-                         kprobe.function("SyS_mbind") ?,
                          kprobe.function("sys_mbind") ?
 {
 	name = "mbind"
@@ -3315,7 +3103,6 @@ probe nd_syscall.mbind = kprobe.function("compat_sys_mbind") ?,
 		nmask_uaddr, maxnode, flags)
 }
 probe nd_syscall.mbind.return = kprobe.function("compat_sys_mbind").return ?,
-                                kprobe.function("SyS_mbind").return ?,
                                 kprobe.function("sys_mbind").return ?
 {
 	name = "mbind"
@@ -3326,16 +3113,14 @@ probe nd_syscall.mbind.return = kprobe.function("compat_sys_mbind").return ?,
 # long sys_migrate_pages(pid_t pid, unsigned long maxnode,
 #		const unsigned long __user *old_nodes,
 #		const unsigned long __user *new_nodes)
-probe nd_syscall.migrate_pages = kprobe.function("SyS_migrate_pages") ?,
-                                 kprobe.function("sys_migrate_pages") ?
+probe nd_syscall.migrate_pages = kprobe.function("sys_migrate_pages") ?
 {
 	name = "migrate_pages"
 	// argstr = sprintf("%d, %d, %p, %p", $pid, $maxnode, $old_nodes, $new_nodes)
 	asmlinkage()
 	argstr = sprintf("%d, %d, %p, %p", int_arg(1), ulong_arg(2), pointer_arg(3), pointer_arg(4))
 }
-probe nd_syscall.migrate_pages.return = kprobe.function("SyS_migrate_pages").return ?,
-                                        kprobe.function("sys_migrate_pages").return ?
+probe nd_syscall.migrate_pages.return = kprobe.function("sys_migrate_pages").return ?
 {
 	name = "migrate_pages"
 	retstr = returnstr(1)
@@ -3344,8 +3129,7 @@ probe nd_syscall.migrate_pages.return = kprobe.function("SyS_migrate_pages").ret
 # mincore ____________________________________________________
 # long sys_mincore(unsigned long start, size_t len, unsigned char __user * vec)
 #
-probe nd_syscall.mincore = kprobe.function("SyS_mincore") ?,
-                           kprobe.function("sys_mincore") ?
+probe nd_syscall.mincore = kprobe.function("sys_mincore") ?
 {
 	name = "mincore"
 	// start = $start
@@ -3358,8 +3142,7 @@ probe nd_syscall.mincore = kprobe.function("SyS_mincore") ?,
 	vec_uaddr = pointer_arg(3)
 	argstr = sprintf("%p, %d, %p", start, length, vec_uaddr)
 }
-probe nd_syscall.mincore.return = kprobe.function("SyS_mincore").return ?,
-                                  kprobe.function("sys_mincore").return ?
+probe nd_syscall.mincore.return = kprobe.function("sys_mincore").return ?
 {
 	name = "mincore"
 	retstr = returnstr(1)
@@ -3367,8 +3150,7 @@ probe nd_syscall.mincore.return = kprobe.function("SyS_mincore").return ?,
 
 # mkdir ______________________________________________________
 # long sys_mkdir(const char __user * pathname, int mode)
-probe nd_syscall.mkdir = kprobe.function("SyS_mkdir") ?,
-                         kprobe.function("sys_mkdir") ?
+probe nd_syscall.mkdir = kprobe.function("sys_mkdir") ?
 {
 	name = "mkdir"
 	// pathname_uaddr = $pathname
@@ -3381,8 +3163,7 @@ probe nd_syscall.mkdir = kprobe.function("SyS_mkdir") ?,
 	mode = int_arg(2)
 	argstr = sprintf("%s, %#o", user_string_quoted(pathname_uaddr), mode)
 }
-probe nd_syscall.mkdir.return = kprobe.function("SyS_mkdir").return ?,
-                                kprobe.function("sys_mkdir").return ?
+probe nd_syscall.mkdir.return = kprobe.function("sys_mkdir").return ?
 {
 	name = "mkdir"
 	retstr = returnstr(1)
@@ -3391,8 +3172,7 @@ probe nd_syscall.mkdir.return = kprobe.function("SyS_mkdir").return ?,
 # mkdirat ____________________________________________________
 # new function with 2.6.16
 # long sys_mkdirat(int dfd, const char __user *pathname, int mode)
-probe nd_syscall.mkdirat = kprobe.function("SyS_mkdirat") ?,
-                           kprobe.function("sys_mkdirat") ?
+probe nd_syscall.mkdirat = kprobe.function("sys_mkdirat") ?
 {
 	name = "mkdirat"
 	// dirfd = $dfd
@@ -3405,8 +3185,7 @@ probe nd_syscall.mkdirat = kprobe.function("SyS_mkdirat") ?,
 	mode = int_arg(3)
 	argstr = sprintf("%d, %s, %#o", dirfd, user_string_quoted(pointer_arg(2)), mode)
 }
-probe nd_syscall.mkdirat.return = kprobe.function("SyS_mkdirat").return ?,
-                                  kprobe.function("sys_mkdirat").return ?
+probe nd_syscall.mkdirat.return = kprobe.function("sys_mkdirat").return ?
 {
 	name = "mkdirat"
 	retstr = returnstr(1)
@@ -3414,8 +3193,7 @@ probe nd_syscall.mkdirat.return = kprobe.function("SyS_mkdirat").return ?,
 
 # mknod
 # long sys_mknod(const char __user * filename, int mode, unsigned dev)
-probe nd_syscall.mknod = kprobe.function("SyS_mknod") ?,
-                         kprobe.function("sys_mknod") ?
+probe nd_syscall.mknod = kprobe.function("sys_mknod") ?
 {
 	name = "mknod"
 	// pathname = user_string($filename)
@@ -3429,8 +3207,7 @@ probe nd_syscall.mknod = kprobe.function("SyS_mknod") ?,
 	argstr = sprintf("%s, %s, %p", user_string_quoted(pointer_arg(1)), _mknod_mode_str(mode), dev)
 }
 
-probe nd_syscall.mknod.return = kprobe.function("SyS_mknod").return ?,
-                                kprobe.function("sys_mknod").return ?
+probe nd_syscall.mknod.return = kprobe.function("sys_mknod").return ?
 {
 	name = "mknod"
 	retstr = returnstr(1)
@@ -3440,8 +3217,7 @@ probe nd_syscall.mknod.return = kprobe.function("SyS_mknod").return ?,
 # new function with 2.6.16
 # long sys_mknodat(int dfd, const char __user *filename,
 #	int mode, unsigned dev)
-probe nd_syscall.mknodat = kprobe.function("SyS_mknodat") ?,
-                           kprobe.function("sys_mknodat") ?
+probe nd_syscall.mknodat = kprobe.function("sys_mknodat") ?
 {
 	name = "mknodat"
 	// dirfd = $dfd
@@ -3462,8 +3238,7 @@ probe nd_syscall.mknodat = kprobe.function("SyS_mknodat") ?,
 	argstr = sprintf("%s, %s, %s, %p",
 		dirfd_str, user_string_quoted(pointer_arg(2)), mode_str, dev)
 }
-probe nd_syscall.mknodat.return = kprobe.function("SyS_mknodat").return ?,
-                                  kprobe.function("sys_mknodat").return ?
+probe nd_syscall.mknodat.return = kprobe.function("sys_mknodat").return ?
 {
 	name = "mknodat"
 	retstr = returnstr(1)
@@ -3473,8 +3248,7 @@ probe nd_syscall.mknodat.return = kprobe.function("SyS_mknodat").return ?,
 #
 # long sys_mlock(unsigned long start, size_t len)
 #
-probe nd_syscall.mlock = kprobe.function("SyS_mlock") ?,
-                         kprobe.function("sys_mlock") ?
+probe nd_syscall.mlock = kprobe.function("sys_mlock") ?
 {
 	name = "mlock"
 	// addr = $start
@@ -3485,8 +3259,7 @@ probe nd_syscall.mlock = kprobe.function("SyS_mlock") ?,
 	len = ulong_arg(2)
 	argstr = sprintf("%p, %d", addr, len)
 }
-probe nd_syscall.mlock.return = kprobe.function("SyS_mlock").return ?,
-                                kprobe.function("sys_mlock").return ?
+probe nd_syscall.mlock.return = kprobe.function("sys_mlock").return ?
 {
 	name = "mlock"
 	retstr = returnstr(1)
@@ -3495,8 +3268,7 @@ probe nd_syscall.mlock.return = kprobe.function("SyS_mlock").return ?,
 #
 # long sys_mlockall(int flags)
 #
-probe nd_syscall.mlockall = kprobe.function("SyS_mlockall") ?,
-                            kprobe.function("sys_mlockall") ?
+probe nd_syscall.mlockall = kprobe.function("sys_mlockall") ?
 {
 	name = "mlockall"
 	// flags = $flags
@@ -3505,8 +3277,7 @@ probe nd_syscall.mlockall = kprobe.function("SyS_mlockall") ?,
 	flags = int_arg(1)
 	argstr = _mlockall_flags_str(flags)
 }
-probe nd_syscall.mlockall.return = kprobe.function("SyS_mlockall").return ?,
-                                   kprobe.function("sys_mlockall").return ?
+probe nd_syscall.mlockall.return = kprobe.function("sys_mlockall").return ?
 {
 	name = "mlockall"
 	retstr = returnstr(1)
@@ -3548,7 +3319,6 @@ probe nd_syscall.modify_ldt.return = kprobe.function("sys_modify_ldt").return ?
 #                int flags)
 #
 probe nd_syscall.move_pages = kprobe.function("compat_sys_move_pages") ?,
-                              kprobe.function("SyS_move_pages") ?,
                               kprobe.function("sys_move_pages") ?
 {
 	name = "move_pages"
@@ -3557,7 +3327,6 @@ probe nd_syscall.move_pages = kprobe.function("compat_sys_move_pages") ?,
 	argstr = sprintf("%d, %d, %p, %p, 0x%x", int_arg(1), ulong_arg(2), pointer_arg(4), pointer_arg(5), int_arg(6))
 }
 probe nd_syscall.move_pages.return = kprobe.function("compat_sys_move_pages").return ?,
-                                     kprobe.function("SyS_move_pages").return ?,
                                      kprobe.function("sys_move_pages").return ?
 {
 	name = "move_pages"
@@ -3576,7 +3345,6 @@ probe nd_syscall.move_pages.return = kprobe.function("compat_sys_move_pages").re
 #		unsigned long flags,
 #		void __user * data)
 probe nd_syscall.mount = kprobe.function("compat_sys_mount") ?,
-                         kprobe.function("SyS_mount") ?,
                          kprobe.function("sys_mount") ?
 {
 	name = "mount"
@@ -3605,7 +3373,6 @@ probe nd_syscall.mount = kprobe.function("compat_sys_mount") ?,
 		mountflags_str, data)
 }
 probe nd_syscall.mount.return = kprobe.function("compat_sys_mount").return ?,
-                                kprobe.function("SyS_mount").return ?,
                                 kprobe.function("sys_mount").return ?
 {
 	name = "mount"
@@ -3615,8 +3382,7 @@ probe nd_syscall.mount.return = kprobe.function("compat_sys_mount").return ?,
 # mprotect ___________________________________________________
 # long sys_mprotect(unsigned long start, size_t len, unsigned long prot)
 #
-probe nd_syscall.mprotect = kprobe.function("SyS_mprotect") ?,
-                            kprobe.function("sys_mprotect") ?
+probe nd_syscall.mprotect = kprobe.function("sys_mprotect") ?
 {
 	name = "mprotect"
 	// addr = $start
@@ -3631,8 +3397,7 @@ probe nd_syscall.mprotect = kprobe.function("SyS_mprotect") ?,
 	prot_str = _mprotect_prot_str(prot)
 	argstr = sprintf("%p, %d, %s", addr, len, _mprotect_prot_str(prot))
 }
-probe nd_syscall.mprotect.return = kprobe.function("SyS_mprotect").return ?,
-                                   kprobe.function("sys_mprotect").return ?
+probe nd_syscall.mprotect.return = kprobe.function("sys_mprotect").return ?
 {
 	name = "mprotect"
 	retstr = returnstr(1)
@@ -3647,7 +3412,6 @@ probe nd_syscall.mprotect.return = kprobe.function("SyS_mprotect").return ?,
 #			struct compat_mq_attr __user *u_omqstat)
 #
 probe nd_syscall.mq_getsetattr = kprobe.function("compat_sys_mq_getsetattr") ?,
-                                 kprobe.function("SyS_mq_getsetattr") ?,
                                  kprobe.function("sys_mq_getsetattr") ?
 {
 	name = "mq_getsetattr"
@@ -3662,7 +3426,6 @@ probe nd_syscall.mq_getsetattr = kprobe.function("compat_sys_mq_getsetattr") ?,
 	argstr = sprintf("%d, %p, %p", mqdes, u_mqstat_uaddr, u_omqstat_uaddr)
 }
 probe nd_syscall.mq_getsetattr.return = kprobe.function("compat_sys_mq_getsetattr").return ?,
-                                        kprobe.function("SyS_mq_getsetattr").return ?,
                                         kprobe.function("sys_mq_getsetattr").return ?
 {
 	name = "mq_getsetattr"
@@ -3674,7 +3437,6 @@ probe nd_syscall.mq_getsetattr.return = kprobe.function("compat_sys_mq_getsetatt
 # long compat_sys_mq_notify(mqd_t mqdes, const struct compat_sigevent __user *u_notification)
 #
 probe nd_syscall.mq_notify = kprobe.function("compat_sys_mq_notify") ?,
-                             kprobe.function("SyS_mq_notify") ?,
                              kprobe.function("sys_mq_notify") ?
 {
 	name = "mq_notify"
@@ -3687,7 +3449,6 @@ probe nd_syscall.mq_notify = kprobe.function("compat_sys_mq_notify") ?,
 	argstr = sprintf("%d, %p", mqdes, notification_uaddr)
 }
 probe nd_syscall.mq_notify.return = kprobe.function("compat_sys_mq_notify").return ?,
-                                    kprobe.function("SyS_mq_notify").return ?,
                                     kprobe.function("sys_mq_notify").return ?
 {
 	name = "mq_notify"
@@ -3704,7 +3465,6 @@ probe nd_syscall.mq_notify.return = kprobe.function("compat_sys_mq_notify").retu
 #			struct compat_mq_attr __user *u_attr)
 #
 probe nd_syscall.mq_open = kprobe.function("compat_sys_mq_open") ?,
-                           kprobe.function("SyS_mq_open") ?,
                            kprobe.function("sys_mq_open") ?
 {
 	name = "mq_open"
@@ -3732,7 +3492,6 @@ probe nd_syscall.mq_open = kprobe.function("compat_sys_mq_open") ?,
 		argstr = sprintf("%s, %s", user_string_quoted(name_uaddr), _sys_open_flag_str(oflag))
 }
 probe nd_syscall.mq_open.return = kprobe.function("compat_sys_mq_open").return ?,
-                                  kprobe.function("SyS_mq_open").return ?,
                                   kprobe.function("sys_mq_open").return ?
 {
 	name = "mq_open"
@@ -3751,7 +3510,6 @@ probe nd_syscall.mq_open.return = kprobe.function("compat_sys_mq_open").return ?
 #			const struct compat_timespec __user *u_abs_timeout)
 #
 probe nd_syscall.mq_timedreceive = kprobe.function("compat_sys_mq_timedreceive") ?,
-                                   kprobe.function("SyS_mq_timedreceive") ?,
                                    kprobe.function("sys_mq_timedreceive") ?
 {
 	name = "mq_timedreceive"
@@ -3772,7 +3530,6 @@ probe nd_syscall.mq_timedreceive = kprobe.function("compat_sys_mq_timedreceive")
 		msg_prio_uaddr, abs_timeout_uaddr)
 }
 probe nd_syscall.mq_timedreceive.return = kprobe.function("compat_sys_mq_timedreceive").return ?,
-                                          kprobe.function("SyS_mq_timedreceive").return ?,
                                           kprobe.function("sys_mq_timedreceive").return ?
 {
 	name = "mq_timedreceive"
@@ -3791,7 +3548,6 @@ probe nd_syscall.mq_timedreceive.return = kprobe.function("compat_sys_mq_timedre
 #			const struct compat_timespec __user *u_abs_timeout)
 #
 probe nd_syscall.mq_timedsend = kprobe.function("compat_sys_mq_timedsend") ?,
-                                kprobe.function("SyS_mq_timedsend") ?,
                                 kprobe.function("sys_mq_timedsend") ?
 {
 	name = "mq_timedsend"
@@ -3812,7 +3568,6 @@ probe nd_syscall.mq_timedsend = kprobe.function("compat_sys_mq_timedsend") ?,
 		msg_prio, abs_timeout_uaddr)
 }
 probe nd_syscall.mq_timedsend.return = kprobe.function("compat_sys_mq_timedsend").return ?,
-                                       kprobe.function("SyS_mq_timedsend").return ?,
                                        kprobe.function("sys_mq_timedsend").return ?
 {
 	name = "mq_timedsend"
@@ -3822,8 +3577,7 @@ probe nd_syscall.mq_timedsend.return = kprobe.function("compat_sys_mq_timedsend"
 # mq_unlink __________________________________________________
 # long sys_mq_unlink(const char __user *u_name)
 #
-probe nd_syscall.mq_unlink = kprobe.function("SyS_mq_unlink") ?,
-                             kprobe.function("sys_mq_unlink") ?
+probe nd_syscall.mq_unlink = kprobe.function("sys_mq_unlink") ?
 {
 	name = "mq_unlink"
 	// u_name_uaddr = $u_name
@@ -3834,8 +3588,7 @@ probe nd_syscall.mq_unlink = kprobe.function("SyS_mq_unlink") ?,
 	u_name = user_string(u_name_uaddr)
 	argstr = user_string_quoted(u_name_uaddr)
 }
-probe nd_syscall.mq_unlink.return = kprobe.function("SyS_mq_unlink").return ?,
-                                    kprobe.function("sys_mq_unlink").return ?
+probe nd_syscall.mq_unlink.return = kprobe.function("sys_mq_unlink").return ?
 {
 	name = "mq_unlink"
 	retstr = returnstr(1)
@@ -3849,7 +3602,6 @@ probe nd_syscall.mq_unlink.return = kprobe.function("SyS_mq_unlink").return ?,
 #            unsigned long new_addr)
 #
 probe nd_syscall.mremap = kprobe.function("ia64_mremap") ?,
-                          kprobe.function("SyS_mremap") ?,
                           kprobe.function("sys_mremap") ?
 {
 	name = "mremap"
@@ -3870,7 +3622,6 @@ probe nd_syscall.mremap = kprobe.function("ia64_mremap") ?,
 		_mremap_flags(flags), new_address)
 }
 probe nd_syscall.mremap.return = kprobe.function("ia64_mremap").return ?,
-                                 kprobe.function("SyS_mremap").return ?,
                                  kprobe.function("sys_mremap").return ?
 {
 	name = "mremap"
@@ -3880,8 +3631,7 @@ probe nd_syscall.mremap.return = kprobe.function("ia64_mremap").return ?,
 # msgctl _____________________________________________________
 # long sys_msgctl (int msqid, int cmd, struct msqid_ds __user *buf)
 #
-probe nd_syscall.msgctl = kprobe.function("SyS_msgctl") ?,
-                          kprobe.function("sys_msgctl") ?
+probe nd_syscall.msgctl = kprobe.function("sys_msgctl") ?
 {
 	name = "msgctl"
 	// msqid = $msqid
@@ -3894,8 +3644,7 @@ probe nd_syscall.msgctl = kprobe.function("SyS_msgctl") ?,
 	buf_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %d, %p", msqid, cmd, buf_uaddr)
 }
-probe nd_syscall.msgctl.return = kprobe.function("SyS_msgctl").return ?,
-                                 kprobe.function("sys_msgctl").return ?
+probe nd_syscall.msgctl.return = kprobe.function("sys_msgctl").return ?
 {
 	name = "msgctl"
 	retstr = returnstr(1)
@@ -3920,8 +3669,7 @@ probe nd_syscall.compat_sys_msgctl.return = kprobe.function("compat_sys_msgctl")
 # msgget _____________________________________________________
 # long sys_msgget (key_t key, int msgflg)
 #
-probe nd_syscall.msgget = kprobe.function("SyS_msgget") ?,
-                          kprobe.function("sys_msgget") ?
+probe nd_syscall.msgget = kprobe.function("sys_msgget") ?
 {
 	name = "msgget"
 	// key = $key
@@ -3934,8 +3682,7 @@ probe nd_syscall.msgget = kprobe.function("SyS_msgget") ?,
 	msgflg_str = _sys_open_flag_str(msgflg)
 	argstr = sprintf("%d, %s", key, _sys_open_flag_str(msgflg))
 }
-probe nd_syscall.msgget.return = kprobe.function("SyS_msgget").return ?,
-                                 kprobe.function("sys_msgget").return ?
+probe nd_syscall.msgget.return = kprobe.function("sys_msgget").return ?
 {
 	name = "msgget"
 	retstr = returnstr(1)
@@ -3948,8 +3695,7 @@ probe nd_syscall.msgget.return = kprobe.function("SyS_msgget").return ?,
 #             long msgtyp,
 #             int msgflg)
 #
-probe nd_syscall.msgrcv = kprobe.function("SyS_msgrcv") ?,
-                          kprobe.function("sys_msgrcv") ?
+probe nd_syscall.msgrcv = kprobe.function("sys_msgrcv") ?
 {
 	name = "msgrcv"
 	// msqid = $msqid
@@ -3966,8 +3712,7 @@ probe nd_syscall.msgrcv = kprobe.function("SyS_msgrcv") ?,
 	msgflg = int_arg(5)
 	argstr = sprintf("%d, %p, %d, %d, %d", msqid, msgp_uaddr, msgsz, msgtyp, msgflg)
 }
-probe nd_syscall.msgrcv.return = kprobe.function("SyS_msgrcv").return ?,
-                                 kprobe.function("sys_msgrcv").return ?
+probe nd_syscall.msgrcv.return = kprobe.function("sys_msgrcv").return ?
 {
 	name = "msgrcv"
 	retstr = returnstr(1)
@@ -3996,8 +3741,7 @@ probe nd_syscall.compat_sys_msgrcv.return = kprobe.function("compat_sys_msgrcv")
 #             size_t msgsz,
 #             int msgflg)
 #
-probe nd_syscall.msgsnd = kprobe.function("SyS_msgsnd") ?,
-                          kprobe.function("sys_msgsnd") ?
+probe nd_syscall.msgsnd = kprobe.function("sys_msgsnd") ?
 {
 	name = "msgsnd"
 	// msqid = $msqid
@@ -4012,8 +3756,7 @@ probe nd_syscall.msgsnd = kprobe.function("SyS_msgsnd") ?,
 	msgflg = int_arg(4)
 	argstr = sprintf("%d, %p, %d, %d", msqid, msgp_uaddr, msgsz, msgflg)
 }
-probe nd_syscall.msgsnd.return = kprobe.function("SyS_msgsnd").return ?,
-                                 kprobe.function("sys_msgsnd").return ?
+probe nd_syscall.msgsnd.return = kprobe.function("sys_msgsnd").return ?
 {
 	name = "msgsnd"
 	retstr = returnstr(1)
@@ -4037,8 +3780,7 @@ probe nd_syscall.compat_sys_msgsnd.return = kprobe.function("compat_sys_msgsnd")
 
 # msync ______________________________________________________
 # long sys_msync(unsigned long start, size_t len, int flags)
-probe nd_syscall.msync = kprobe.function("SyS_msync") ?,
-                         kprobe.function("sys_msync") ?
+probe nd_syscall.msync = kprobe.function("sys_msync") ?
 {
 	name = "msync"
 	// start = $start
@@ -4050,8 +3792,7 @@ probe nd_syscall.msync = kprobe.function("SyS_msync") ?,
 	flags = int_arg(3)
 	argstr = sprintf("%p, %d, %s", start, length, _msync_flag_str(flags))
 }
-probe nd_syscall.msync.return = kprobe.function("SyS_msync").return ?,
-                                kprobe.function("sys_msync").return ?
+probe nd_syscall.msync.return = kprobe.function("sys_msync").return ?
 {
 	name = "msync"
 	retstr = returnstr(1)
@@ -4059,8 +3800,7 @@ probe nd_syscall.msync.return = kprobe.function("SyS_msync").return ?,
 
 # munlock ____________________________________________________
 # long sys_munlock(unsigned long start, size_t len)
-probe nd_syscall.munlock = kprobe.function("SyS_munlock") ?,
-                           kprobe.function("sys_munlock") ?
+probe nd_syscall.munlock = kprobe.function("sys_munlock") ?
 {
 	name = "munlock"
 	// addr = $start
@@ -4070,8 +3810,7 @@ probe nd_syscall.munlock = kprobe.function("SyS_munlock") ?,
 	len = ulong_arg(2)
 	argstr = sprintf("%p, %d", addr, len)
 }
-probe nd_syscall.munlock.return = kprobe.function("SyS_munlock").return ?,
-                                  kprobe.function("sys_munlock").return ?
+probe nd_syscall.munlock.return = kprobe.function("sys_munlock").return ?
 {
 	name = "munlock"
 	retstr = returnstr(1)
@@ -4092,8 +3831,7 @@ probe nd_syscall.munlockall.return = kprobe.function("sys_munlockall").return ?
 
 # munmap _____________________________________________________
 # long sys_munmap(unsigned long addr, size_t len)
-probe nd_syscall.munmap = kprobe.function("SyS_munmap") ?,
-                          kprobe.function("sys_munmap") ?
+probe nd_syscall.munmap = kprobe.function("sys_munmap") ?
 {
 	name = "munmap"
 	// start = $addr
@@ -4103,8 +3841,7 @@ probe nd_syscall.munmap = kprobe.function("SyS_munmap") ?,
 	length = ulong_arg(2)
 	argstr = sprintf("%p, %d", start, length)
 }
-probe nd_syscall.munmap.return = kprobe.function("SyS_munmap").return ?,
-                                 kprobe.function("sys_munmap").return ?
+probe nd_syscall.munmap.return = kprobe.function("sys_munmap").return ?
 {
 	name = "munmap"
 	retstr = returnstr(1)
diff --git a/tapset/nd_syscalls2.stp b/tapset/nd_syscalls2.stp
index 9ea421b..15f6a9a 100644
--- a/tapset/nd_syscalls2.stp
+++ b/tapset/nd_syscalls2.stp
@@ -28,8 +28,7 @@
 # long compat_sys_nanosleep(struct compat_timespec __user *rqtp,
 #		struct compat_timespec __user *rmtp)
 #
-probe nd_syscall.nanosleep = kprobe.function("SyS_nanosleep") ?,
-                             kprobe.function("sys_nanosleep") ?
+probe nd_syscall.nanosleep = kprobe.function("sys_nanosleep") ?
 {
 	name = "nanosleep"
 	// req_uaddr = $rqtp
@@ -40,8 +39,7 @@ probe nd_syscall.nanosleep = kprobe.function("SyS_nanosleep") ?,
 	rem_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %p", _struct_timespec_u(req_uaddr, 1), rem_uaddr)
 }
-probe nd_syscall.nanosleep.return = kprobe.function("SyS_nanosleep").return ?,
-                                    kprobe.function("sys_nanosleep").return ?
+probe nd_syscall.nanosleep.return = kprobe.function("sys_nanosleep").return ?
 {
 	name = "nanosleep"
 	retstr = returnstr(1)
@@ -93,8 +91,7 @@ probe nd_syscall.nfsservctl.return = kprobe.function("sys_nfsservctl").return ?,
 # nice _______________________________________________________
 # long sys_nice(int increment)
 #
-probe nd_syscall.nice = kprobe.function("SyS_nice") ?,
-                        kprobe.function("sys_nice") ?
+probe nd_syscall.nice = kprobe.function("sys_nice") ?
 {
 	name = "nice"
 	// inc = $increment
@@ -103,8 +100,7 @@ probe nd_syscall.nice = kprobe.function("SyS_nice") ?,
 	inc = int_arg(1)
 	argstr = sprintf("%d", inc)
 }
-probe nd_syscall.nice.return = kprobe.function("SyS_nice").return ?,
-                               kprobe.function("sys_nice").return ?
+probe nd_syscall.nice.return = kprobe.function("sys_nice").return ?
 {
 	name = "nice"
 	retstr = returnstr(1)
@@ -131,7 +127,6 @@ probe nd_syscall.ni_syscall.return = kprobe.function("sys_ni_syscall").return
 #
 probe nd_syscall.open = kprobe.function("compat_sys_open") ?,
                         kprobe.function("sys32_open") ?,
-                        kprobe.function("SyS_open") ?,
                         kprobe.function("sys_open") ?
 {
 	name = "open"
@@ -157,7 +152,6 @@ probe nd_syscall.open = kprobe.function("compat_sys_open") ?,
 }
 probe nd_syscall.open.return = kprobe.function("compat_sys_open").return ?,
                                kprobe.function("sys32_open").return ?,
-                               kprobe.function("SyS_open").return ?,
                                kprobe.function("sys_open").return ?
 {
 	name = "open"
@@ -169,7 +163,6 @@ probe nd_syscall.open.return = kprobe.function("compat_sys_open").return ?,
 # long compat_sys_openat(unsigned int dfd, const char __user *filename, int flags, int mode)
 #
 probe nd_syscall.openat = kprobe.function("compat_sys_openat") ?,
-                          kprobe.function("SyS_openat") ?,
                           kprobe.function("sys_openat") ?
 {
 	name = "openat"
@@ -198,7 +191,6 @@ probe nd_syscall.openat = kprobe.function("compat_sys_openat") ?,
 			_sys_open_flag_str(flags))
 }
 probe nd_syscall.openat.return = kprobe.function("compat_sys_openat").return ?,
-                                 kprobe.function("SyS_openat").return ?,
                                  kprobe.function("sys_openat").return ?
 {
 	name = "openat"
@@ -306,8 +298,7 @@ probe nd_syscall.pause.return = kprobe.function("sys_pause").return ?,
 # asmlinkage long
 # sys_personality(u_long personality)
 #
-probe nd_syscall.personality = kprobe.function("SyS_personality") ?,
-                               kprobe.function("sys_personality") ?
+probe nd_syscall.personality = kprobe.function("sys_personality") ?
 {
 	name = "personality"
 	// persona = $personality
@@ -315,8 +306,7 @@ probe nd_syscall.personality = kprobe.function("SyS_personality") ?,
 	persona = ulong_arg(1)
 	argstr = sprintf("%p", persona);
 }
-probe nd_syscall.personality.return = kprobe.function("SyS_personality").return ?,
-                                      kprobe.function("sys_personality").return ?
+probe nd_syscall.personality.return = kprobe.function("sys_personality").return ?
 {
 	name = "personality"
 	retstr = returnstr(1)
@@ -327,7 +317,7 @@ probe nd_syscall.personality.return = kprobe.function("SyS_personality").return
 # asmlinkage int
 # sys_pipe(unsigned long __user * fildes)
 #
-probe nd_syscall.pipe = kprobe.function("SyS_pipe") ?,
+probe nd_syscall.pipe =
 %( arch == "ia64" %?
                         kprobe.function("sys_ia64_pipe") ?,
 %)
@@ -347,9 +337,9 @@ probe nd_syscall.pipe = kprobe.function("SyS_pipe") ?,
 %)
 }
 
-probe nd_syscall.pipe.return = kprobe.function("SyS_pipe").return ?,
+probe nd_syscall.pipe.return =
 %( arch == "ia64" %?
-                               kprobe.function("sys_ia64_pipe").return ?,
+                               kprobe.function("sys_ia64_pipe").return ?
 %)
                                kprobe.function("sys_pipe").return ?
 {
@@ -361,8 +351,7 @@ probe nd_syscall.pipe.return = kprobe.function("SyS_pipe").return ?,
 #
 # long sys_pivot_root(const char __user *new_root, const char __user *put_old)
 #
-probe nd_syscall.pivot_root = kprobe.function("SyS_pivot_root") ?,
-                              kprobe.function("sys_pivot_root") ?
+probe nd_syscall.pivot_root = kprobe.function("sys_pivot_root") ?
 {
 	name = "pivot_root"
 	// new_root_str = user_string($new_root)
@@ -375,8 +364,7 @@ probe nd_syscall.pivot_root = kprobe.function("SyS_pivot_root") ?,
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
 		user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.pivot_root.return = kprobe.function("SyS_pivot_root").return ?,
-                                     kprobe.function("sys_pivot_root").return ?
+probe nd_syscall.pivot_root.return = kprobe.function("sys_pivot_root").return ?
 {
 	name = "pivot_root"
 	retstr = returnstr(1)
@@ -386,8 +374,7 @@ probe nd_syscall.pivot_root.return = kprobe.function("SyS_pivot_root").return ?,
 #
 # long sys_poll(struct pollfd __user * ufds, unsigned int nfds, long timeout)
 #
-probe nd_syscall.poll = kprobe.function("SyS_poll") ?,
-                        kprobe.function("sys_poll") ?
+probe nd_syscall.poll = kprobe.function("sys_poll") ?
 {
 	name = "poll"
 	// ufds_uaddr = $ufds
@@ -400,8 +387,7 @@ probe nd_syscall.poll = kprobe.function("SyS_poll") ?,
 	timeout = long_arg(3)
 	argstr = sprintf("%p, %d, %d", ufds_uaddr, nfds, timeout)
 }
-probe nd_syscall.poll.return = kprobe.function("SyS_poll").return ?,
-                               kprobe.function("sys_poll").return ?
+probe nd_syscall.poll.return = kprobe.function("sys_poll").return ?
 {
 	name = "poll"
 	retstr = returnstr(1)
@@ -413,8 +399,7 @@ probe nd_syscall.poll.return = kprobe.function("SyS_poll").return ?,
 #	struct timespec __user *tsp, const sigset_t __user *sigmask,
 #	size_t sigsetsize)
 #
-probe nd_syscall.ppoll = kprobe.function("SyS_ppoll") ?,
-                         kprobe.function("sys_ppoll") ?
+probe nd_syscall.ppoll = kprobe.function("sys_ppoll") ?
 {
 	name = "ppoll"
 	// argstr = sprintf("%p, %d, %s, %p, %d",
@@ -431,8 +416,7 @@ probe nd_syscall.ppoll = kprobe.function("SyS_ppoll") ?,
 		pointer_arg(4),
 		ulong_arg(5))
 }
-probe nd_syscall.ppoll.return = kprobe.function("SyS_ppoll").return ?,
-                                kprobe.function("sys_ppoll").return ?
+probe nd_syscall.ppoll.return = kprobe.function("sys_ppoll").return ?
 {
 	name = "ppoll"
 	retstr = returnstr(1)
@@ -473,8 +457,7 @@ probe nd_syscall.compat_ppoll.return = kprobe.function("compat_sys_ppoll").retur
 #	     unsigned long arg4,
 #	     unsigned long arg5)
 #
-probe nd_syscall.prctl = kprobe.function("SyS_prctl") ?,
-                         kprobe.function("sys_prctl") ?
+probe nd_syscall.prctl = kprobe.function("sys_prctl") ?
 {
 	name = "prctl"
 	// option = $option
@@ -491,8 +474,7 @@ probe nd_syscall.prctl = kprobe.function("SyS_prctl") ?,
 	argstr = sprintf("%p, %p, %p, %p, %p", option, arg2, arg3,
 				arg4, arg5)
 }
-probe nd_syscall.prctl.return = kprobe.function("SyS_prctl").return ?,
-                                kprobe.function("sys_prctl").return ?
+probe nd_syscall.prctl.return = kprobe.function("sys_prctl").return ?
 {
 	name = "prctl"
 	retstr = returnstr(1)
@@ -505,8 +487,7 @@ probe nd_syscall.prctl.return = kprobe.function("SyS_prctl").return ?,
 #		 size_t count,
 #		 loff_t pos)
 #
-probe nd_syscall.pread = kprobe.function("SyS_pread64") ?,
-                         kprobe.function("sys_pread64") ?
+probe nd_syscall.pread = kprobe.function("sys_pread64") ?
 {
 	name = "pread"
 	// fd = $fd
@@ -521,8 +502,7 @@ probe nd_syscall.pread = kprobe.function("SyS_pread64") ?,
 	offset = longlong_arg(4)
 	argstr = sprintf("%d, %p, %d, %d", fd, buf_uaddr, count, offset)
 }
-probe nd_syscall.pread.return = kprobe.function("SyS_pread64").return ?,
-                                kprobe.function("sys_pread64").return ?
+probe nd_syscall.pread.return = kprobe.function("sys_pread64").return ?
 {
 	name = "pread"
 	retstr = returnstr(1)
@@ -533,8 +513,7 @@ probe nd_syscall.pread.return = kprobe.function("SyS_pread64").return ?,
 # long sys_pselect6(int n, fd_set __user *inp, fd_set __user *outp,
 #	fd_set __user *exp, struct timespec __user *tsp, void __user *sig)
 #
-probe nd_syscall.pselect6 = kprobe.function("SyS_pselect6") ?,
-                            kprobe.function("sys_pselect6") ?
+probe nd_syscall.pselect6 = kprobe.function("sys_pselect6") ?
 {
 	name = "pselect6"
 	// argstr = sprintf("%d, %p, %p, %p, %s, %p", $n, $inp, $outp, $exp,
@@ -543,8 +522,7 @@ probe nd_syscall.pselect6 = kprobe.function("SyS_pselect6") ?,
 	argstr = sprintf("%d, %p, %p, %p, %s, %p", int_arg(1) , pointer_arg(2), pointer_arg(3), pointer_arg(4),
 				_struct_timespec_u(pointer_arg(5), 1), pointer_arg(6))
 }
-probe nd_syscall.pselect6.return = kprobe.function("SyS_pselect6").return ?,
-                                   kprobe.function("sys_pselect6").return ?
+probe nd_syscall.pselect6.return = kprobe.function("sys_pselect6").return ?
 {
 	name = "pselect6"
 	retstr = returnstr(1)
@@ -606,8 +584,7 @@ probe nd_syscall.compat_pselect7.return = kprobe.function("compat_sys_pselect7")
 #		long addr,
 #		long data)
 #
-probe nd_syscall.ptrace = kprobe.function("SyS_ptrace") ?,
-                          kprobe.function("sys_ptrace") ?
+probe nd_syscall.ptrace = kprobe.function("sys_ptrace") ?
 {
 	name = "ptrace"
 	// request = $request
@@ -621,8 +598,7 @@ probe nd_syscall.ptrace = kprobe.function("SyS_ptrace") ?,
 	data = long_arg(4)
 	argstr = sprintf("%d, %d, %p, %p", request, pid, addr, data)
 }
-probe nd_syscall.ptrace.return = kprobe.function("SyS_ptrace").return ?,
-                                 kprobe.function("sys_ptrace").return ?
+probe nd_syscall.ptrace.return = kprobe.function("sys_ptrace").return ?
 {
 	name = "ptrace"
 	retstr = returnstr(1)
@@ -635,8 +611,7 @@ probe nd_syscall.ptrace.return = kprobe.function("SyS_ptrace").return ?,
 #		  size_t count,
 #		  loff_t pos)
 #
-probe nd_syscall.pwrite = kprobe.function("SyS_pwrite64") ?,
-                          kprobe.function("sys_pwrite64") ?
+probe nd_syscall.pwrite = kprobe.function("sys_pwrite64") ?
 {
 	name = "pwrite"
 	// fd = $fd
@@ -655,8 +630,7 @@ probe nd_syscall.pwrite = kprobe.function("SyS_pwrite64") ?,
 			text_strn(user_string(buf_uaddr), syscall_string_trunc, 1),
 				count, offset)
 }
-probe nd_syscall.pwrite.return = kprobe.function("SyS_pwrite64").return ?,
-                                 kprobe.function("sys_pwrite64").return ?
+probe nd_syscall.pwrite.return = kprobe.function("sys_pwrite64").return ?
 {
 	name = "pwrite"
 	retstr = returnstr(1)
@@ -703,8 +677,7 @@ probe nd_syscall.pwrite32.return = kprobe.function("sys32_pwrite64").return ?
 #		  qid_t id,
 #		  void __user *addr)
 #
-probe nd_syscall.quotactl = kprobe.function("SyS_quotactl") ?,
-                            kprobe.function("sys_quotactl") ?
+probe nd_syscall.quotactl = kprobe.function("sys_quotactl") ?
 {
 	name = "quotactl"
 	// cmd = $cmd
@@ -723,8 +696,7 @@ probe nd_syscall.quotactl = kprobe.function("SyS_quotactl") ?,
 	addr_uaddr = pointer_arg(4)
 	argstr = sprintf("%s, %s, %d, %p", cmd_str, special_str, id, addr_uaddr)
 }
-probe nd_syscall.quotactl.return = kprobe.function("SyS_quotactl").return ?,
-                                   kprobe.function("sys_quotactl").return ?
+probe nd_syscall.quotactl.return = kprobe.function("sys_quotactl").return ?
 {
 	name = "quotactl"
 	retstr = returnstr(1)
@@ -732,8 +704,7 @@ probe nd_syscall.quotactl.return = kprobe.function("SyS_quotactl").return ?,
 
 # read _______________________________________________________
 # ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)
-probe nd_syscall.read = kprobe.function("SyS_read") ?,
-                        kprobe.function("sys_read") ?
+probe nd_syscall.read = kprobe.function("sys_read") ?
 {
 	name = "read"
 	// fd = $fd
@@ -746,8 +717,7 @@ probe nd_syscall.read = kprobe.function("SyS_read") ?,
 	count = ulong_arg(3)
 	argstr = sprintf("%d, %p, %d", fd, buf_uaddr, count)
 }
-probe nd_syscall.read.return = kprobe.function("SyS_read").return ?,
-                               kprobe.function("sys_read").return ?
+probe nd_syscall.read.return = kprobe.function("sys_read").return ?
 {
 	name = "read"
 	retstr = returnstr(1)
@@ -760,8 +730,7 @@ probe nd_syscall.read.return = kprobe.function("SyS_read").return ?,
 #		   loff_t offset,
 #		   size_t count)
 #
-probe nd_syscall.readahead = kprobe.function("SyS_readahead") ?,
-                             kprobe.function("sys_readahead") ?
+probe nd_syscall.readahead = kprobe.function("sys_readahead") ?
 {
 	name = "readahead"
 	// fd = $fd
@@ -773,8 +742,7 @@ probe nd_syscall.readahead = kprobe.function("SyS_readahead") ?,
 	count = ulong_arg(3)
 	argstr = sprintf("%d, %p, %p", fd, offset, count)
 }
-probe nd_syscall.readahead.return = kprobe.function("SyS_readahead").return ?,
-                                    kprobe.function("sys_readahead").return ?
+probe nd_syscall.readahead.return = kprobe.function("sys_readahead").return ?
 {
 	name = "readahead"
 	retstr = returnstr(1)
@@ -806,8 +774,7 @@ probe nd_syscall.readdir.return = kprobe.function("compat_sys_old_readdir").retu
 #		  char __user * buf,
 #		  int bufsiz)
 #
-probe nd_syscall.readlink = kprobe.function("SyS_readlink") ?,
-                            kprobe.function("sys_readlink") ?
+probe nd_syscall.readlink = kprobe.function("sys_readlink") ?
 {
 	name = "readlink"
 	// path = user_string($path)
@@ -822,8 +789,7 @@ probe nd_syscall.readlink = kprobe.function("SyS_readlink") ?,
 	argstr = sprintf("%s, %p, %d", user_string_quoted(pointer_arg(1)),
 			buf_uaddr, bufsiz)
 }
-probe nd_syscall.readlink.return = kprobe.function("SyS_readlink").return ?,
-                                   kprobe.function("sys_readlink").return ?
+probe nd_syscall.readlink.return = kprobe.function("sys_readlink").return ?
 {
 	name = "readlink"
 	retstr = returnstr(1)
@@ -835,8 +801,7 @@ probe nd_syscall.readlink.return = kprobe.function("SyS_readlink").return ?,
 #		  char __user * buf,
 #		  int bufsiz)
 #
-probe nd_syscall.readlinkat = kprobe.function("SyS_readlinkat") ?,
-                              kprobe.function("sys_readlinkat") ?
+probe nd_syscall.readlinkat = kprobe.function("sys_readlinkat") ?
 {
 	name = "readlinkat"
 	//dfd = $dfd
@@ -853,8 +818,7 @@ probe nd_syscall.readlinkat = kprobe.function("SyS_readlinkat") ?,
 	argstr = sprintf("%s, %s, %p, %d", _dfd_str(dfd), user_string_quoted(pointer_arg(2)),
 			buf_uaddr, bufsiz)
 }
-probe nd_syscall.readlinkat.return = kprobe.function("SyS_readlinkat").return ?,
-                                     kprobe.function("sys_readlinkat").return ?
+probe nd_syscall.readlinkat.return = kprobe.function("sys_readlinkat").return ?
 {
 	name = "readlinkat"
 	retstr = returnstr(1)
@@ -870,7 +834,6 @@ probe nd_syscall.readlinkat.return = kprobe.function("SyS_readlinkat").return ?,
 #		unsigned long vlen)
 #
 probe nd_syscall.readv = kprobe.function("compat_sys_readv") ?,
-                         kprobe.function("SyS_readv") ?,
                          kprobe.function("sys_readv") ?
 {
 	name = "readv"
@@ -885,7 +848,6 @@ probe nd_syscall.readv = kprobe.function("compat_sys_readv") ?,
 	argstr = sprintf("%d, %p, %d", fd, vector_uaddr, count)
 }
 probe nd_syscall.readv.return = kprobe.function("compat_sys_readv").return ?,
-                                kprobe.function("SyS_readv").return ?,
                                 kprobe.function("sys_readv").return ?
 {
 	name = "readv"
@@ -899,8 +861,7 @@ probe nd_syscall.readv.return = kprobe.function("compat_sys_readv").return ?,
 #		unsigned int cmd,
 #		void __user * arg)
 #
-probe nd_syscall.reboot = kprobe.function("SyS_reboot") ?,
-                          kprobe.function("sys_reboot") ?
+probe nd_syscall.reboot = kprobe.function("sys_reboot") ?
 {
 	name = "reboot"
 	// magic = $magic1
@@ -923,8 +884,7 @@ probe nd_syscall.reboot = kprobe.function("SyS_reboot") ?,
 	argstr = sprintf("%s, %s, %s, %p", magic_str, magic2_str,
 				flag_str, arg_uaddr)
 }
-probe nd_syscall.reboot.return = kprobe.function("SyS_reboot").return ?,
-                                 kprobe.function("sys_reboot").return ?
+probe nd_syscall.reboot.return = kprobe.function("sys_reboot").return ?
 {
 	name = "reboot"
 	retstr = returnstr(1)
@@ -966,8 +926,7 @@ probe nd_syscall.recv.return = kprobe.function("sys_recv").return ?
 #		  struct sockaddr __user *addr,
 #		  int __user *addr_len)
 #
-probe nd_syscall.recvfrom = kprobe.function("SyS_recvfrom") ?,
-                            kprobe.function("sys_recvfrom") ?
+probe nd_syscall.recvfrom = kprobe.function("sys_recvfrom") ?
 {
 	name = "recvfrom"
 	// s = $fd
@@ -990,8 +949,7 @@ probe nd_syscall.recvfrom = kprobe.function("SyS_recvfrom") ?,
 	argstr = sprintf("%d, %p, %d, %s, %p, %p",
 		s, buf_uaddr, len, flags_str, addr_uaddr, addrlen_uaddr)
 }
-probe nd_syscall.recvfrom.return = kprobe.function("SyS_recvfrom").return ?,
-                                   kprobe.function("sys_recvfrom").return ?
+probe nd_syscall.recvfrom.return = kprobe.function("sys_recvfrom").return ?
 {
 	name = "recvfrom"
 	retstr = returnstr(1)
@@ -1003,8 +961,7 @@ probe nd_syscall.recvfrom.return = kprobe.function("SyS_recvfrom").return ?,
 #		 struct msghdr __user *msg,
 #		 unsigned int flags)
 #
-probe nd_syscall.recvmsg = kprobe.function("SyS_recvmsg") ?,
-                           kprobe.function("sys_recvmsg") ?
+probe nd_syscall.recvmsg = kprobe.function("sys_recvmsg") ?
 {
 	name = "recvmsg"
 	// s = $fd
@@ -1019,8 +976,7 @@ probe nd_syscall.recvmsg = kprobe.function("SyS_recvmsg") ?,
 	flags_str = _recvflags_str(flags)
 	argstr = sprintf("%d, %p, %s", s, msg_uaddr, flags_str)
 }
-probe nd_syscall.recvmsg.return = kprobe.function("SyS_recvmsg").return ?,
-                                  kprobe.function("sys_recvmsg").return ?
+probe nd_syscall.recvmsg.return = kprobe.function("sys_recvmsg").return ?
 {
 	name = "recvmsg"
 	retstr = returnstr(1)
@@ -1059,8 +1015,7 @@ probe nd_syscall.compat_sys_recvmsg.return = kprobe.function("compat_sys_recvmsg
 #			    unsigned long pgoff,
 #			    unsigned long flags)
 #
-probe nd_syscall.remap_file_pages = kprobe.function("SyS_remap_file_pages") ?,
-                                    kprobe.function("sys_remap_file_pages") ?
+probe nd_syscall.remap_file_pages = kprobe.function("sys_remap_file_pages") ?
 {
 	name = "remap_file_pages"
 	// start = $start
@@ -1077,8 +1032,7 @@ probe nd_syscall.remap_file_pages = kprobe.function("SyS_remap_file_pages") ?,
 	argstr = sprintf("%p, %p, %p, %p, %p", start, size, prot,
 				pgoff, flags)
 }
-probe nd_syscall.remap_file_pages.return = kprobe.function("SyS_remap_file_pages").return ?,
-                                           kprobe.function("sys_remap_file_pages").return ?
+probe nd_syscall.remap_file_pages.return = kprobe.function("sys_remap_file_pages").return ?
 {
 	name = "remap_file_pages"
 	retstr = returnstr(1)
@@ -1090,8 +1044,7 @@ probe nd_syscall.remap_file_pages.return = kprobe.function("SyS_remap_file_pages
 # sys_removexattr(char __user *path,
 #		     char __user *name)
 #
-probe nd_syscall.removexattr = kprobe.function("SyS_removexattr") ?,
-                               kprobe.function("sys_removexattr") ?
+probe nd_syscall.removexattr = kprobe.function("sys_removexattr") ?
 {
 	name = "removexattr"
 	// path = user_string($path)
@@ -1104,8 +1057,7 @@ probe nd_syscall.removexattr = kprobe.function("SyS_removexattr") ?,
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
 		user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.removexattr.return = kprobe.function("SyS_removexattr").return ?,
-                                      kprobe.function("sys_removexattr").return ?
+probe nd_syscall.removexattr.return = kprobe.function("sys_removexattr").return ?
 {
 	name = "removexattr"
 	retstr = returnstr(1)
@@ -1117,8 +1069,7 @@ probe nd_syscall.removexattr.return = kprobe.function("SyS_removexattr").return
 # sys_rename(const char __user * oldname,
 #		const char __user * newname)
 #
-probe nd_syscall.rename = kprobe.function("SyS_rename") ?,
-                          kprobe.function("sys_rename") ?
+probe nd_syscall.rename = kprobe.function("sys_rename") ?
 {
 	name = "rename"
 	// oldpath = user_string($oldname)
@@ -1131,8 +1082,7 @@ probe nd_syscall.rename = kprobe.function("SyS_rename") ?,
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
 			user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.rename.return = kprobe.function("SyS_rename").return ?,
-                                 kprobe.function("sys_rename").return ?
+probe nd_syscall.rename.return = kprobe.function("sys_rename").return ?
 {
 	name = "rename"
 	retstr = returnstr(1)
@@ -1142,8 +1092,7 @@ probe nd_syscall.rename.return = kprobe.function("SyS_rename").return ?,
 # new function with 2.6.16
 # long sys_renameat(int olddfd, const char __user *oldname,
 #	int newdfd, const char __user *newname)
-probe nd_syscall.renameat = kprobe.function("SyS_renameat") ?,
-                            kprobe.function("sys_renameat") ?
+probe nd_syscall.renameat = kprobe.function("sys_renameat") ?
 {
 	name = "renameat"
 	// olddfd = $olddfd
@@ -1170,8 +1119,7 @@ probe nd_syscall.renameat = kprobe.function("SyS_renameat") ?,
 		olddfd_str, user_string_quoted(oldname),
 		newdfd_str, user_string_quoted(newname))
 }
-probe nd_syscall.renameat.return = kprobe.function("SyS_renameat").return ?,
-                                   kprobe.function("sys_renameat").return ?
+probe nd_syscall.renameat.return = kprobe.function("sys_renameat").return ?
 {
 	name = "renameat"
 	retstr = returnstr(1)
@@ -1185,8 +1133,7 @@ probe nd_syscall.renameat.return = kprobe.function("SyS_renameat").return ?,
 #		     key_serial_t destringid)
 # compat_sys_request_key() calls sys_request_key, so don't need probe there.
 #
-probe nd_syscall.request_key = kprobe.function("SyS_request_key") ?,
-                               kprobe.function("sys_request_key") ?
+probe nd_syscall.request_key = kprobe.function("sys_request_key") ?
 {
 	name = "request_key"
 	// type_uaddr = $_type
@@ -1201,8 +1148,7 @@ probe nd_syscall.request_key = kprobe.function("SyS_request_key") ?,
 	destringid = u32_arg(4)
 	argstr = sprintf("%p, %p, %p, %p", type_uaddr, description_uaddr, callout_info_uaddr, destringid)
 }
-probe nd_syscall.request_key.return = kprobe.function("SyS_request_key").return ?,
-                                      kprobe.function("sys_request_key").return ?
+probe nd_syscall.request_key.return = kprobe.function("sys_request_key").return ?
 {
 	name = "request_key"
 	retstr = returnstr(1)
@@ -1229,8 +1175,7 @@ probe nd_syscall.restart_syscall.return = kprobe.function("sys_restart_syscall")
 # asmlinkage long
 # sys_rmdir(const char __user * pathname)
 #
-probe nd_syscall.rmdir = kprobe.function("SyS_rmdir") ?,
-                         kprobe.function("sys_rmdir") ?
+probe nd_syscall.rmdir = kprobe.function("sys_rmdir") ?
 {
 	name = "rmdir"
 	// pathname = user_string($pathname)
@@ -1239,8 +1184,7 @@ probe nd_syscall.rmdir = kprobe.function("SyS_rmdir") ?,
 	pathname = user_string(pointer_arg(1))
 	argstr = user_string_quoted(pointer_arg(1))
 }
-probe nd_syscall.rmdir.return = kprobe.function("SyS_rmdir").return ?,
-                                kprobe.function("sys_rmdir").return ?
+probe nd_syscall.rmdir.return = kprobe.function("sys_rmdir").return ?
 {
 	name = "rmdir"
 	retstr = returnstr(1)
@@ -1253,8 +1197,7 @@ probe nd_syscall.rmdir.return = kprobe.function("SyS_rmdir").return ?,
 #			struct sigaction __user *oact,
 #			size_t sigsetsize)
 #
-probe nd_syscall.rt_sigaction = kprobe.function("SyS_rt_sigaction") ?,
-                                kprobe.function("sys_rt_sigaction") ?
+probe nd_syscall.rt_sigaction = kprobe.function("sys_rt_sigaction") ?
 {
 	name = "rt_sigaction"
 	// sig = $sig
@@ -1271,8 +1214,7 @@ probe nd_syscall.rt_sigaction = kprobe.function("SyS_rt_sigaction") ?,
 	argstr = sprintf("%s, {%s}, %p, %d", _signal_name(sig),
 			_struct_sigaction_u(act_uaddr), oact_uaddr, sigsetsize)
 }
-probe nd_syscall.rt_sigaction.return = kprobe.function("SyS_rt_sigaction").return ?,
-                                       kprobe.function("sys_rt_sigaction").return ?
+probe nd_syscall.rt_sigaction.return = kprobe.function("sys_rt_sigaction").return ?
 {
 	name = "rt_sigaction"
 	retstr = returnstr(1)
@@ -1316,8 +1258,7 @@ probe nd_syscall.rt_sigaction32.return = kprobe.function("sys32_rt_sigaction").r
 #
 # long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize)
 #
-probe nd_syscall.rt_sigpending = kprobe.function("SyS_rt_sigpending") ?,
-                                 kprobe.function("sys_rt_sigpending") ?
+probe nd_syscall.rt_sigpending = kprobe.function("sys_rt_sigpending") ?
 {
 	name = "rt_sigpending"
 	// set_uaddr = $set
@@ -1328,8 +1269,7 @@ probe nd_syscall.rt_sigpending = kprobe.function("SyS_rt_sigpending") ?,
 	sigsetsize = ulong_arg(2)
 	argstr = sprintf("%p, %d", set_uaddr, sigsetsize)
 }
-probe nd_syscall.rt_sigpending.return = kprobe.function("SyS_rt_sigpending").return ?,
-                                        kprobe.function("sys_rt_sigpending").return ?
+probe nd_syscall.rt_sigpending.return = kprobe.function("sys_rt_sigpending").return ?
 {
 	name = "rt_sigpending"
 	retstr = returnstr(1)
@@ -1342,7 +1282,6 @@ probe nd_syscall.rt_sigpending.return = kprobe.function("SyS_rt_sigpending").ret
 #
 probe nd_syscall.rt_sigprocmask = kprobe.function("sys32_rt_sigprocmask") ?,
                                   kprobe.function("compat_sys_rt_sigprocmask") ?,
-                                  kprobe.function("SyS_rt_sigprocmask") ?,
                                   kprobe.function("sys_rt_sigprocmask") ?
 {
 	name = "rt_sigprocmask"
@@ -1363,7 +1302,6 @@ probe nd_syscall.rt_sigprocmask = kprobe.function("sys32_rt_sigprocmask") ?,
 }
 probe nd_syscall.rt_sigprocmask.return = kprobe.function("sys32_rt_sigprocmask").return ?,
                                          kprobe.function("compat_sys_rt_sigprocmask").return ?,
-                                         kprobe.function("SyS_rt_sigprocmask").return ?,
                                          kprobe.function("sys_rt_sigprocmask").return ?
 {
 	name = "rt_sigprocmask"
@@ -1374,8 +1312,7 @@ probe nd_syscall.rt_sigprocmask.return = kprobe.function("sys32_rt_sigprocmask")
 #
 # long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t __user *uinfo)
 #
-probe nd_syscall.rt_sigqueueinfo = kprobe.function("SyS_rt_sigqueueinfo") ?,
-                                   kprobe.function("sys_rt_sigqueueinfo") ?
+probe nd_syscall.rt_sigqueueinfo = kprobe.function("sys_rt_sigqueueinfo") ?
 {
 	name = "rt_sigqueueinfo"
 	// pid = $pid
@@ -1388,8 +1325,7 @@ probe nd_syscall.rt_sigqueueinfo = kprobe.function("SyS_rt_sigqueueinfo") ?,
 	uinfo_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %s, %p", pid, _signal_name(sig), uinfo_uaddr)
 }
-probe nd_syscall.rt_sigqueueinfo.return = kprobe.function("SyS_rt_sigqueueinfo").return ?,
-                                          kprobe.function("sys_rt_sigqueueinfo").return ?
+probe nd_syscall.rt_sigqueueinfo.return = kprobe.function("sys_rt_sigqueueinfo").return ?
 {
 	name = "rt_sigqueueinfo"
 	retstr = returnstr(1)
@@ -1417,7 +1353,6 @@ probe nd_syscall.rt_sigreturn.return = kprobe.function("sys_rt_sigreturn").retur
 #
 probe nd_syscall.rt_sigsuspend = kprobe.function("compat_sys_rt_sigsuspend") ?,
                                  kprobe.function("ia64_rt_sigsuspend") ?,
-                                 kprobe.function("SyS_rt_sigsuspend") ?,
                                  kprobe.function("sys_rt_sigsuspend") ?
 {
 	name = "rt_sigsuspend"
@@ -1425,7 +1360,6 @@ probe nd_syscall.rt_sigsuspend = kprobe.function("compat_sys_rt_sigsuspend") ?,
 }
 probe nd_syscall.rt_sigsuspend.return = kprobe.function("compat_sys_rt_sigsuspend").return ?,
                                         kprobe.function("ia64_rt_sigsuspend").return ?,
-                                        kprobe.function("SyS_rt_sigsuspend").return ?,
                                         kprobe.function("sys_rt_sigsuspend").return ?
 {
 	name = "rt_sigsuspend"
@@ -1443,7 +1377,6 @@ probe nd_syscall.rt_sigsuspend.return = kprobe.function("compat_sys_rt_sigsuspen
 #		struct compat_timespec __user *uts, compat_size_t sigsetsize)
 #
 probe nd_syscall.rt_sigtimedwait = kprobe.function("compat_sys_rt_sigtimedwait") ?,
-                                   kprobe.function("SyS_rt_sigtimedwait") ?,
                                    kprobe.function("sys_rt_sigtimedwait") ?
 {
 	name = "rt_sigtimedwait"
@@ -1463,7 +1396,6 @@ probe nd_syscall.rt_sigtimedwait = kprobe.function("compat_sys_rt_sigtimedwait")
 	argstr = sprintf("%p, %p, %p, %d", uthese_uaddr, uinfo_uaddr, uts_uaddr, sigsetsize)
 }
 probe nd_syscall.rt_sigtimedwait.return = kprobe.function("compat_sys_rt_sigtimedwait").return ?,
-                                          kprobe.function("SyS_rt_sigtimedwait").return ?,
                                           kprobe.function("sys_rt_sigtimedwait").return ?
 {
 	name = "rt_sigtimedwait"
@@ -1477,8 +1409,7 @@ probe nd_syscall.rt_sigtimedwait.return = kprobe.function("compat_sys_rt_sigtime
 #			     unsigned int len,
 #			     unsigned long __user *user_mask_ptr)
 #
-probe nd_syscall.sched_getaffinity = kprobe.function("SyS_sched_getaffinity") ?,
-                                     kprobe.function("sys_sched_getaffinity") ?
+probe nd_syscall.sched_getaffinity = kprobe.function("sys_sched_getaffinity") ?
 {
 	name = "sched_getaffinity"
 	// pid = $pid
@@ -1490,8 +1421,7 @@ probe nd_syscall.sched_getaffinity = kprobe.function("SyS_sched_getaffinity") ?,
 	mask_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %p, %p", pid, len, mask_uaddr)
 }
-probe nd_syscall.sched_getaffinity.return = kprobe.function("SyS_sched_getaffinity").return ?,
-                                            kprobe.function("sys_sched_getaffinity").return ?
+probe nd_syscall.sched_getaffinity.return = kprobe.function("sys_sched_getaffinity").return ?
 {
 	name = "sched_getaffinity"
 	retstr = returnstr(1)
@@ -1503,8 +1433,7 @@ probe nd_syscall.sched_getaffinity.return = kprobe.function("SyS_sched_getaffini
 # sys_sched_getparam(pid_t pid,
 #			  struct sched_param __user *param)
 #
-probe nd_syscall.sched_getparam = kprobe.function("SyS_sched_getparam") ?,
-                                  kprobe.function("sys_sched_getparam") ?
+probe nd_syscall.sched_getparam = kprobe.function("sys_sched_getparam") ?
 {
 	name = "sched_getparam"
 	// pid = $pid
@@ -1514,8 +1443,7 @@ probe nd_syscall.sched_getparam = kprobe.function("SyS_sched_getparam") ?,
 	p_uaddr = pointer_arg(2)
 	argstr = sprintf("%d, %p", pid, p_uaddr)
 }
-probe nd_syscall.sched_getparam.return = kprobe.function("SyS_sched_getparam").return ?,
-                                         kprobe.function("sys_sched_getparam").return ?
+probe nd_syscall.sched_getparam.return = kprobe.function("sys_sched_getparam").return ?
 {
 	name = "sched_getparam"
 	retstr = returnstr(1)
@@ -1526,8 +1454,7 @@ probe nd_syscall.sched_getparam.return = kprobe.function("SyS_sched_getparam").r
 # asmlinkage long
 # sys_sched_get_priority_max(int policy)
 #
-probe nd_syscall.sched_get_priority_max = kprobe.function("SyS_sched_get_priority_max") ?,
-                                          kprobe.function("sys_sched_get_priority_max") ?
+probe nd_syscall.sched_get_priority_max = kprobe.function("sys_sched_get_priority_max") ?
 {
 	name = "sched_get_priority_max"
 	// policy = $policy
@@ -1535,8 +1462,7 @@ probe nd_syscall.sched_get_priority_max = kprobe.function("SyS_sched_get_priorit
 	policy = int_arg(1)
 	argstr = sprint(policy)
 }
-probe nd_syscall.sched_get_priority_max.return = kprobe.function("SyS_sched_get_priority_max").return ?,
-                                                 kprobe.function("sys_sched_get_priority_max").return ?
+probe nd_syscall.sched_get_priority_max.return = kprobe.function("sys_sched_get_priority_max").return ?
 {
 	name = "sched_get_priority_max"
 	retstr = returnstr(1)
@@ -1547,8 +1473,7 @@ probe nd_syscall.sched_get_priority_max.return = kprobe.function("SyS_sched_get_
 # asmlinkage long
 # sys_sched_get_priority_min(int policy)
 #
-probe nd_syscall.sched_get_priority_min = kprobe.function("SyS_sched_get_priority_min") ?,
-                                          kprobe.function("sys_sched_get_priority_min") ?
+probe nd_syscall.sched_get_priority_min = kprobe.function("sys_sched_get_priority_min") ?
 {
 	name = "sched_get_priority_min"
 	// policy = $policy
@@ -1556,8 +1481,7 @@ probe nd_syscall.sched_get_priority_min = kprobe.function("SyS_sched_get_priorit
 	policy = int_arg(1)
 	argstr = sprint(policy)
 }
-probe nd_syscall.sched_get_priority_min.return = kprobe.function("SyS_sched_get_priority_min").return ?,
-                                                 kprobe.function("sys_sched_get_priority_min").return ?
+probe nd_syscall.sched_get_priority_min.return = kprobe.function("sys_sched_get_priority_min").return ?
 {
 	name = "sched_get_priority_min"
 	retstr = returnstr(1)
@@ -1567,8 +1491,7 @@ probe nd_syscall.sched_get_priority_min.return = kprobe.function("SyS_sched_get_
 #
 # long sys_sched_getscheduler(pid_t pid)
 #
-probe nd_syscall.sched_getscheduler = kprobe.function("SyS_sched_getscheduler") ?,
-                                      kprobe.function("sys_sched_getscheduler") ?
+probe nd_syscall.sched_getscheduler = kprobe.function("sys_sched_getscheduler") ?
 {
 	name = "sched_getscheduler"
 	// pid = $pid
@@ -1577,8 +1500,7 @@ probe nd_syscall.sched_getscheduler = kprobe.function("SyS_sched_getscheduler")
 	pid = int_arg(1)
 	argstr = sprint(pid)
 }
-probe nd_syscall.sched_getscheduler.return = kprobe.function("SyS_sched_getscheduler").return ?,
-                                             kprobe.function("sys_sched_getscheduler").return ?
+probe nd_syscall.sched_getscheduler.return = kprobe.function("sys_sched_getscheduler").return ?
 {
 	name = "sched_getscheduler"
 	retstr = returnstr(1)
@@ -1588,8 +1510,7 @@ probe nd_syscall.sched_getscheduler.return = kprobe.function("SyS_sched_getsched
 #
 # long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval)
 #
-probe nd_syscall.sched_rr_get_interval = kprobe.function("SyS_sched_rr_get_interval") ?,
-                                         kprobe.function("sys_sched_rr_get_interval") ?
+probe nd_syscall.sched_rr_get_interval = kprobe.function("sys_sched_rr_get_interval") ?
 {
 	name = "sched_rr_get_interval"
 	// pid = $pid
@@ -1600,8 +1521,7 @@ probe nd_syscall.sched_rr_get_interval = kprobe.function("SyS_sched_rr_get_inter
 	tp_uaddr = pointer_arg(2)
 	argstr = sprintf("%d, %s", pid, _struct_timespec_u(tp_uaddr, 1))
 }
-probe nd_syscall.sched_rr_get_interval.return = kprobe.function("SyS_sched_rr_get_interval").return ?,
-                                                kprobe.function("sys_sched_rr_get_interval").return ?
+probe nd_syscall.sched_rr_get_interval.return = kprobe.function("sys_sched_rr_get_interval").return ?
 {
 	name = "sched_rr_get_interval"
 	retstr = returnstr(1)
@@ -1614,8 +1534,7 @@ probe nd_syscall.sched_rr_get_interval.return = kprobe.function("SyS_sched_rr_ge
 # FIXME: why the problem with x86_64?
 #
 %( arch != "x86_64" %?
-probe nd_syscall.sched_setaffinity = kprobe.function("SyS_sched_setaffinity") ?,
-                                     kprobe.function("sys_sched_setaffinity") ?
+probe nd_syscall.sched_setaffinity = kprobe.function("sys_sched_setaffinity") ?
 {
 	name = "sched_setaffinity"
 	// pid = $pid
@@ -1629,8 +1548,7 @@ probe nd_syscall.sched_setaffinity = kprobe.function("SyS_sched_setaffinity") ?,
 	argstr = sprintf("%d, %d, %p", pid, len, mask_uaddr)
 }
 %:
-probe nd_syscall.sched_setaffinity = kprobe.function("SyS_sched_setaffinity") ?,
-                                     kprobe.function("sys_sched_setaffinity") ?
+probe nd_syscall.sched_setaffinity = kprobe.function("sys_sched_setaffinity") ?
 {
 	name = "sched_setaffinity"
 	// pid = $pid
@@ -1644,8 +1562,7 @@ probe nd_syscall.sched_setaffinity = kprobe.function("SyS_sched_setaffinity") ?,
 	argstr = sprintf("%d, <unknown>, %p", pid, mask_uaddr)
 }
 %)
-probe nd_syscall.sched_setaffinity.return = kprobe.function("SyS_sched_setaffinity").return ?,
-                                            kprobe.function("sys_sched_setaffinity").return ?
+probe nd_syscall.sched_setaffinity.return = kprobe.function("sys_sched_setaffinity").return ?
 {
 	name = "sched_setaffinity"
 	retstr = returnstr(1)
@@ -1655,8 +1572,7 @@ probe nd_syscall.sched_setaffinity.return = kprobe.function("SyS_sched_setaffini
 #
 # long sys_sched_setparam(pid_t pid, struct sched_param __user *param)
 #
-probe nd_syscall.sched_setparam = kprobe.function("SyS_sched_setparam") ?,
-                                  kprobe.function("sys_sched_setparam") ?
+probe nd_syscall.sched_setparam = kprobe.function("sys_sched_setparam") ?
 {
 	name = "sched_setparam"
 	// pid = $pid
@@ -1667,8 +1583,7 @@ probe nd_syscall.sched_setparam = kprobe.function("SyS_sched_setparam") ?,
 	p_uaddr = pointer_arg(2)
 	argstr = sprintf("%d, %p", pid, p_uaddr)
 }
-probe nd_syscall.sched_setparam.return = kprobe.function("SyS_sched_setparam").return ?,
-                                         kprobe.function("sys_sched_setparam").return ?
+probe nd_syscall.sched_setparam.return = kprobe.function("sys_sched_setparam").return ?
 {
 	name = "sched_setparam"
 	retstr = returnstr(1)
@@ -1678,8 +1593,7 @@ probe nd_syscall.sched_setparam.return = kprobe.function("SyS_sched_setparam").r
 #
 # long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param)
 #
-probe nd_syscall.sched_setscheduler = kprobe.function("SyS_sched_setscheduler") ?,
-                                      kprobe.function("sys_sched_setscheduler") ?
+probe nd_syscall.sched_setscheduler = kprobe.function("sys_sched_setscheduler") ?
 {
 	name = "sched_setscheduler"
 	// pid = $pid
@@ -1694,8 +1608,7 @@ probe nd_syscall.sched_setscheduler = kprobe.function("SyS_sched_setscheduler")
 	p_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %s, %p", pid, policy_str, p_uaddr)
 }
-probe nd_syscall.sched_setscheduler.return = kprobe.function("SyS_sched_setscheduler").return ?,
-                                             kprobe.function("sys_sched_setscheduler").return ?
+probe nd_syscall.sched_setscheduler.return = kprobe.function("sys_sched_setscheduler").return ?
 {
 	name = "sched_setscheduler"
 	retstr = returnstr(1)
@@ -1722,8 +1635,7 @@ probe nd_syscall.sched_yield.return = kprobe.function("sys_sched_yield").return
 #		fd_set __user *exp,
 #		struct timeval __user *tvp)
 #
-probe nd_syscall.select = kprobe.function("SyS_select") ?,
-                          kprobe.function("sys_select") ?
+probe nd_syscall.select = kprobe.function("sys_select") ?
 {
 	name = "select"
 	// n = $n
@@ -1742,8 +1654,7 @@ probe nd_syscall.select = kprobe.function("SyS_select") ?,
 	argstr = sprintf("%d, %p, %p, %p, %s", n, readfds_uaddr, writefds_uaddr,
 				exceptfds_uaddr, _struct_timeval_u(timeout_uaddr, 1))
 }
-probe nd_syscall.select.return = kprobe.function("SyS_select").return ?,
-                                 kprobe.function("sys_select").return ?
+probe nd_syscall.select.return = kprobe.function("sys_select").return ?
 {
 	name = "select"
 	retstr = returnstr(1)
@@ -1785,8 +1696,7 @@ probe nd_syscall.compat_select.return = kprobe.function("compat_sys_select").ret
 #		 int cmd,
 #		 union semun arg)
 #
-probe nd_syscall.semctl = kprobe.function("SyS_semctl") ?,
-                          kprobe.function("sys_semctl") ?
+probe nd_syscall.semctl = kprobe.function("sys_semctl") ?
 {
 	name = "semctl"
 	// semid = $semid
@@ -1803,8 +1713,7 @@ probe nd_syscall.semctl = kprobe.function("SyS_semctl") ?,
 	cmd = int_arg(3)
 	argstr = sprintf("%d, %d, %s", semid, semnum, _semctl_cmd(cmd))
 }
-probe nd_syscall.semctl.return = kprobe.function("SyS_semctl").return ?,
-                                 kprobe.function("sys_semctl").return ?
+probe nd_syscall.semctl.return = kprobe.function("sys_semctl").return ?
 {
 	name = "semctl"
 	retstr = returnstr(1)
@@ -1829,8 +1738,7 @@ probe nd_syscall.compat_sys_semctl.return = kprobe.function("compat_sys_semctl")
 # semget _____________________________________________________
 # long sys_semget (key_t key, int nsems, int semflg)
 #
-probe nd_syscall.semget = kprobe.function("SyS_semget") ?,
-                          kprobe.function("sys_semget") ?
+probe nd_syscall.semget = kprobe.function("sys_semget") ?
 {
 	name = "semget"
 	// key = $key
@@ -1843,8 +1751,7 @@ probe nd_syscall.semget = kprobe.function("SyS_semget") ?,
 	semflg = int_arg(3)
 	argstr = sprintf("%d, %d, %s", key, nsems, __sem_flags(semflg))
 }
-probe nd_syscall.semget.return = kprobe.function("SyS_semget").return ?,
-                                 kprobe.function("sys_semget").return ?
+probe nd_syscall.semget.return = kprobe.function("sys_semget").return ?
 {
 	name = "semget"
 	retstr = returnstr(1)
@@ -1856,8 +1763,7 @@ probe nd_syscall.semget.return = kprobe.function("SyS_semget").return ?,
 #		struct sembuf __user *tsops,
 #		unsigned nsops)
 #
-probe nd_syscall.semop = kprobe.function("SyS_semtimedop") ?,
-                         kprobe.function("sys_semtimedop") ?
+probe nd_syscall.semop = kprobe.function("sys_semtimedop") ?
 {
 	name = "semop"
 	// semid = $semid
@@ -1870,8 +1776,7 @@ probe nd_syscall.semop = kprobe.function("SyS_semtimedop") ?,
 	nsops = uint_arg(3)
 	argstr = sprintf("%d, %p, %d", semid, tsops_uaddr, nsops)
 }
-probe nd_syscall.semop.return = kprobe.function("SyS_semtimedop").return ?,
-                                kprobe.function("sys_semtimedop").return ?
+probe nd_syscall.semop.return = kprobe.function("sys_semtimedop").return ?
 {
 	name = "semop"
 	retstr = returnstr(1)
@@ -1884,8 +1789,7 @@ probe nd_syscall.semop.return = kprobe.function("SyS_semtimedop").return ?,
 #		    unsigned nsops,
 #		    const struct timespec __user *timeout)
 #
-probe nd_syscall.semtimedop = kprobe.function("SyS_semtimedop") ?,
-                              kprobe.function("sys_semtimedop") ?
+probe nd_syscall.semtimedop = kprobe.function("sys_semtimedop") ?
 {
 	name = "semtimedop"
 	// semid = $semid
@@ -1902,8 +1806,7 @@ probe nd_syscall.semtimedop = kprobe.function("SyS_semtimedop") ?,
 	argstr = sprintf("%d, %p, %d, %s", semid, sops_uaddr, nsops,
 				_struct_timespec_u(timeout_uaddr, 1))
 }
-probe nd_syscall.semtimedop.return = kprobe.function("SyS_semtimedop").return ?,
-                                     kprobe.function("sys_semtimedop").return ?
+probe nd_syscall.semtimedop.return = kprobe.function("sys_semtimedop").return ?
 {
 	name = "semtimedop"
 	retstr = returnstr(1)
@@ -1944,8 +1847,7 @@ probe nd_syscall.compat_sys_semtimedop.return = kprobe.function("compat_sys_semt
 #		size_t len,
 #		unsigned flags)
 #
-probe nd_syscall.send = kprobe.function("SyS_send") ?,
-                        kprobe.function("sys_send") ?
+probe nd_syscall.send = kprobe.function("sys_send") ?
 {
 	name = "send"
 	// s = $fd
@@ -1962,8 +1864,7 @@ probe nd_syscall.send = kprobe.function("SyS_send") ?,
 	flags_str = _sendflags_str(flags)
 	argstr = sprintf("%d, %p, %d, %s", s, buf_uaddr, len, flags_str)
 }
-probe nd_syscall.send.return = kprobe.function("SyS_send").return ?,
-                               kprobe.function("sys_send").return ?
+probe nd_syscall.send.return = kprobe.function("sys_send").return ?
 {
 	name = "send"
 	retstr = returnstr(1)
@@ -1976,9 +1877,7 @@ probe nd_syscall.send.return = kprobe.function("SyS_send").return ?,
 #		  off_t __user *offset,
 #		  size_t count)
 #
-probe nd_syscall.sendfile = kprobe.function("SyS_sendfile") ?,
-                            kprobe.function("sys_sendfile") ?,
-                            kprobe.function("SyS_sendfile64") ?,
+probe nd_syscall.sendfile = kprobe.function("sys_sendfile") ?,
                             kprobe.function("sys_sendfile64") ?
 {
 	name = "sendfile"
@@ -1996,9 +1895,7 @@ probe nd_syscall.sendfile = kprobe.function("SyS_sendfile") ?,
 	argstr = sprintf("%d, %d, %p, %d", out_fd, in_fd, offset_uaddr,
 				count)
 }
-probe nd_syscall.sendfile.return = kprobe.function("SyS_sendfile").return ?,
-                                   kprobe.function("sys_sendfile").return ?,
-                                   kprobe.function("SyS_sendfile64").return ?,
+probe nd_syscall.sendfile.return = kprobe.function("sys_sendfile").return ?,
                                    kprobe.function("sys_sendfile64").return ?
 {
 	name = "sendfile"
@@ -2009,8 +1906,7 @@ probe nd_syscall.sendfile.return = kprobe.function("SyS_sendfile").return ?,
 #
 # long sys_sendmsg(int fd, struct msghdr __user *msg, unsigned flags)
 #
-probe nd_syscall.sendmsg = kprobe.function("SyS_sendmsg") ?,
-                           kprobe.function("sys_sendmsg") ?
+probe nd_syscall.sendmsg = kprobe.function("sys_sendmsg") ?
 {
 	name = "sendmsg"
 	// s = $fd
@@ -2025,8 +1921,7 @@ probe nd_syscall.sendmsg = kprobe.function("SyS_sendmsg") ?,
 	flags_str = _sendflags_str(flags)
 	argstr = sprintf("%d, %p, %s", s, msg_uaddr, _sendflags_str(flags))
 }
-probe nd_syscall.sendmsg.return = kprobe.function("SyS_sendmsg").return ?,
-                                  kprobe.function("sys_sendmsg").return ?
+probe nd_syscall.sendmsg.return = kprobe.function("sys_sendmsg").return ?
 {
 	name = "sendmsg"
 	retstr = returnstr(1)
@@ -2064,8 +1959,7 @@ probe nd_syscall.compat_sys_sendmsg.return = kprobe.function("compat_sys_sendmsg
 #		struct sockaddr __user *addr,
 #		int addr_len)
 #
-probe nd_syscall.sendto = kprobe.function("SyS_sendto") ?,
-                          kprobe.function("sys_sendto") ?
+probe nd_syscall.sendto = kprobe.function("sys_sendto") ?
 {
 	name = "sendto"
 	// s = $fd
@@ -2088,8 +1982,7 @@ probe nd_syscall.sendto = kprobe.function("SyS_sendto") ?,
 	argstr = sprintf("%d, %p, %d, %s, %s, %d", s, buf_uaddr,
 			len, flags_str, _struct_sockaddr_u(to_uaddr, tolen), tolen)
 }
-probe nd_syscall.sendto.return = kprobe.function("SyS_sendto").return ?,
-                                 kprobe.function("sys_sendto").return ?
+probe nd_syscall.sendto.return = kprobe.function("sys_sendto").return ?
 {
 	name = "sendto"
 	retstr = returnstr(1)
@@ -2101,8 +1994,7 @@ probe nd_syscall.sendto.return = kprobe.function("SyS_sendto").return ?,
 # sys_setdomainname(char __user *name,
 #			 int len)
 #
-probe nd_syscall.setdomainname = kprobe.function("SyS_setdomainname") ?,
-                                 kprobe.function("sys_setdomainname") ?
+probe nd_syscall.setdomainname = kprobe.function("sys_setdomainname") ?
 {
 	name = "setdomainname"
 	// hostname_uaddr = $name
@@ -2113,8 +2005,7 @@ probe nd_syscall.setdomainname = kprobe.function("SyS_setdomainname") ?,
 	len = int_arg(2)
 	argstr = sprintf("%p, %d", hostname_uaddr, len)
 }
-probe nd_syscall.setdomainname.return = kprobe.function("SyS_setdomainname").return ?,
-                                        kprobe.function("sys_setdomainname").return ?
+probe nd_syscall.setdomainname.return = kprobe.function("sys_setdomainname").return ?
 {
 	name = "setdomainname"
 	retstr = returnstr(1)
@@ -2125,7 +2016,6 @@ probe nd_syscall.setdomainname.return = kprobe.function("SyS_setdomainname").ret
 # long sys_setfsgid16(old_gid_t gid)
 #
 probe nd_syscall.setfsgid = kprobe.function("sys_setfsgid16") ?,
-                            kprobe.function("SyS_setfsgid") ?,
                             kprobe.function("sys_setfsgid") ?
 {
 	name = "setfsgid"
@@ -2136,7 +2026,6 @@ probe nd_syscall.setfsgid = kprobe.function("sys_setfsgid16") ?,
 	argstr = sprint(fsgid)
 }
 probe nd_syscall.setfsgid.return = kprobe.function("sys_setfsgid16").return ?,
-                                   kprobe.function("SyS_setfsgid").return ?,
                                    kprobe.function("sys_setfsgid").return ?
 {
 	name = "setfsgid"
@@ -2148,7 +2037,6 @@ probe nd_syscall.setfsgid.return = kprobe.function("sys_setfsgid16").return ?,
 # long sys_setfsuid16(old_uid_t uid)
 #
 probe nd_syscall.setfsuid = kprobe.function("sys_setfsuid16") ?,
-                            kprobe.function("SyS_setfsuid") ?,
                             kprobe.function("sys_setfsuid") ?
 {
 	name = "setfsuid"
@@ -2159,7 +2047,6 @@ probe nd_syscall.setfsuid = kprobe.function("sys_setfsuid16") ?,
 	argstr = sprint(fsuid)
 }
 probe nd_syscall.setfsuid.return = kprobe.function("sys_setfsuid16").return ?,
-                                   kprobe.function("SyS_setfsuid").return ?,
                                    kprobe.function("sys_setfsuid").return ?
 {
 	name = "setfsuid"
@@ -2172,7 +2059,6 @@ probe nd_syscall.setfsuid.return = kprobe.function("sys_setfsuid16").return ?,
 # long sys_setgid16(old_gid_t gid)
 #
 probe nd_syscall.setgid = kprobe.function("sys_setgid16") ?,
-                          kprobe.function("SyS_setgid") ?,
                           kprobe.function("sys_setgid") ?
 {
 	name = "setgid"
@@ -2183,7 +2069,6 @@ probe nd_syscall.setgid = kprobe.function("sys_setgid16") ?,
 	argstr = sprint(gid)
 }
 probe nd_syscall.setgid.return = kprobe.function("sys_setgid16").return ?,
-                                 kprobe.function("SyS_setgid").return ?,
                                  kprobe.function("sys_setgid").return ?
 {
 	name = "setgid"
@@ -2198,7 +2083,6 @@ probe nd_syscall.setgid.return = kprobe.function("sys_setgid16").return ?,
 #
 probe nd_syscall.setgroups = kprobe.function("sys_setgroups16") ?,
                              kprobe.function("sys32_setgroups16") ?,
-                             kprobe.function("SyS_setgroups") ?,
                              kprobe.function("sys_setgroups") ?
 {
 	name = "setgroups"
@@ -2212,7 +2096,6 @@ probe nd_syscall.setgroups = kprobe.function("sys_setgroups16") ?,
 }
 probe nd_syscall.setgroups.return = kprobe.function("sys_setgroups16").return ?,
                                     kprobe.function("sys32_setgroups16").return ?,
-                                    kprobe.function("SyS_setgroups").return ?,
                                     kprobe.function("sys_setgroups").return ?
 {
 	name = "setgroups"
@@ -2225,8 +2108,7 @@ probe nd_syscall.setgroups.return = kprobe.function("sys_setgroups16").return ?,
 # sys_sethostname(char __user *name,
 #		     int len)
 #
-probe nd_syscall.sethostname = kprobe.function("SyS_sethostname") ?,
-                               kprobe.function("sys_sethostname") ?
+probe nd_syscall.sethostname = kprobe.function("sys_sethostname") ?
 {
 	name = "sethostname"
 	// hostname_uaddr = $name
@@ -2239,8 +2121,7 @@ probe nd_syscall.sethostname = kprobe.function("SyS_sethostname") ?,
 	len = int_arg(2)
 	argstr = sprintf("%s, %d", user_string_quoted(hostname_uaddr), len)
 }
-probe nd_syscall.sethostname.return = kprobe.function("SyS_sethostname").return ?,
-                                      kprobe.function("sys_sethostname").return ?
+probe nd_syscall.sethostname.return = kprobe.function("sys_sethostname").return ?
 {
 	name = "sethostname"
 	retstr = returnstr(1)
@@ -2252,8 +2133,7 @@ probe nd_syscall.sethostname.return = kprobe.function("SyS_sethostname").return
 #		   struct itimerval __user *value,
 #		   struct itimerval __user *ovalue)
 #
-probe nd_syscall.setitimer = kprobe.function("SyS_setitimer") ?,
-                             kprobe.function("sys_setitimer") ?
+probe nd_syscall.setitimer = kprobe.function("sys_setitimer") ?
 {
 	name = "setitimer"
 	// which = $which
@@ -2268,8 +2148,7 @@ probe nd_syscall.setitimer = kprobe.function("SyS_setitimer") ?,
 	argstr = sprintf("%s, %s, %p", _itimer_which_str(which),
 		_struct_itimerval_u(value_uaddr), ovalue_uaddr)
 }
-probe nd_syscall.setitimer.return = kprobe.function("SyS_setitimer").return ?,
-                                    kprobe.function("sys_setitimer").return ?
+probe nd_syscall.setitimer.return = kprobe.function("sys_setitimer").return ?
 {
 	name = "setitimer"
 	retstr = returnstr(1)
@@ -2306,7 +2185,6 @@ probe nd_syscall.compat_setitimer.return = kprobe.function("compat_sys_setitimer
 #	unsigned long maxnode)
 #
 probe nd_syscall.set_mempolicy = kprobe.function("compat_sys_set_mempolicy") ?,
-                                 kprobe.function("SyS_set_mempolicy") ?,
                                  kprobe.function("sys_set_mempolicy") ?
 {
 	name = "set_mempolicy"
@@ -2321,7 +2199,6 @@ probe nd_syscall.set_mempolicy = kprobe.function("compat_sys_set_mempolicy") ?,
 	argstr = sprintf("%d, %p, %d", mode, nmask_uaddr, maxnode)
 }
 probe nd_syscall.set_mempolicy.return = kprobe.function("compat_sys_set_mempolicy").return ?,
-                                        kprobe.function("SyS_set_mempolicy").return ?,
                                         kprobe.function("sys_set_mempolicy").return ?
 {
 	name = "set_mempolicy"
@@ -2334,8 +2211,7 @@ probe nd_syscall.set_mempolicy.return = kprobe.function("compat_sys_set_mempolic
 # sys_setpgid(pid_t pid,
 #		 pid_t pgid)
 #
-probe nd_syscall.setpgid = kprobe.function("SyS_setpgid") ?,
-                           kprobe.function("sys_setpgid") ?
+probe nd_syscall.setpgid = kprobe.function("sys_setpgid") ?
 {
 	name = "setpgid"
 	// pid = $pid
@@ -2346,8 +2222,7 @@ probe nd_syscall.setpgid = kprobe.function("SyS_setpgid") ?,
 	pgid = int_arg(2)
 	argstr = sprintf("%d, %d", pid, pgid)
 }
-probe nd_syscall.setpgid.return = kprobe.function("SyS_setpgid").return ?,
-                                  kprobe.function("sys_setpgid").return ?
+probe nd_syscall.setpgid.return = kprobe.function("sys_setpgid").return ?
 {
 	name = "setpgid"
 	retstr = returnstr(1)
@@ -2360,8 +2235,7 @@ probe nd_syscall.setpgid.return = kprobe.function("SyS_setpgid").return ?,
 #		     int who,
 #		     int niceval)
 #
-probe nd_syscall.setpriority = kprobe.function("SyS_setpriority") ?,
-                               kprobe.function("sys_setpriority") ?
+probe nd_syscall.setpriority = kprobe.function("sys_setpriority") ?
 {
 	name = "setpriority"
 	// which = $which
@@ -2376,8 +2250,7 @@ probe nd_syscall.setpriority = kprobe.function("SyS_setpriority") ?,
 	prio = int_arg(3)
 	argstr = sprintf("%s, %d, %d", which_str, who, prio)
 }
-probe nd_syscall.setpriority.return = kprobe.function("SyS_setpriority").return ?,
-                                      kprobe.function("sys_setpriority").return ?
+probe nd_syscall.setpriority.return = kprobe.function("sys_setpriority").return ?
 {
 	name = "setpriority"
 	retstr = returnstr(1)
@@ -2386,8 +2259,7 @@ probe nd_syscall.setpriority.return = kprobe.function("SyS_setpriority").return
 # setregid ___________________________________________________
 # long sys_setregid(gid_t rgid, gid_t egid)
 #
-probe nd_syscall.setregid = kprobe.function("SyS_setregid") ?,
-                            kprobe.function("sys_setregid") ?
+probe nd_syscall.setregid = kprobe.function("sys_setregid") ?
 {
 	name = "setregid"
 	// rgid = __int32($rgid)
@@ -2397,8 +2269,7 @@ probe nd_syscall.setregid = kprobe.function("SyS_setregid") ?,
 	egid = __int32(uint_arg(2))
 	argstr = sprintf("%d, %d", rgid, egid)
 }
-probe nd_syscall.setregid.return = kprobe.function("SyS_setregid").return ?,
-                                   kprobe.function("sys_setregid").return ?
+probe nd_syscall.setregid.return = kprobe.function("sys_setregid").return ?
 {
 	name = "setregid"
 	retstr = returnstr(1)
@@ -2426,8 +2297,7 @@ probe nd_syscall.setregid16.return = kprobe.function("sys_setregid16").return ?
 # setresgid __________________________________________________
 # long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
 #
-probe nd_syscall.setresgid = kprobe.function("SyS_setresgid") ?,
-                             kprobe.function("sys_setresgid") ?
+probe nd_syscall.setresgid = kprobe.function("sys_setresgid") ?
 {
 	name = "setresgid"
 	// rgid = __int32($rgid)
@@ -2439,8 +2309,7 @@ probe nd_syscall.setresgid = kprobe.function("SyS_setresgid") ?,
 	sgid = __int32(uint_arg(3))
 	argstr = sprintf("%d, %d, %d", rgid, egid, sgid)
 }
-probe nd_syscall.setresgid.return = kprobe.function("SyS_setresgid").return ?,
-                                    kprobe.function("sys_setresgid").return ?
+probe nd_syscall.setresgid.return = kprobe.function("sys_setresgid").return ?
 {
 	name = "setresgid"
 	retstr = returnstr(1)
@@ -2474,8 +2343,7 @@ probe nd_syscall.setresgid16.return = kprobe.function("sys_setresgid16").return
 #
 # long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
 #
-probe nd_syscall.setresuid = kprobe.function("SyS_setresuid") ?,
-                             kprobe.function("sys_setresuid") ?
+probe nd_syscall.setresuid = kprobe.function("sys_setresuid") ?
 {
 	name = "setresuid"
 	// ruid = __int32($ruid)
@@ -2487,8 +2355,7 @@ probe nd_syscall.setresuid = kprobe.function("SyS_setresuid") ?,
 	suid = __int32(uint_arg(3))
 	argstr = sprintf("%d, %d, %d", ruid, euid, suid)
 }
-probe nd_syscall.setresuid.return = kprobe.function("SyS_setresuid").return ?,
-                                    kprobe.function("sys_setresuid").return ?
+probe nd_syscall.setresuid.return = kprobe.function("sys_setresuid").return ?
 {
 	name = "setresuid"
 	retstr = returnstr(1)
@@ -2519,8 +2386,7 @@ probe nd_syscall.setresuid16.return = kprobe.function("sys_setresuid16").return
 # setreuid ___________________________________________________
 # long sys_setreuid(uid_t ruid, uid_t euid)
 #
-probe nd_syscall.setreuid = kprobe.function("SyS_setreuid") ?,
-                            kprobe.function("sys_setreuid") ?
+probe nd_syscall.setreuid = kprobe.function("sys_setreuid") ?
 {
 	name = "setreuid"
 	// ruid = __int32($ruid)
@@ -2530,8 +2396,7 @@ probe nd_syscall.setreuid = kprobe.function("SyS_setreuid") ?,
 	euid = __int32(uint_arg(2))
 	argstr = sprintf("%d, %d", ruid, euid)
 }
-probe nd_syscall.setreuid.return = kprobe.function("SyS_setreuid").return ?,
-                                   kprobe.function("sys_setreuid").return ?
+probe nd_syscall.setreuid.return = kprobe.function("sys_setreuid").return ?
 {
 	name = "setreuid"
 	retstr = returnstr(1)
@@ -2562,8 +2427,7 @@ probe nd_syscall.setreuid16.return = kprobe.function("sys_setreuid16").return ?
 # sys_setrlimit(unsigned int resource,
 #		   struct rlimit __user *rlim)
 #
-probe nd_syscall.setrlimit = kprobe.function("SyS_setrlimit") ?,
-                             kprobe.function("sys_setrlimit") ?
+probe nd_syscall.setrlimit = kprobe.function("sys_setrlimit") ?
 {
 	name = "setrlimit"
 	// resource = $resource
@@ -2576,8 +2440,7 @@ probe nd_syscall.setrlimit = kprobe.function("SyS_setrlimit") ?,
 	argstr = sprintf("%s, %s", _rlimit_resource_str(resource),
 				_struct_rlimit_u(rlim_uaddr))
 }
-probe nd_syscall.setrlimit.return = kprobe.function("SyS_setrlimit").return ?,
-                                    kprobe.function("sys_setrlimit").return ?
+probe nd_syscall.setrlimit.return = kprobe.function("sys_setrlimit").return ?
 {
 	name = "setrlimit"
 	retstr = returnstr(1)
@@ -2607,7 +2470,6 @@ probe nd_syscall.setsid.return = kprobe.function("sys_setsid").return
 #		    int optlen)
 #
 probe nd_syscall.setsockopt = kprobe.function("compat_sys_setsockopt") ?,
-                              kprobe.function("SyS_setsockopt") ?,
                               kprobe.function("sys_setsockopt") ?
 {
 	name = "setsockopt"
@@ -2632,7 +2494,6 @@ probe nd_syscall.setsockopt = kprobe.function("compat_sys_setsockopt") ?,
 				optname_str, optval_uaddr, optlen)
 }
 probe nd_syscall.setsockopt.return = kprobe.function("compat_sys_setsockopt").return ?,
-                                     kprobe.function("SyS_setsockopt").return ?,
                                      kprobe.function("sys_setsockopt").return ?
 {
 	name = "setsockopt"
@@ -2644,8 +2505,7 @@ probe nd_syscall.setsockopt.return = kprobe.function("compat_sys_setsockopt").re
 # asmlinkage long
 # sys_set_tid_address(int __user *tidptr)
 #
-probe nd_syscall.set_tid_address = kprobe.function("SyS_set_tid_address") ?,
-                                   kprobe.function("sys_set_tid_address") ?
+probe nd_syscall.set_tid_address = kprobe.function("sys_set_tid_address") ?
 {
 	name = "set_tid_address"
 	// tidptr_uaddr = $tidptr
@@ -2653,8 +2513,7 @@ probe nd_syscall.set_tid_address = kprobe.function("SyS_set_tid_address") ?,
 	tidptr_uaddr = pointer_arg(1)
 	argstr = sprintf("%p", tidptr_uaddr)
 }
-probe nd_syscall.set_tid_address.return = kprobe.function("SyS_set_tid_address").return ?,
-                                          kprobe.function("sys_set_tid_address").return ?
+probe nd_syscall.set_tid_address.return = kprobe.function("sys_set_tid_address").return ?
 {
 	name = "set_tid_address"
 	retstr = returnstr(1)
@@ -2665,8 +2524,7 @@ probe nd_syscall.set_tid_address.return = kprobe.function("SyS_set_tid_address")
 # long sys_settimeofday(struct timeval __user *tv,
 #			struct timezone __user *tz)
 #
-probe nd_syscall.settimeofday = kprobe.function("SyS_settimeofday") ?,
-                                kprobe.function("sys_settimeofday") ?
+probe nd_syscall.settimeofday = kprobe.function("sys_settimeofday") ?
 {
 	name = "settimeofday"
 	// ttv_uaddr = $tv
@@ -2677,8 +2535,7 @@ probe nd_syscall.settimeofday = kprobe.function("SyS_settimeofday") ?,
 	tz_uaddr = pointer_arg(2)
 	argstr = sprintf("%s, %s", _struct_timeval_u(tv_uaddr, 1), _struct_timezone_u(tz_uaddr))
 }
-probe nd_syscall.settimeofday.return = kprobe.function("SyS_settimeofday").return ?,
-                                       kprobe.function("sys_settimeofday").return ?
+probe nd_syscall.settimeofday.return = kprobe.function("sys_settimeofday").return ?
 {
 	name = "settimeofday"
 	retstr = returnstr(1)
@@ -2712,7 +2569,6 @@ probe nd_syscall.settimeofday32.return = kprobe.function("sys32_settimeofday").r
 # long sys_setuid16(old_uid_t uid)
 #
 probe nd_syscall.setuid = kprobe.function("sys_setuid16") ?,
-                          kprobe.function("SyS_setuid") ?,
                           kprobe.function("sys_setuid") ?
 {
 	name = "setuid"
@@ -2723,7 +2579,6 @@ probe nd_syscall.setuid = kprobe.function("sys_setuid16") ?,
 	argstr = sprint(uid)
 }
 probe nd_syscall.setuid.return = kprobe.function("sys_setuid16").return ?,
-                                 kprobe.function("SyS_setuid").return ?,
                                  kprobe.function("sys_setuid").return ?
 {
 	name = "setuid"
@@ -2737,8 +2592,7 @@ probe nd_syscall.setuid.return = kprobe.function("sys_setuid16").return ?,
 #		  size_t size,
 #		  int flags)
 #
-probe nd_syscall.setxattr = kprobe.function("SyS_setxattr") ?,
-                            kprobe.function("sys_setxattr") ?
+probe nd_syscall.setxattr = kprobe.function("sys_setxattr") ?
 {
 	name = "setxattr"
 	// path_uaddr = $path
@@ -2765,8 +2619,7 @@ probe nd_syscall.setxattr = kprobe.function("SyS_setxattr") ?,
 			user_string_quoted(name_uaddr),
 			value_uaddr, size, flags)
 }
-probe nd_syscall.setxattr.return = kprobe.function("SyS_setxattr").return ?,
-                                   kprobe.function("sys_setxattr").return ?
+probe nd_syscall.setxattr.return = kprobe.function("sys_setxattr").return ?
 {
 	name = "setxattr"
 	retstr = returnstr(1)
@@ -2791,8 +2644,7 @@ probe nd_syscall.sgetmask.return = kprobe.function("sys_sgetmask").return ?
 #
 # long sys_shmat(int shmid, char __user *shmaddr, int shmflg)
 #
-probe nd_syscall.shmat = kprobe.function("SyS_shmat") ?,
-                         kprobe.function("sys_shmat") ?
+probe nd_syscall.shmat = kprobe.function("sys_shmat") ?
 {
 	name = "shmat"
 	// shmid = $shmid
@@ -2805,8 +2657,7 @@ probe nd_syscall.shmat = kprobe.function("SyS_shmat") ?,
 	shmflg = int_arg(3)
 	argstr = sprintf("%d, %p, %s", shmid, shmaddr_uaddr, _shmat_flags_str(shmflg))
 }
-probe nd_syscall.shmat.return = kprobe.function("SyS_shmat").return ?,
-                                kprobe.function("sys_shmat").return ?
+probe nd_syscall.shmat.return = kprobe.function("sys_shmat").return ?
 {
 	name = "shmat"
 	retstr = returnstr(1)
@@ -2844,8 +2695,7 @@ probe nd_syscall.compat_sys_shmat.return = kprobe.function("compat_sys_shmat").r
 #		 int cmd,
 #		 struct shmid_ds __user *buf)
 #
-probe nd_syscall.shmctl = kprobe.function("SyS_shmctl") ?,
-                          kprobe.function("sys_shmctl") ?
+probe nd_syscall.shmctl = kprobe.function("sys_shmctl") ?
 {
 	name = "shmctl"
 	// shmid = $shmid
@@ -2858,8 +2708,7 @@ probe nd_syscall.shmctl = kprobe.function("SyS_shmctl") ?,
 	buf_uaddr = pointer_arg(3)
 	argstr = sprintf("%d, %s, %p", shmid, _semctl_cmd(cmd), buf_uaddr)
 }
-probe nd_syscall.shmctl.return = kprobe.function("SyS_shmctl").return ?,
-                                 kprobe.function("sys_shmctl").return ?
+probe nd_syscall.shmctl.return = kprobe.function("sys_shmctl").return ?
 {
 	name = "shmctl"
 	retstr = returnstr(1)
@@ -2892,8 +2741,7 @@ probe nd_syscall.compat_sys_shmctl.return = kprobe.function("compat_sys_shmctl")
 #
 # long sys_shmdt(char __user *shmaddr)
 #
-probe nd_syscall.shmdt = kprobe.function("SyS_shmdt") ?,
-                         kprobe.function("sys_shmdt") ?
+probe nd_syscall.shmdt = kprobe.function("sys_shmdt") ?
 {
 	name = "shmdt"
 	// shmaddr_uaddr = $shmaddr
@@ -2902,8 +2750,7 @@ probe nd_syscall.shmdt = kprobe.function("SyS_shmdt") ?,
 	shmaddr_uaddr = pointer_arg(1)
 	argstr = sprintf("%p", shmaddr_uaddr)
 }
-probe nd_syscall.shmdt.return = kprobe.function("SyS_shmdt").return ?,
-                                kprobe.function("sys_shmdt").return ?
+probe nd_syscall.shmdt.return = kprobe.function("sys_shmdt").return ?
 {
 	name = "shmdt"
 	retstr = returnstr(1)
@@ -2915,8 +2762,7 @@ probe nd_syscall.shmdt.return = kprobe.function("SyS_shmdt").return ?,
 #		 size_t size,
 #		 int shmflg)
 #
-probe nd_syscall.shmget = kprobe.function("SyS_shmget") ?,
-                          kprobe.function("sys_shmget") ?
+probe nd_syscall.shmget = kprobe.function("sys_shmget") ?
 {
 	name = "shmget"
 	// key = $key
@@ -2929,8 +2775,7 @@ probe nd_syscall.shmget = kprobe.function("SyS_shmget") ?,
 	shmflg = int_arg(3)
 	argstr = sprintf("%d, %d, %d", key, size, shmflg)
 }
-probe nd_syscall.shmget.return = kprobe.function("SyS_shmget").return ?,
-                                 kprobe.function("sys_shmget").return ?
+probe nd_syscall.shmget.return = kprobe.function("sys_shmget").return ?
 {
 	name = "shmget"
 	retstr = returnstr(1)
@@ -2940,8 +2785,7 @@ probe nd_syscall.shmget.return = kprobe.function("SyS_shmget").return ?,
 #
 # long sys_shutdown(int fd, int how)
 #
-probe nd_syscall.shutdown = kprobe.function("SyS_shutdown") ?,
-                            kprobe.function("sys_shutdown") ?
+probe nd_syscall.shutdown = kprobe.function("sys_shutdown") ?
 {
 	name = "shutdown"
 	// s = $fd
@@ -2954,8 +2798,7 @@ probe nd_syscall.shutdown = kprobe.function("SyS_shutdown") ?,
 	how_str = _shutdown_how_str(how)
 	argstr = sprintf("%d, %s", s, how_str)
 }
-probe nd_syscall.shutdown.return = kprobe.function("SyS_shutdown").return ?,
-                                   kprobe.function("sys_shutdown").return ?
+probe nd_syscall.shutdown.return = kprobe.function("sys_shutdown").return ?
 {
 	name = "shutdown"
 	retstr = returnstr(1)
@@ -3005,8 +2848,7 @@ probe nd_syscall.sigaction32.return = kprobe.function("sys32_sigaction").return
 # signal _____________________________________________________
 # unsigned long sys_signal(int sig, __sighandler_t handler)
 #
-probe nd_syscall.signal = kprobe.function("SyS_signal") ?,
-                          kprobe.function("sys_signal") ?
+probe nd_syscall.signal = kprobe.function("sys_signal") ?
 {
 	name = "signal"
 	// sig = $sig
@@ -3017,8 +2859,7 @@ probe nd_syscall.signal = kprobe.function("SyS_signal") ?,
 	handler =  pointer_arg(2)
 	argstr = sprintf("%s, %s", _signal_name(sig), _sighandler_str(handler))
 }
-probe nd_syscall.signal.return = kprobe.function("SyS_signal").return ?,
-                                 kprobe.function("sys_signal").return ?
+probe nd_syscall.signal.return = kprobe.function("sys_signal").return ?
 {
 	name = "signal"
 	retstr = returnstr(1)
@@ -3030,16 +2871,14 @@ probe nd_syscall.signal.return = kprobe.function("SyS_signal").return ?,
 # long compat_sys_signalfd(int ufd, const compat_sigset_t __user *sigmask,
 # 		 compat_size_t sigsetsize)
 #
-probe nd_syscall.signalfd = kprobe.function("SyS_signalfd") ?,
-                            kprobe.function("sys_signalfd") ?
+probe nd_syscall.signalfd = kprobe.function("sys_signalfd") ?
 {
 	name = "signalfd"
 	// argstr = sprintf("%d, %p, %d", $ufd, $user_mask, $sizemask)
 	asmlinkage()
 	argstr = sprintf("%d, %p, %d", int_arg(1), pointer_arg(2), ulong_arg(3))
 }
-probe nd_syscall.signalfd.return = kprobe.function("SyS_signalfd").return ?,
-                                   kprobe.function("sys_signalfd").return ?
+probe nd_syscall.signalfd.return = kprobe.function("sys_signalfd").return ?
 {
 	name = "signalfd"
 	retstr = returnstr(1)
@@ -3060,16 +2899,14 @@ probe nd_syscall.compat_signalfd.return = kprobe.function("compat_sys_signalfd")
 # sigpending _________________________________________________
 # long sys_sigpending(old_sigset_t __user *set)
 #
-probe nd_syscall.sigpending = kprobe.function("SyS_sigpending") ?,
-                              kprobe.function("sys_sigpending") ?
+probe nd_syscall.sigpending = kprobe.function("sys_sigpending") ?
 {
 	name = "sigpending"
 	// argstr = sprintf("%p", $set)
 	asmlinkage()
 	argstr = sprintf("%p", pointer_arg(1))
 }
-probe nd_syscall.sigpending.return = kprobe.function("SyS_sigpending").return ?,
-                                     kprobe.function("sys_sigpending").return ?
+probe nd_syscall.sigpending.return = kprobe.function("sys_sigpending").return ?
 {
 	name = "sigpending"
 	retstr = returnstr(1)
@@ -3078,8 +2915,7 @@ probe nd_syscall.sigpending.return = kprobe.function("SyS_sigpending").return ?,
 # sigprocmask ________________________________________________
 # long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset)
 #
-probe nd_syscall.sigprocmask = kprobe.function("SyS_sigprocmask") ?,
-                               kprobe.function("sys_sigprocmask") ?
+probe nd_syscall.sigprocmask = kprobe.function("sys_sigprocmask") ?
 {
 	name = "sigprocmask"
 	// how  = $how
@@ -3094,8 +2930,7 @@ probe nd_syscall.sigprocmask = kprobe.function("SyS_sigprocmask") ?,
 	oldset_uaddr = pointer_arg(3)
 	argstr = sprintf("%s, %p, %p", how_str, set_uaddr, oldset_uaddr)
 }
-probe nd_syscall.sigprocmask.return = kprobe.function("SyS_sigprocmask").return ?,
-                                      kprobe.function("sys_sigprocmask").return ?
+probe nd_syscall.sigprocmask.return = kprobe.function("sys_sigprocmask").return ?
 {
 	name = "sigprocmask"
 	retstr = returnstr(1)
@@ -3135,8 +2970,7 @@ probe nd_syscall.sigsuspend.return = kprobe.function("sys_sigsuspend").return ?,
 # socket _____________________________________________________
 # long sys_socket(int family, int type, int protocol)
 #
-probe nd_syscall.socket = kprobe.function("SyS_socket") ?,
-                          kprobe.function("sys_socket") ?
+probe nd_syscall.socket = kprobe.function("sys_socket") ?
 {
 	name = "socket"
 	// family = $family
@@ -3153,8 +2987,7 @@ probe nd_syscall.socket = kprobe.function("SyS_socket") ?,
 				_sock_type_str(type),
 				protocol)
 }
-probe nd_syscall.socket.return = kprobe.function("SyS_socket").return ?,
-                                 kprobe.function("sys_socket").return ?
+probe nd_syscall.socket.return = kprobe.function("sys_socket").return ?
 {
 	name = "socket"
 	retstr = returnstr(1)
@@ -3184,8 +3017,7 @@ probe nd_syscall.socket.return = kprobe.function("SyS_socket").return ?,
 #		    int protocol,
 #		    int __user *usockvec)
 #
-probe nd_syscall.socketpair = kprobe.function("SyS_socketpair") ?,
-                              kprobe.function("sys_socketpair") ?
+probe nd_syscall.socketpair = kprobe.function("sys_socketpair") ?
 {
 	name = "socketpair"
 	// family = $family
@@ -3206,8 +3038,7 @@ probe nd_syscall.socketpair = kprobe.function("SyS_socketpair") ?,
 				_sock_type_str(type),
 				protocol, sv_uaddr)
 }
-probe nd_syscall.socketpair.return = kprobe.function("SyS_socketpair").return ?,
-                                     kprobe.function("sys_socketpair").return ?
+probe nd_syscall.socketpair.return = kprobe.function("sys_socketpair").return ?
 {
 	name = "socketpair"
 	retstr = returnstr(1)
@@ -3219,8 +3050,7 @@ probe nd_syscall.socketpair.return = kprobe.function("SyS_socketpair").return ?,
 #		   int fd_out, loff_t __user *off_out,
 #		   size_t len, unsigned int flags)
 #
-probe nd_syscall.splice = kprobe.function("SyS_splice") ?,
-                          kprobe.function("sys_splice") ?
+probe nd_syscall.splice = kprobe.function("sys_splice") ?
 {
 	name = "splice"
 	// argstr = sprintf("%d, %p, %d, %p, %d, 0x%x",
@@ -3229,8 +3059,7 @@ probe nd_syscall.splice = kprobe.function("SyS_splice") ?,
 	argstr = sprintf("%d, %p, %d, %p, %d, 0x%x",
 		int_arg(1), pointer_arg(2), int_arg(3), pointer_arg(4), ulong_arg(5), uint_arg(6))
 }
-probe nd_syscall.splice.return = kprobe.function("SyS_splice").return ?,
-                                 kprobe.function("sys_splice").return ?
+probe nd_syscall.splice.return = kprobe.function("sys_splice").return ?
 {
 	name = "splice"
 	retstr = returnstr(1)
@@ -3240,8 +3069,7 @@ probe nd_syscall.splice.return = kprobe.function("SyS_splice").return ?,
 #
 # long sys_ssetmask(int newmask)
 #
-probe nd_syscall.ssetmask = kprobe.function("SyS_ssetmask") ?,
-                            kprobe.function("sys_ssetmask") ?
+probe nd_syscall.ssetmask = kprobe.function("sys_ssetmask") ?
 {
 	name = "ssetmask"
 	// newmask = $newmask
@@ -3250,8 +3078,7 @@ probe nd_syscall.ssetmask = kprobe.function("SyS_ssetmask") ?,
 	newmask = int_arg(1)
 	argstr = sprint(newmask)
 }
-probe nd_syscall.ssetmask.return = kprobe.function("SyS_ssetmask").return ?,
-                                   kprobe.function("sys_ssetmask").return ?
+probe nd_syscall.ssetmask.return = kprobe.function("sys_ssetmask").return ?
 {
 	name = "ssetmask"
 	retstr = returnstr(1)
@@ -3264,10 +3091,8 @@ probe nd_syscall.ssetmask.return = kprobe.function("SyS_ssetmask").return ?,
 # long sys_oabi_stat64(char __user * filename, struct oldabi_stat64 __user * statbuf)
 # long compat_sys_newstat(char __user * filename, struct compat_stat __user *statbuf)
 probe nd_syscall.stat = kprobe.function("sys_stat") ?,
-                        kprobe.function("SyS_newstat") ?,
                         kprobe.function("sys_newstat") ?,
                         kprobe.function("sys32_stat64") ?,
-                        kprobe.function("SyS_stat64") ?,
                         kprobe.function("sys_stat64") ?,
                         kprobe.function("sys_oabi_stat64") ?,
                         kprobe.function("compat_sys_newstat") ?
@@ -3284,10 +3109,8 @@ probe nd_syscall.stat = kprobe.function("sys_stat") ?,
 	argstr = sprintf("%s, %p", user_string_quoted(filename_uaddr), buf_uaddr)
 }
 probe nd_syscall.stat.return = kprobe.function("sys_stat").return ?,
-                               kprobe.function("SyS_newstat").return ?,
                                kprobe.function("sys_newstat").return ?,
                                kprobe.function("sys32_stat64").return ?,
-                               kprobe.function("SyS_stat64").return ?,
                                kprobe.function("sys_stat64").return ?,
                                kprobe.function("sys_oabi_stat64").return ?,
                                kprobe.function("compat_sys_newstat").return ?
@@ -3301,7 +3124,6 @@ probe nd_syscall.stat.return = kprobe.function("sys_stat").return ?,
 # long compat_sys_statfs(const char __user *path, struct compat_statfs __user *buf)
 #
 probe nd_syscall.statfs = kprobe.function("compat_sys_statfs") ?,
-                          kprobe.function("SyS_statfs") ?,
                           kprobe.function("sys_statfs") ?
 {
 	name = "statfs"
@@ -3314,7 +3136,6 @@ probe nd_syscall.statfs = kprobe.function("compat_sys_statfs") ?,
 	argstr = sprintf("%s, %p", user_string_quoted(pointer_arg(1)), buf_uaddr)
 }
 probe nd_syscall.statfs.return = kprobe.function("compat_sys_statfs").return ?,
-                                 kprobe.function("SyS_statfs").return ?,
                                  kprobe.function("sys_statfs").return ?
 {
 	name = "statfs"
@@ -3327,7 +3148,6 @@ probe nd_syscall.statfs.return = kprobe.function("compat_sys_statfs").return ?,
 # long compat_sys_statfs64(const char __user *path, compat_size_t sz, struct compat_statfs64 __user *buf)
 #
 probe nd_syscall.statfs64 = kprobe.function("compat_sys_statfs64") ?,
-                            kprobe.function("SyS_statfs64") ?,
                             kprobe.function("sys_statfs64") ?
 {
 	name = "statfs"
@@ -3342,7 +3162,6 @@ probe nd_syscall.statfs64 = kprobe.function("compat_sys_statfs64") ?,
 	argstr = sprintf("%s, %d, %p", user_string_quoted(pointer_arg(1)), sz, buf_uaddr)
 }
 probe nd_syscall.statfs64.return = kprobe.function("compat_sys_statfs64").return ?,
-                                   kprobe.function("SyS_statfs64").return ?,
                                    kprobe.function("sys_statfs64").return ?
 {
 	name = "statfs"
@@ -3355,7 +3174,6 @@ probe nd_syscall.statfs64.return = kprobe.function("compat_sys_statfs64").return
 # long compat_sys_stime(compat_time_t __user *tptr)
 #
 probe nd_syscall.stime = kprobe.function("compat_sys_stime") ?,
-                         kprobe.function("SyS_stime") ?,
                          kprobe.function("sys_stime") ?
 {
 	name = "stime"
@@ -3367,7 +3185,6 @@ probe nd_syscall.stime = kprobe.function("compat_sys_stime") ?,
 	argstr = sprintf("%p", t_uaddr)
 }
 probe nd_syscall.stime.return = kprobe.function("compat_sys_stime").return ?,
-                                kprobe.function("SyS_stime").return ?,
                                 kprobe.function("sys_stime").return ?
 {
 	name = "stime"
@@ -3379,8 +3196,7 @@ probe nd_syscall.stime.return = kprobe.function("compat_sys_stime").return ?,
 # asmlinkage long
 # sys_swapoff(const char __user * specialfile)
 #
-probe nd_syscall.swapoff = kprobe.function("SyS_swapoff") ?,
-                           kprobe.function("sys_swapoff") ?
+probe nd_syscall.swapoff = kprobe.function("sys_swapoff") ?
 {
 	name = "swapoff"
 	// path = user_string($specialfile)
@@ -3389,8 +3205,7 @@ probe nd_syscall.swapoff = kprobe.function("SyS_swapoff") ?,
 	path = user_string(pointer_arg(1))
 	argstr = user_string_quoted(pointer_arg(1))
 }
-probe nd_syscall.swapoff.return = kprobe.function("SyS_swapoff").return ?,
-                                  kprobe.function("sys_swapoff").return ?
+probe nd_syscall.swapoff.return = kprobe.function("sys_swapoff").return ?
 {
 	name = "swapoff"
 	retstr = returnstr(1)
@@ -3402,8 +3217,7 @@ probe nd_syscall.swapoff.return = kprobe.function("SyS_swapoff").return ?,
 # sys_swapon(const char __user * specialfile,
 #		int swap_flags)
 #
-probe nd_syscall.swapon = kprobe.function("SyS_swapon") ?,
-                          kprobe.function("sys_swapon") ?
+probe nd_syscall.swapon = kprobe.function("sys_swapon") ?
 {
 	name = "swapon"
 	// path = user_string($specialfile)
@@ -3414,8 +3228,7 @@ probe nd_syscall.swapon = kprobe.function("SyS_swapon") ?,
 	swapflags = int_arg(2)
 	argstr = sprintf("%s, %d", user_string_quoted(pointer_arg(1)), swapflags)
 }
-probe nd_syscall.swapon.return = kprobe.function("SyS_swapon").return ?,
-                                 kprobe.function("sys_swapon").return ?
+probe nd_syscall.swapon.return = kprobe.function("sys_swapon").return ?
 {
 	name = "swapon"
 	retstr = returnstr(1)
@@ -3424,8 +3237,7 @@ probe nd_syscall.swapon.return = kprobe.function("SyS_swapon").return ?,
 # symlink ____________________________________________________
 # long sys_symlink(const char __user * oldname,
 #		 const char __user * newname)
-probe nd_syscall.symlink = kprobe.function("SyS_symlink") ?,
-                           kprobe.function("sys_symlink") ?
+probe nd_syscall.symlink = kprobe.function("sys_symlink") ?
 {
 	name = "symlink"
 	// oldpath = user_string($oldname)
@@ -3438,8 +3250,7 @@ probe nd_syscall.symlink = kprobe.function("SyS_symlink") ?,
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
 			user_string_quoted(pointer_arg(2)))
 }
-probe nd_syscall.symlink.return = kprobe.function("SyS_symlink").return ?,
-                                  kprobe.function("sys_symlink").return ?
+probe nd_syscall.symlink.return = kprobe.function("sys_symlink").return ?
 {
 	name = "symlink"
 	retstr = returnstr(1)
@@ -3449,8 +3260,7 @@ probe nd_syscall.symlink.return = kprobe.function("SyS_symlink").return ?,
 # new function with 2.6.16
 # long sys_symlinkat(const char __user *oldname, int newdfd,
 #	const char __user *newname)
-probe nd_syscall.symlinkat = kprobe.function("SyS_symlinkat") ?,
-                             kprobe.function("sys_symlinkat") ?
+probe nd_syscall.symlinkat = kprobe.function("sys_symlinkat") ?
 {
 	name = "symlinkat"
 //	oldname = $oldname
@@ -3471,8 +3281,7 @@ probe nd_syscall.symlinkat = kprobe.function("SyS_symlinkat") ?,
 	argstr = sprintf("%s, %s, %s", user_string_quoted(oldname),
 		newdfd_str, user_string_quoted(newname))
 }
-probe nd_syscall.symlinkat.return = kprobe.function("SyS_symlinkat").return ?,
-                                    kprobe.function("sys_symlinkat").return ?
+probe nd_syscall.symlinkat.return = kprobe.function("sys_symlinkat").return ?
 {
 	name = "symlinkat"
 	retstr = returnstr(1)
@@ -3498,7 +3307,6 @@ probe nd_syscall.sync.return = kprobe.function("sys_sync").return
 # long sys_sysctl(struct __sysctl_args __user *args)
 #
 probe nd_syscall.sysctl = kprobe.function("compat_sys_sysctl") ?,
-                          kprobe.function("SyS_sysctl") ?,
                           kprobe.function("sys_sysctl") ?
 {
 	name = "sysctl"
@@ -3507,7 +3315,6 @@ probe nd_syscall.sysctl = kprobe.function("compat_sys_sysctl") ?,
 	argstr = sprintf("%p", pointer_arg(1))
 }
 probe nd_syscall.sysctl.return = kprobe.function("compat_sys_sysctl").return ?,
-                                 kprobe.function("SyS_sysctl").return ?,
                                  kprobe.function("sys_sysctl").return ?
 {
 	name = "sysctl"
@@ -3521,8 +3328,7 @@ probe nd_syscall.sysctl.return = kprobe.function("compat_sys_sysctl").return ?,
 #	     unsigned long arg1,
 #	     unsigned long arg2)
 #
-probe nd_syscall.sysfs = kprobe.function("SyS_sysfs") ?,
-                         kprobe.function("sys_sysfs") ?
+probe nd_syscall.sysfs = kprobe.function("sys_sysfs") ?
 {
 	name = "sysfs"
 	// option = $option
@@ -3547,8 +3353,7 @@ probe nd_syscall.sysfs = kprobe.function("SyS_sysfs") ?,
 	else
 		argstr = sprintf("%d, %d, %d", option, arg1, arg2)
 }
-probe nd_syscall.sysfs.return = kprobe.function("SyS_sysfs").return ?,
-                                kprobe.function("sys_sysfs").return ?
+probe nd_syscall.sysfs.return = kprobe.function("sys_sysfs").return ?
 {
 	name = "sysfs"
 	retstr = returnstr(1)
@@ -3559,7 +3364,6 @@ probe nd_syscall.sysfs.return = kprobe.function("SyS_sysfs").return ?,
 # long sys_sysinfo(struct sysinfo __user *info)
 # long compat_sys_sysinfo(struct compat_sysinfo __user *info)
 probe nd_syscall.sysinfo = kprobe.function("compat_sys_sysinfo") ?,
-                           kprobe.function("SyS_sysinfo") ?,
                            kprobe.function("sys_sysinfo") ?
 {
 	name = "sysinfo"
@@ -3570,7 +3374,6 @@ probe nd_syscall.sysinfo = kprobe.function("compat_sys_sysinfo") ?,
 	argstr = sprintf("%p", info_uaddr)
 }
 probe nd_syscall.sysinfo.return = kprobe.function("compat_sys_sysinfo").return ?,
-                                  kprobe.function("SyS_sysinfo").return ?,
                                   kprobe.function("sys_sysinfo").return ?
 {
 	name = "sysinfo"
@@ -3581,8 +3384,7 @@ probe nd_syscall.sysinfo.return = kprobe.function("compat_sys_sysinfo").return ?
 #
 # long sys_syslog(int type, char __user * buf, int len)
 #
-probe nd_syscall.syslog = kprobe.function("SyS_syslog") ?,
-                          kprobe.function("sys_syslog") ?
+probe nd_syscall.syslog = kprobe.function("sys_syslog") ?
 {
 	name = "syslog"
 	// type = $type
@@ -3595,8 +3397,7 @@ probe nd_syscall.syslog = kprobe.function("SyS_syslog") ?,
 	len = int_arg(3)
 	argstr = sprintf("%d, %p, %d", type, bufp_uaddr, len)
 }
-probe nd_syscall.syslog.return = kprobe.function("SyS_syslog").return ?,
-                                 kprobe.function("sys_syslog").return ?
+probe nd_syscall.syslog.return = kprobe.function("sys_syslog").return ?
 {
 	name = "syslog"
 	retstr = returnstr(1)
@@ -3606,16 +3407,14 @@ probe nd_syscall.syslog.return = kprobe.function("SyS_syslog").return ?,
 #
 # long sys_tee(int fdin, int fdout, size_t len, unsigned int flags)
 #
-probe nd_syscall.tee = kprobe.function("SyS_tee") ?,
-                       kprobe.function("sys_tee") ?
+probe nd_syscall.tee = kprobe.function("sys_tee") ?
 {
 	name = "tee"
 	// argstr = sprintf("%d, %d, %d, 0x%x", $fdin, $fdout, $len, $flags)
 	asmlinkage()
 	argstr = sprintf("%d, %d, %d, 0x%x", int_arg(1), int_arg(2), ulong_arg(3), uint_arg(4))
 }
-probe nd_syscall.tee.return = kprobe.function("SyS_tee").return ?,
-                              kprobe.function("sys_tee").return ?
+probe nd_syscall.tee.return = kprobe.function("sys_tee").return ?
 {
 	name = "tee"
 	retstr = returnstr(1)
@@ -3628,8 +3427,7 @@ probe nd_syscall.tee.return = kprobe.function("SyS_tee").return ?,
 #		int pid,
 #		int sig)
 #
-probe nd_syscall.tgkill = kprobe.function("SyS_tgkill") ?,
-                          kprobe.function("sys_tgkill") ?
+probe nd_syscall.tgkill = kprobe.function("sys_tgkill") ?
 {
 	name = "tgkill"
 	// tgid = $tgid
@@ -3642,8 +3440,7 @@ probe nd_syscall.tgkill = kprobe.function("SyS_tgkill") ?,
 	sig = int_arg(3)
 	argstr = sprintf("%d, %d, %s", tgid, pid, _signal_name(sig))
 }
-probe nd_syscall.tgkill.return = kprobe.function("SyS_tgkill").return ?,
-                                 kprobe.function("sys_tgkill").return ?
+probe nd_syscall.tgkill.return = kprobe.function("sys_tgkill").return ?
 {
 	name = "tgkill"
 	retstr = returnstr(1)
@@ -3659,7 +3456,6 @@ probe nd_syscall.tgkill.return = kprobe.function("SyS_tgkill").return ?,
 probe nd_syscall.time = kprobe.function("sys32_time") ?,
                         kprobe.function("sys_time64") ?,
                         kprobe.function("compat_sys_time") ?,
-                        kprobe.function("SyS_time") ?,
                         kprobe.function("sys_time") ?
 {
 	name = "time"
@@ -3672,7 +3468,6 @@ probe nd_syscall.time = kprobe.function("sys32_time") ?,
 probe nd_syscall.time.return = kprobe.function("sys32_time").return ?,
                                kprobe.function("sys_time64").return ?,
                                kprobe.function("compat_sys_time").return ?,
-                               kprobe.function("SyS_time").return ?,
                                kprobe.function("sys_time").return ?
 {
 	name = "time"
@@ -3685,8 +3480,7 @@ probe nd_syscall.time.return = kprobe.function("sys32_time").return ?,
 #			struct sigevent __user *timer_event_spec,
 #			timer_t __user * created_timer_id)
 #
-probe nd_syscall.timer_create = kprobe.function("SyS_timer_create") ?,
-                                kprobe.function("sys_timer_create") ?
+probe nd_syscall.timer_create = kprobe.function("sys_timer_create") ?
 {
 	name = "timer_create"
 	// clockid = $which_clock
@@ -3701,8 +3495,7 @@ probe nd_syscall.timer_create = kprobe.function("SyS_timer_create") ?,
 	timerid_uaddr = pointer_arg(3)
 	argstr = sprintf("%s, %p, %p", clockid_str, evp_uaddr, timerid_uaddr)
 }
-probe nd_syscall.timer_create.return = kprobe.function("SyS_timer_create").return ?,
-                                       kprobe.function("sys_timer_create").return ?
+probe nd_syscall.timer_create.return = kprobe.function("sys_timer_create").return ?
 {
 	name = "timer_create"
 	retstr = returnstr(1)
@@ -3712,8 +3505,7 @@ probe nd_syscall.timer_create.return = kprobe.function("SyS_timer_create").retur
 #
 # long sys_timer_delete(timer_t timer_id)
 #
-probe nd_syscall.timer_delete = kprobe.function("SyS_timer_delete") ?,
-                                kprobe.function("sys_timer_delete") ?
+probe nd_syscall.timer_delete = kprobe.function("sys_timer_delete") ?
 {
 	name = "timer_delete"
 	// timerid = $timer_id
@@ -3722,8 +3514,7 @@ probe nd_syscall.timer_delete = kprobe.function("SyS_timer_delete") ?,
 	timerid = int_arg(1)
 	argstr = sprint(timerid)
 }
-probe nd_syscall.timer_delete.return = kprobe.function("SyS_timer_delete").return ?,
-                                       kprobe.function("sys_timer_delete").return ?
+probe nd_syscall.timer_delete.return = kprobe.function("sys_timer_delete").return ?
 {
 	name = "timer_delete"
 	retstr = returnstr(1)
@@ -3733,8 +3524,7 @@ probe nd_syscall.timer_delete.return = kprobe.function("SyS_timer_delete").retur
 #
 # long sys_timer_getoverrun(timer_t timer_id)
 #
-probe nd_syscall.timer_getoverrun = kprobe.function("SyS_timer_getoverrun") ?,
-                                    kprobe.function("sys_timer_getoverrun") ?
+probe nd_syscall.timer_getoverrun = kprobe.function("sys_timer_getoverrun") ?
 {
 	name = "timer_getoverrun"
 	// timerid = $timer_id
@@ -3743,8 +3533,7 @@ probe nd_syscall.timer_getoverrun = kprobe.function("SyS_timer_getoverrun") ?,
 	timerid = int_arg(1)
 	argstr = sprint(timerid)
 }
-probe nd_syscall.timer_getoverrun.return = kprobe.function("SyS_timer_getoverrun").return ?,
-                                           kprobe.function("sys_timer_getoverrun").return ?
+probe nd_syscall.timer_getoverrun.return = kprobe.function("sys_timer_getoverrun").return ?
 {
 	name = "timer_getoverrun"
 	retstr = returnstr(1)
@@ -3755,8 +3544,7 @@ probe nd_syscall.timer_getoverrun.return = kprobe.function("SyS_timer_getoverrun
 # long sys_timer_gettime(timer_t timer_id,
 #			 struct itimerspec __user *setting)
 #
-probe nd_syscall.timer_gettime = kprobe.function("SyS_timer_gettime") ?,
-                                 kprobe.function("sys_timer_gettime") ?
+probe nd_syscall.timer_gettime = kprobe.function("sys_timer_gettime") ?
 {
 	name = "timer_gettime"
 	// timerid = $timer_id
@@ -3767,8 +3555,7 @@ probe nd_syscall.timer_gettime = kprobe.function("SyS_timer_gettime") ?,
 	value_uaddr = pointer_arg(2)
 	argstr = sprintf("%d, %p", timerid, value_uaddr)
 }
-probe nd_syscall.timer_gettime.return = kprobe.function("SyS_timer_gettime").return ?,
-                                        kprobe.function("sys_timer_gettime").return ?
+probe nd_syscall.timer_gettime.return = kprobe.function("sys_timer_gettime").return ?
 {
 	name = "timer_gettime"
 	retstr = returnstr(1)
@@ -3781,8 +3568,7 @@ probe nd_syscall.timer_gettime.return = kprobe.function("SyS_timer_gettime").ret
 #			 const struct itimerspec __user *new_setting,
 #			 struct itimerspec __user *old_setting)
 #
-probe nd_syscall.timer_settime = kprobe.function("SyS_timer_settime") ?,
-                                 kprobe.function("sys_timer_settime") ?
+probe nd_syscall.timer_settime = kprobe.function("sys_timer_settime") ?
 {
 	name = "timer_settime"
 	// timerid = $timer_id
@@ -3801,8 +3587,7 @@ probe nd_syscall.timer_settime = kprobe.function("SyS_timer_settime") ?,
 				_struct_itimerspec_u(value_uaddr),
 				ovalue_uaddr)
 }
-probe nd_syscall.timer_settime.return = kprobe.function("SyS_timer_settime").return ?,
-                                        kprobe.function("sys_timer_settime").return ?
+probe nd_syscall.timer_settime.return = kprobe.function("sys_timer_settime").return ?
 {
 	name = "timer_settime"
 	retstr = returnstr(1)
@@ -3835,7 +3620,6 @@ probe nd_syscall.timerfd.return = kprobe.function("sys_timerfd").return ?,
 # long sys_times(struct tms __user * tbuf)
 # long compat_sys_times(struct compat_tms __user *tbuf)
 probe nd_syscall.times = kprobe.function("compat_sys_times") ?,
-                         kprobe.function("SyS_times") ?,
                          kprobe.function("sys_times") ?
 {
 	name = "times"
@@ -3844,7 +3628,6 @@ probe nd_syscall.times = kprobe.function("compat_sys_times") ?,
 	argstr = sprintf("%p", pointer_arg(1))
 }
 probe nd_syscall.times.return = kprobe.function("compat_sys_times").return ?,
-                                kprobe.function("SyS_times").return ?,
                                 kprobe.function("sys_times").return ?
 {
 	name = "times"
@@ -3857,8 +3640,7 @@ probe nd_syscall.times.return = kprobe.function("compat_sys_times").return ?,
 # sys_tkill(int pid,
 #	     int sig)
 #
-probe nd_syscall.tkill = kprobe.function("SyS_tkill") ?,
-                         kprobe.function("sys_tkill") ?
+probe nd_syscall.tkill = kprobe.function("sys_tkill") ?
 {
 	name = "tkill"
 	// pid = $pid
@@ -3869,8 +3651,7 @@ probe nd_syscall.tkill = kprobe.function("SyS_tkill") ?,
 	sig = int_arg(2)
 	argstr = sprintf("%d, %s", pid, _signal_name(sig))
 }
-probe nd_syscall.tkill.return = kprobe.function("SyS_tkill").return ?,
-                                kprobe.function("sys_tkill").return ?
+probe nd_syscall.tkill.return = kprobe.function("sys_tkill").return ?
 {
 	name = "tkill"
 	retstr = returnstr(1)
@@ -3881,8 +3662,7 @@ probe nd_syscall.tkill.return = kprobe.function("SyS_tkill").return ?,
 # sys_truncate(const char __user * path, unsigned long length)
 # sys_truncate64(const char __user * path, loff_t length)
 #
-probe nd_syscall.truncate = kprobe.function("SyS_truncate") ?,
-                            kprobe.function("sys_truncate") ?,
+probe nd_syscall.truncate = kprobe.function("sys_truncate") ?,
                             kprobe.function("sys_truncate64") ?
 {
 	name = "truncate"
@@ -3899,8 +3679,7 @@ probe nd_syscall.truncate = kprobe.function("SyS_truncate") ?,
 		length = longlong_arg(2)
 	argstr = sprintf("%s, %d", user_string_quoted(path_uaddr), length)
 }
-probe nd_syscall.truncate.return = kprobe.function("SyS_truncate").return ?,
-                                   kprobe.function("sys_truncate").return ?,
+probe nd_syscall.truncate.return = kprobe.function("sys_truncate").return ?,
                                    kprobe.function("sys_truncate64").return ?
 {
 	name = "truncate"
@@ -3931,8 +3710,7 @@ probe nd_syscall.tux.return = kprobe.function("sys_tux").return ?
 # umask ______________________________________________________
 # long sys_umask(int mask)
 #
-probe nd_syscall.umask = kprobe.function("SyS_umask") ?,
-                         kprobe.function("sys_umask") ?
+probe nd_syscall.umask = kprobe.function("sys_umask") ?
 {
 	name = "umask"
 	// mask = $mask
@@ -3941,8 +3719,7 @@ probe nd_syscall.umask = kprobe.function("SyS_umask") ?,
 	mask = int_arg(1)
 	argstr = sprintf("%#o", mask)
 }
-probe nd_syscall.umask.return = kprobe.function("SyS_umask").return ?,
-                                kprobe.function("sys_umask").return ?
+probe nd_syscall.umask.return = kprobe.function("sys_umask").return ?
 {
 	name = "umask"
 	retstr = returnstr(3)
@@ -3951,8 +3728,7 @@ probe nd_syscall.umask.return = kprobe.function("SyS_umask").return ?,
 # umount _____________________________________________________
 # long sys_umount(char __user * name, int flags)
 #
-probe nd_syscall.umount = kprobe.function("SyS_umount") ?,
-                          kprobe.function("sys_umount") ?
+probe nd_syscall.umount = kprobe.function("sys_umount") ?
 {
 	name = "umount"
 	// target = user_string($name)
@@ -3965,8 +3741,7 @@ probe nd_syscall.umount = kprobe.function("SyS_umount") ?,
 	flags_str = _umountflags_str(flags)
 	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)), flags_str)
 }
-probe nd_syscall.umount.return = kprobe.function("SyS_umount").return ?,
-                                 kprobe.function("sys_umount").return ?
+probe nd_syscall.umount.return = kprobe.function("sys_umount").return ?
 {
 	name = "umount"
 	retstr = returnstr(1)
@@ -3984,7 +3759,6 @@ probe nd_syscall.uname = kprobe.function("sys_uname") ?,
                          kprobe.function("sys_olduname") ?,
                          kprobe.function("sys32_olduname") ?,
                          kprobe.function("sys32_uname") ?,
-                         kprobe.function("SyS_newuname") ?,
                          kprobe.function("sys_newuname") ?
 {
 	name = "uname"
@@ -4003,7 +3777,6 @@ probe nd_syscall.uname.return = kprobe.function("sys_uname").return ?,
                                 kprobe.function("sys_olduname").return ?,
                                 kprobe.function("sys32_olduname").return ?,
                                 kprobe.function("sys32_uname").return ?,
-                                kprobe.function("SyS_newuname").return ?,
                                 kprobe.function("sys_newuname").return ?
 {
 	name = "uname"
@@ -4013,8 +3786,7 @@ probe nd_syscall.uname.return = kprobe.function("sys_uname").return ?,
 # unlink _____________________________________________________
 # long sys_unlink(const char __user * pathname)
 #
-probe nd_syscall.unlink = kprobe.function("SyS_unlink") ?,
-                          kprobe.function("sys_unlink") ?
+probe nd_syscall.unlink = kprobe.function("sys_unlink") ?
 {
 	name = "unlink"
 	// pathname_uaddr = $pathname
@@ -4025,8 +3797,7 @@ probe nd_syscall.unlink = kprobe.function("SyS_unlink") ?,
 	pathname = user_string(pathname_uaddr)
 	argstr = user_string_quoted(pathname_uaddr)
 }
-probe nd_syscall.unlink.return = kprobe.function("SyS_unlink").return ?,
-                                 kprobe.function("sys_unlink").return ?
+probe nd_syscall.unlink.return = kprobe.function("sys_unlink").return ?
 {
 	name = "unlink"
 	retstr = returnstr(1)
@@ -4036,8 +3807,7 @@ probe nd_syscall.unlink.return = kprobe.function("SyS_unlink").return ?,
 # new function with 2.6.16
 # long sys_unlinkat(int dfd, const char __user *pathname,
 #	int flag)
-probe nd_syscall.unlinkat = kprobe.function("SyS_unlinkat") ?,
-                            kprobe.function("sys_unlinkat") ?
+probe nd_syscall.unlinkat = kprobe.function("sys_unlinkat") ?
 {
 	name = "unlinkat"
 	// dfd = $dfd
@@ -4056,8 +3826,7 @@ probe nd_syscall.unlinkat = kprobe.function("SyS_unlinkat") ?,
 	flag_str = _at_flag_str(flag)
 	argstr = sprintf("%s, %s, %s", dfd_str, user_string_quoted(pathname), flag_str)
 }
-probe nd_syscall.unlinkat.return = kprobe.function("SyS_unlinkat").return ?,
-                                   kprobe.function("sys_unlinkat").return ?
+probe nd_syscall.unlinkat.return = kprobe.function("sys_unlinkat").return ?
 {
 	name = "unlinkat"
 	retstr = returnstr(1)
@@ -4066,8 +3835,7 @@ probe nd_syscall.unlinkat.return = kprobe.function("SyS_unlinkat").return ?,
 # unshare ____________________________________________________
 # new function with 2.6.16
 # long sys_unshare(unsigned long unshare_flags)
-probe nd_syscall.unshare = kprobe.function("SyS_unshare") ?,
-                           kprobe.function("sys_unshare") ?
+probe nd_syscall.unshare = kprobe.function("sys_unshare") ?
 {
 	name = "unshare"
 	// unshare_flags = $unshare_flags
@@ -4075,8 +3843,7 @@ probe nd_syscall.unshare = kprobe.function("SyS_unshare") ?,
 	unshare_flags = ulong_arg(1)
 	argstr = __fork_flags(unshare_flags)
 }
-probe nd_syscall.unshare.return = kprobe.function("SyS_unshare").return ?,
-                                  kprobe.function("sys_unshare").return ?
+probe nd_syscall.unshare.return = kprobe.function("sys_unshare").return ?
 {
 	name = "unshare"
 	retstr = returnstr(1)
@@ -4087,8 +3854,7 @@ probe nd_syscall.unshare.return = kprobe.function("SyS_unshare").return ?,
 # asmlinkage long
 # sys_uselib(const char __user * library)
 #
-probe nd_syscall.uselib = kprobe.function("SyS_uselib") ?,
-                          kprobe.function("sys_uselib") ?
+probe nd_syscall.uselib = kprobe.function("sys_uselib") ?
 {
 	name = "uselib"
 	// library_uaddr = $library
@@ -4099,8 +3865,7 @@ probe nd_syscall.uselib = kprobe.function("SyS_uselib") ?,
 	library = user_string(library_uaddr)
 	argstr = user_string_quoted(library_uaddr)
 }
-probe nd_syscall.uselib.return = kprobe.function("SyS_uselib").return ?,
-                                 kprobe.function("sys_uselib").return ?
+probe nd_syscall.uselib.return = kprobe.function("sys_uselib").return ?
 {
 	name = "uselib"
 	retstr = returnstr(1)
@@ -4109,8 +3874,7 @@ probe nd_syscall.uselib.return = kprobe.function("SyS_uselib").return ?,
 # ustat ______________________________________________________
 # long sys_ustat(unsigned dev, struct ustat __user * ubuf)
 #
-probe nd_syscall.ustat = kprobe.function("SyS_ustat") ?,
-                         kprobe.function("sys_ustat") ?
+probe nd_syscall.ustat = kprobe.function("sys_ustat") ?
 {
 	name = "ustat"
 	// dev = $dev
@@ -4145,8 +3909,7 @@ probe nd_syscall.ustat32 = kprobe.function("compat_sys_ustat") ?
 	argstr = sprintf("%d, %p", dev, pointer_arg(2))
 }
 
-probe nd_syscall.ustat.return = kprobe.function("SyS_ustat").return ?,
-                                kprobe.function("sys_ustat").return ?,
+probe nd_syscall.ustat.return = kprobe.function("sys_ustat").return ?,
                                 kprobe.function("sys32_ustat").return ?,
                                 kprobe.function("compat_sys_ustat").return ?
 {
@@ -4156,8 +3919,7 @@ probe nd_syscall.ustat.return = kprobe.function("SyS_ustat").return ?,
 
 # utime ______________________________________________________
 # long sys_utime(char __user * filename, struct utimbuf __user * times)
-probe nd_syscall.utime = kprobe.function("SyS_utime") ?,
-                         kprobe.function("sys_utime") ?
+probe nd_syscall.utime = kprobe.function("sys_utime") ?
 {
 	name = "utime"
 	asmlinkage()
@@ -4169,8 +3931,7 @@ probe nd_syscall.utime = kprobe.function("SyS_utime") ?,
 	argstr = sprintf("%s, [%s, %s]", filename,
 	       	 	 ctime(actime), ctime(modtime))
 }
-probe nd_syscall.utime.return = kprobe.function("SyS_utime").return ?,
-                                kprobe.function("sys_utime").return ?
+probe nd_syscall.utime.return = kprobe.function("sys_utime").return ?
 {
 	name = "utime"
 	retstr = returnstr(1)
@@ -4199,8 +3960,7 @@ probe nd_syscall.compat_utime.return = kprobe.function("compat_sys_utime").retur
 #
 # long sys_utimes(char __user * filename, struct timeval __user * utimes)
 #
-probe nd_syscall.utimes = kprobe.function("SyS_utimes") ?,
-                          kprobe.function("sys_utimes") ?
+probe nd_syscall.utimes = kprobe.function("sys_utimes") ?
 {
 	name = "utimes"
 	// filename_uaddr = $filename
@@ -4215,8 +3975,7 @@ probe nd_syscall.utimes = kprobe.function("SyS_utimes") ?,
 	argstr = sprintf("%s, %s", user_string_quoted(filename_uaddr),
 		_struct_timeval_u(tvp_uaddr, 2))
 }
-probe nd_syscall.utimes.return = kprobe.function("SyS_utimes").return ?,
-                                 kprobe.function("sys_utimes").return ?
+probe nd_syscall.utimes.return = kprobe.function("sys_utimes").return ?
 {
 	name = "utimes"
 	retstr = returnstr(1)
@@ -4247,8 +4006,7 @@ probe nd_syscall.compat_sys_utimes.return = kprobe.function("compat_sys_utimes")
 # long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags)
 # long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)
 #
-probe nd_syscall.utimensat = kprobe.function("SyS_utimensat") ?,
-                             kprobe.function("sys_utimensat") ?
+probe nd_syscall.utimensat = kprobe.function("sys_utimensat") ?
 {
 	name = "utimensat"
 	// argstr = sprintf("%s, %s, %s, %s", _dfd_str($dfd), user_string_quoted($filename), _struct_timespec_u($utimes, 2),
@@ -4266,8 +4024,7 @@ probe nd_syscall.compat_utimensat = kprobe.function("compat_sys_utimensat") ?
 	argstr = sprintf("%s, %s, %s, %s", _dfd_str(uint_arg(1)), user_string_quoted(pointer_arg(2)),
 				 _struct_compat_timespec_u(pointer_arg(3), 2), _at_flag_str(int_arg(4)))
 }
-probe nd_syscall.utimensat.return = kprobe.function("SyS_utimensat").return ?,
-                                    kprobe.function("sys_utimensat").return ?
+probe nd_syscall.utimensat.return = kprobe.function("sys_utimensat").return ?
 {
 	name = "utimensat"
 	retstr = returnstr(1)
@@ -4301,8 +4058,7 @@ probe nd_syscall.vhangup.return = kprobe.function("sys_vhangup").return
 # long compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,
 #	    unsigned int nr_segs, unsigned int flags)
 #
-probe nd_syscall.vmsplice = kprobe.function("SyS_vmsplice") ?,
-                            kprobe.function("sys_vmsplice") ?
+probe nd_syscall.vmsplice = kprobe.function("sys_vmsplice") ?
 {
 	name = "vmsplice"
 	// argstr = sprintf("%d, %p, %d, 0x%x", $fd, $iov, $nr_segs, $flags)
@@ -4316,8 +4072,7 @@ probe nd_syscall.compat_vmsplice = kprobe.function("compat_sys_vmsplice") ?
 	asmlinkage()
 	argstr = sprintf("%d, %p, %d, 0x%x", int_arg(1), pointer_arg(2), uint_arg(3), uint_arg(4))
 }
-probe nd_syscall.vmsplice.return = kprobe.function("SyS_vmsplice").return ?,
-                                   kprobe.function("sys_vmsplice").return ?
+probe nd_syscall.vmsplice.return = kprobe.function("sys_vmsplice").return ?
 {
 	name = "vmsplice"
 	retstr = returnstr(1)
@@ -4335,8 +4090,7 @@ probe nd_syscall.compat_vmsplice.return = kprobe.function("compat_sys_vmsplice")
 #	     int options,
 #	     struct rusage __user *ru)
 #
-probe nd_syscall.wait4 = kprobe.function("SyS_wait4") ?,
-                         kprobe.function("sys_wait4") ?
+probe nd_syscall.wait4 = kprobe.function("sys_wait4") ?
 {
 	name = "wait4"
 	// pid = (@defined($upid) ? $upid : $pid)
@@ -4356,8 +4110,7 @@ probe nd_syscall.wait4 = kprobe.function("SyS_wait4") ?,
 	argstr = sprintf("%d, %p, %s, %p", pid, status_uaddr, _wait4_opt_str(options), rusage_uaddr)
 
 }
-probe nd_syscall.wait4.return = kprobe.function("SyS_wait4").return ?,
-                                kprobe.function("sys_wait4").return ?
+probe nd_syscall.wait4.return = kprobe.function("sys_wait4").return ?
 {
 	name = "wait4"
 	retstr = returnstr(1)
@@ -4371,8 +4124,7 @@ probe nd_syscall.wait4.return = kprobe.function("SyS_wait4").return ?,
 #		int options,
 #		struct rusage __user *ru)
 #
-probe nd_syscall.waitid = kprobe.function("SyS_waitid") ?,
-                          kprobe.function("sys_waitid") ?
+probe nd_syscall.waitid = kprobe.function("sys_waitid") ?
 {
 	name = "waitid"
 	// pid = (@defined($upid) ? $upid : $pid)
@@ -4396,8 +4148,7 @@ probe nd_syscall.waitid = kprobe.function("SyS_waitid") ?,
 	argstr = sprintf("%d, %d, %p, %s, %p", which,
 			pid, infop_uaddr, _waitid_opt_str(options), rusage_uaddr)
 }
-probe nd_syscall.waitid.return = kprobe.function("SyS_waitid").return ?,
-                                 kprobe.function("sys_waitid").return ?
+probe nd_syscall.waitid.return = kprobe.function("sys_waitid").return ?
 {
 	name = "waitid"
 	retstr = returnstr(1)
@@ -4411,8 +4162,7 @@ probe nd_syscall.waitid.return = kprobe.function("SyS_waitid").return ?,
 #	     int options,
 #	     struct rusage __user *ru)
 #
-probe nd_syscall.waitpid = kprobe.function("SyS_wait4") ?,
-                           kprobe.function("sys_wait4") ?
+probe nd_syscall.waitpid = kprobe.function("sys_wait4") ?
 {
 	name = "waitpid"
 	pid = $pid
@@ -4423,8 +4173,7 @@ probe nd_syscall.waitpid = kprobe.function("SyS_wait4") ?,
 	argstr = sprintf("%d, %p, %s, %p", $pid, $stat_addr,
 				options_str, $ru)
 }
-probe nd_syscall.waitpid.return = kprobe.function("SyS_wait4").return ?,
-                                  kprobe.function("sys_wait4").return ?
+probe nd_syscall.waitpid.return = kprobe.function("sys_wait4").return ?
 {
 	name = "waitpid"
 	retstr = returnstr(1)
@@ -4437,8 +4186,7 @@ probe nd_syscall.waitpid.return = kprobe.function("SyS_wait4").return ?,
 #	     const char __user * buf,
 #	     size_t count)
 #
-probe nd_syscall.write = kprobe.function("SyS_write") ?,
-                         kprobe.function("sys_write") ?
+probe nd_syscall.write = kprobe.function("sys_write") ?
 {
 	name = "write"
 	// fd = $fd
@@ -4452,8 +4200,7 @@ probe nd_syscall.write = kprobe.function("SyS_write") ?,
 	argstr = sprintf("%d, %s, %d", fd, text_strn(user_string(buf_uaddr), syscall_string_trunc, 1), count)
 
 }
-probe nd_syscall.write.return = kprobe.function("SyS_write").return ?,
-                                kprobe.function("sys_write").return ?
+probe nd_syscall.write.return = kprobe.function("sys_write").return ?
 {
 	name = "write"
 	retstr = returnstr(1)
@@ -4469,7 +4216,6 @@ probe nd_syscall.write.return = kprobe.function("SyS_write").return ?,
 #		unsigned long vlen)
 #
 probe nd_syscall.writev = kprobe.function("compat_sys_writev") ?,
-                          kprobe.function("SyS_writev") ?,
                           kprobe.function("sys_writev") ?
 {
 	name = "writev"
@@ -4485,7 +4231,6 @@ probe nd_syscall.writev = kprobe.function("compat_sys_writev") ?,
 }
 
 probe nd_syscall.writev.return = kprobe.function("compat_sys_writev").return ?,
-                                 kprobe.function("SyS_writev").return ?,
                                  kprobe.function("sys_writev").return ?
 {
 	name = "writev"
diff --git a/tapset/powerpc/registers.stp b/tapset/powerpc/registers.stp
index c8713e5..5d50725 100644
--- a/tapset/powerpc/registers.stp
+++ b/tapset/powerpc/registers.stp
@@ -70,7 +70,8 @@ function _stp_get_register_by_offset:long (offset:long) %{ /* pure */
 	}
 	if (THIS->offset < 0 || THIS->offset > sizeof(struct pt_regs) - sizeof(long)) {
 		snprintf(CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
-				"Bad register offset: %lld", THIS->offset);
+				"Bad register offset: %lld",
+				(long long)THIS->offset);
 		CONTEXT->last_error = CONTEXT->error_buffer;
 		return;
 	}
@@ -146,7 +147,7 @@ function _stp_arg:long (argnum:long, sign_extend:long, truncate:long) {
 		val = u_register("r8")
 	else if (argnum == 7)
 		val = u_register("r9")
-	else (argnum == 8)
+	else if (argnum == 8)
 		val = u_register("r10")
 
 	if (truncate) {
diff --git a/tapset/s390/nd_syscalls.stp b/tapset/s390/nd_syscalls.stp
index bd5f5c3..0c76c36 100644
--- a/tapset/s390/nd_syscalls.stp
+++ b/tapset/s390/nd_syscalls.stp
@@ -85,8 +85,7 @@ probe nd_syscall.mmap.return = kprobe.function("old_mmap").return ?,
 # long sys32_mmap2(struct mmap_arg_struct_emu31 __user *arg)
 #
 probe nd_syscall.mmap2 = kprobe.function("sys_mmap2") ?,
-                         kprobe.function("sys32_mmap2") ?,
-                         kprobe.function("SyS_mmap2") ?
+                         kprobe.function("sys32_mmap2") ?
 {
 	name = "mmap2"
 
@@ -103,8 +102,7 @@ probe nd_syscall.mmap2 = kprobe.function("sys_mmap2") ?,
 }
 
 probe nd_syscall.mmap2.return = kprobe.function("sys_mmap2").return ?,
-                                kprobe.function("sys32_mmap2").return ?,
-                                kprobe.function("SyS_mmap2").return ?
+                                kprobe.function("sys32_mmap2").return ?
 {
 	name = "mmap2"
 	retstr = returnstr(2)
diff --git a/tapset/s390/registers.stp b/tapset/s390/registers.stp
index 79482b7..b23f904 100644
--- a/tapset/s390/registers.stp
+++ b/tapset/s390/registers.stp
@@ -145,7 +145,7 @@ function _stp_arg:long (argnum:long, sign_extend:long, truncate:long) {
 		val = u_register("r4")
 	else if (argnum == 4)
 		val = u_register("r5")
-	else (argnum == 5)
+	else if (argnum == 5)
 		val = u_register("r6")
 
 	if (truncate) {
diff --git a/tapset/s390/syscalls.stp b/tapset/s390/syscalls.stp
index aba7d6b..284fbbb 100644
--- a/tapset/s390/syscalls.stp
+++ b/tapset/s390/syscalls.stp
@@ -74,8 +74,7 @@ probe syscall.mmap.return = kernel.function("old_mmap").return ?,
 # long sys32_mmap2(struct mmap_arg_struct_emu31 __user *arg)
 #
 probe syscall.mmap2 = kernel.function("sys_mmap2") ?,
-                      kernel.function("sys32_mmap2") ?,
-                      kernel.function("SyS_mmap2") ?
+                      kernel.function("sys32_mmap2") ?
 {
         name = "mmap2"
 
@@ -86,8 +85,7 @@ probe syscall.mmap2 = kernel.function("sys_mmap2") ?,
 }
 
 probe syscall.mmap2.return = kernel.function("sys_mmap2").return ?,
-                             kernel.function("sys32_mmap2").return ?,
-                             kernel.function("SyS_mmap2").return ?
+                             kernel.function("sys32_mmap2").return ?
 {
         name = "mmap2"
         retstr = returnstr(2)
diff --git a/tapset/syscalls.stp b/tapset/syscalls.stp
index 6bd7a3d..cde41ff 100644
--- a/tapset/syscalls.stp
+++ b/tapset/syscalls.stp
@@ -42,14 +42,12 @@ probe _syscall.accept4 = kernel.function("sys_accept4").call
 	flags = $flags
 	flags_str = _sock_flags_str($flags)
 }
-probe _syscall.accept = kernel.function("SyS_accept").call !,
-                        kernel.function("sys_accept").call ?
+probe _syscall.accept = kernel.function("sys_accept").call ?
 {
 	flags = 0
 	flags_str = "0"
 }
 probe syscall.accept.return = kernel.function("sys_accept4").return !,
-                              kernel.function("SyS_accept").return !,
                               kernel.function("sys_accept").return ?
 {
 	name = "accept"
@@ -58,8 +56,7 @@ probe syscall.accept.return = kernel.function("sys_accept4").return !,
 
 # access _____________________________________________________
 # long sys_access(const char __user * filename, int mode)
-probe syscall.access = kernel.function("SyS_access").call !,
-                       kernel.function("sys_access").call
+probe syscall.access = kernel.function("sys_access").call
 {
 	name = "access"
 	pathname = user_string($filename)
@@ -67,8 +64,7 @@ probe syscall.access = kernel.function("SyS_access").call !,
 	mode_str = _access_mode_str($mode)
 	argstr = sprintf("%s, %s", user_string_quoted($filename), mode_str)
 }
-probe syscall.access.return = kernel.function("SyS_access").return !,
-                              kernel.function("sys_access").return
+probe syscall.access.return = kernel.function("sys_access").return
 {
 	name = "access"
 	retstr = returnstr(1)
@@ -95,8 +91,7 @@ probe syscall.acct.return = kernel.function("sys_acct").return ?
 #             size_t plen,
 #             key_serial_t ringid)
 #
-probe syscall.add_key = kernel.function("SyS_add_key").call !,
-                        kernel.function("sys_add_key").call ?
+probe syscall.add_key = kernel.function("sys_add_key").call ?
 {
 	name = "add_key"
 	type_uaddr = $_type
@@ -110,8 +105,7 @@ probe syscall.add_key = kernel.function("SyS_add_key").call !,
 		text_strn(user_string($_payload), syscall_string_trunc, 1),
 		$plen, $ringid)
 }
-probe syscall.add_key.return = kernel.function("SyS_add_key").return !,
-                               kernel.function("sys_add_key").return ?
+probe syscall.add_key.return = kernel.function("sys_add_key").return ?
 {
 	name = "add_key"
 	retstr = returnstr(1)
@@ -119,8 +113,7 @@ probe syscall.add_key.return = kernel.function("SyS_add_key").return !,
 
 # adjtimex ___________________________________________________
 # long sys_adjtimex(struct timex __user *txc_p)
-probe syscall.adjtimex = kernel.function("SyS_adjtimex").call !,
-                         kernel.function("sys_adjtimex").call
+probe syscall.adjtimex = kernel.function("sys_adjtimex").call
 {
 	name = "adjtimex"
 
@@ -139,8 +132,7 @@ probe syscall.adjtimex = kernel.function("SyS_adjtimex").call !,
 	*/
 	argstr = sprintf("%p", $txc_p)
 }
-probe syscall.adjtimex.return = kernel.function("SyS_adjtimex").return !,
-                                kernel.function("sys_adjtimex").return
+probe syscall.adjtimex.return = kernel.function("sys_adjtimex").return
 {
 	name = "adjtimex"
 	retstr = _adjtimex_return_str($return)
@@ -162,7 +154,6 @@ probe syscall.compat_adjtimex.return = kernel.function("compat_sys_adjtimex").re
 # long sys32_alarm(unsigned int seconds)
 #
 probe syscall.alarm = kernel.function("sys32_alarm").call ?,
-                      kernel.function("SyS_alarm").call !,
                       kernel.function("sys_alarm").call ?
 {
 	name = "alarm"
@@ -170,7 +161,6 @@ probe syscall.alarm = kernel.function("sys32_alarm").call ?,
 	argstr = sprint($seconds)
 }
 probe syscall.alarm.return = kernel.function("sys32_alarm").return ?,
-                             kernel.function("SyS_alarm").return !,
                              kernel.function("sys_alarm").return ?
 {
 	name = "alarm"
@@ -179,8 +169,7 @@ probe syscall.alarm.return = kernel.function("sys32_alarm").return ?,
 
 # bdflush ____________________________________________________
 # long sys_bdflush(int func, long data)
-probe syscall.bdflush = kernel.function("SyS_bdflush").call !,
-                        kernel.function("sys_bdflush").call ?
+probe syscall.bdflush = kernel.function("sys_bdflush").call ?
 {
 	name = "bdflush"
 	func = $func
@@ -191,8 +180,7 @@ probe syscall.bdflush = kernel.function("SyS_bdflush").call !,
 		data_str = sprintf("%d", $data)
 	argstr = sprintf("%d, %s", func, data_str)
 }
-probe syscall.bdflush.return = kernel.function("SyS_bdflush").return !,
-                               kernel.function("sys_bdflush").return ?
+probe syscall.bdflush.return = kernel.function("sys_bdflush").return ?
 {
 	name = "bdflush"
 	retstr = returnstr(1)
@@ -200,8 +188,7 @@ probe syscall.bdflush.return = kernel.function("SyS_bdflush").return !,
 
 # bind _______________________________________________________
 # long sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
-probe syscall.bind = kernel.function("SyS_bind").call !,
-                     kernel.function("sys_bind").call ?
+probe syscall.bind = kernel.function("sys_bind").call ?
 {
 	name = "bind"
 	sockfd = $fd
@@ -209,8 +196,7 @@ probe syscall.bind = kernel.function("SyS_bind").call !,
 	addrlen = $addrlen
 	argstr = sprintf("%d, %s, %d", $fd, _struct_sockaddr_u($umyaddr, $addrlen), $addrlen)
 }
-probe syscall.bind.return = kernel.function("SyS_bind").return !,
-                            kernel.function("sys_bind").return ?
+probe syscall.bind.return = kernel.function("sys_bind").return ?
 {
 	name = "bind"
 	retstr = returnstr(1)
@@ -219,7 +205,6 @@ probe syscall.bind.return = kernel.function("SyS_bind").return !,
 # brk ________________________________________________________
 # unsigned long sys_brk(unsigned long brk)
 probe syscall.brk = kernel.function("ia64_brk").call ?,
-                    kernel.function("SyS_brk").call !,
                     kernel.function("sys_brk").call
 {
 	name = "brk"
@@ -227,7 +212,6 @@ probe syscall.brk = kernel.function("ia64_brk").call ?,
 	argstr = sprintf("%p", brk)
 }
 probe syscall.brk.return = kernel.function("ia64_brk").return ?,
-                           kernel.function("SyS_brk").return !,
                            kernel.function("sys_brk").return
 {
 	name = "brk"
@@ -247,16 +231,14 @@ probe syscall.brk.return = kernel.function("ia64_brk").return ?,
  *   functions to export.
  */
 # long sys_capget(cap_user_header_t header, cap_user_data_t dataptr)
-probe syscall.capget = kernel.function("SyS_capget").call !,
-                       kernel.function("sys_capget").call
+probe syscall.capget = kernel.function("sys_capget").call
 {
 	name = "capget"
 	header_uaddr = $header
 	data_uaddr = $dataptr
 	argstr = sprintf("%p, %p", $header, $dataptr)
 }
-probe syscall.capget.return = kernel.function("SyS_capget").return !,
-                              kernel.function("sys_capget").return
+probe syscall.capget.return = kernel.function("sys_capget").return
 {
 	name = "capget"
 	retstr = returnstr(1)
@@ -274,16 +256,14 @@ probe syscall.capget.return = kernel.function("SyS_capget").return !,
  *   functions to export.
  */
 # long sys_capset(cap_user_header_t header, const cap_user_data_t data)
-probe syscall.capset = kernel.function("SyS_capset").call !,
-                       kernel.function("sys_capset").call
+probe syscall.capset = kernel.function("sys_capset").call
 {
 	name = "capset"
 	header_uaddr = $header
 	data_uaddr = $data
 	argstr = sprintf("%p, %p", $header, $data)
 }
-probe syscall.capset.return = kernel.function("SyS_capset").return !,
-                              kernel.function("sys_capset").return
+probe syscall.capset.return = kernel.function("sys_capset").return
 {
 	name = "capset"
 	retstr = returnstr(1)
@@ -291,15 +271,13 @@ probe syscall.capset.return = kernel.function("SyS_capset").return !,
 
 # chdir ______________________________________________________
 # long sys_chdir(const char __user * filename)
-probe syscall.chdir = kernel.function("SyS_chdir").call !,
-                      kernel.function("sys_chdir").call
+probe syscall.chdir = kernel.function("sys_chdir").call
 {
 	name = "chdir"
 	path = user_string($filename)
 	argstr = user_string_quoted($filename)
 }
-probe syscall.chdir.return = kernel.function("SyS_chdir").return !,
-                             kernel.function("sys_chdir").return
+probe syscall.chdir.return = kernel.function("sys_chdir").return
 {
 	name = "chdir"
 	retstr = returnstr(1)
@@ -307,16 +285,14 @@ probe syscall.chdir.return = kernel.function("SyS_chdir").return !,
 
 # chmod ______________________________________________________
 # long sys_chmod(const char __user * filename, mode_t mode)
-probe syscall.chmod = kernel.function("SyS_chmod").call !,
-                      kernel.function("sys_chmod").call
+probe syscall.chmod = kernel.function("sys_chmod").call
 {
 	name = "chmod"
 	path = user_string($filename)
 	mode = $mode
 	argstr = sprintf("%s, %#o", user_string_quoted($filename), mode)
 }
-probe syscall.chmod.return = kernel.function("SyS_chmod").return !,
-                             kernel.function("sys_chmod").return
+probe syscall.chmod.return = kernel.function("sys_chmod").return
 {
 	name = "chmod"
 	retstr = returnstr(1)
@@ -324,8 +300,7 @@ probe syscall.chmod.return = kernel.function("SyS_chmod").return !,
 
 # chown ______________________________________________________
 # long sys_chown(const char __user * filename, uid_t user, gid_t group)
-probe syscall.chown = kernel.function("SyS_chown").call !,
-                      kernel.function("sys_chown").call
+probe syscall.chown = kernel.function("sys_chown").call
 {
 	name = "chown"
 	path = user_string($filename)
@@ -333,8 +308,7 @@ probe syscall.chown = kernel.function("SyS_chown").call !,
 	group = __int32($group)
 	argstr = sprintf("%s, %d, %d", user_string_quoted($filename), owner, group)
 }
-probe syscall.chown.return = kernel.function("SyS_chown").return !,
-                             kernel.function("sys_chown").return
+probe syscall.chown.return = kernel.function("sys_chown").return
 {
 	name = "chown"
 	retstr = returnstr(1)
@@ -359,15 +333,13 @@ probe syscall.chown16.return = kernel.function("sys_chown16").return ?
 
 # chroot _____________________________________________________
 # long sys_chroot(const char __user * filename)
-probe syscall.chroot = kernel.function("SyS_chroot").call !,
-                       kernel.function("sys_chroot").call
+probe syscall.chroot = kernel.function("sys_chroot").call
 {
 	name = "chroot"
 	path = user_string($filename)
 	argstr = user_string_quoted($filename)
 }
-probe syscall.chroot.return = kernel.function("SyS_chroot").return !,
-                              kernel.function("sys_chroot").return
+probe syscall.chroot.return = kernel.function("sys_chroot").return
 {
 	name = "chroot"
 	retstr = returnstr(1)
@@ -378,7 +350,6 @@ probe syscall.chroot.return = kernel.function("SyS_chroot").return !,
 # long compat_clock_getres(clockid_t which_clock, struct compat_timespec __user *tp)
 #
 probe syscall.clock_getres = kernel.function("compat_clock_getres").call ?,
-                             kernel.function("SyS_clock_getres").call !,
                              kernel.function("sys_clock_getres").call
 {
 	name = "clock_getres"
@@ -388,7 +359,6 @@ probe syscall.clock_getres = kernel.function("compat_clock_getres").call ?,
 	argstr = sprintf("%s, %p", _get_wc_str($which_clock), $tp)
 }
 probe syscall.clock_getres.return = kernel.function("compat_clock_getres").return ?,
-                                    kernel.function("SyS_clock_getres").return !,
                                     kernel.function("sys_clock_getres").return
 {
 	name = "clock_getres"
@@ -398,16 +368,14 @@ probe syscall.clock_getres.return = kernel.function("compat_clock_getres").retur
 # clock_gettime ______________________________________________
 # long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp)
 #
-probe syscall.clock_gettime = kernel.function("SyS_clock_gettime").call !,
-                              kernel.function("sys_clock_gettime").call
+probe syscall.clock_gettime = kernel.function("sys_clock_gettime").call
 {
 	name = "clock_gettime"
 	clk_id = $which_clock
 	clk_id_str = _get_wc_str($which_clock)
 	argstr = sprintf("%s, %p", _get_wc_str($which_clock), $tp)
 }
-probe syscall.clock_gettime.return = kernel.function("SyS_clock_gettime").return !,
-                                     kernel.function("sys_clock_gettime").return
+probe syscall.clock_gettime.return = kernel.function("sys_clock_gettime").return
 {
 	name = "clock_gettime"
 	retstr = returnstr(1)
@@ -419,8 +387,7 @@ probe syscall.clock_gettime.return = kernel.function("SyS_clock_gettime").return
 #                     const struct timespec __user *rqtp,
 #                     struct timespec __user *rmtp)
 #
-probe syscall.clock_nanosleep = kernel.function("SyS_clock_nanosleep").call !,
-                                kernel.function("sys_clock_nanosleep").call
+probe syscall.clock_nanosleep = kernel.function("sys_clock_nanosleep").call
 {
 	name = "clock_nanosleep"
 	if ($flags == 1)
@@ -430,8 +397,7 @@ probe syscall.clock_nanosleep = kernel.function("SyS_clock_nanosleep").call !,
 	argstr = sprintf("%s, %s, %s, %p", _get_wc_str($which_clock), flag_str,
 		_struct_timespec_u($rqtp, 1), $rmtp)
 }
-probe syscall.clock_nanosleep.return = kernel.function("SyS_clock_nanosleep").return !,
-                                       kernel.function("sys_clock_nanosleep").return
+probe syscall.clock_nanosleep.return = kernel.function("sys_clock_nanosleep").return
 {
 	name = "clock_nanosleep"
 	retstr = returnstr(1)
@@ -464,8 +430,7 @@ probe syscall.compat_clock_nanosleep.return = kernel.function("compat_clock_nano
 # long sys_clock_settime(clockid_t which_clock,
 #                   const struct timespec __user *tp)
 #
-probe syscall.clock_settime = kernel.function("SyS_clock_settime").call !,
-                              kernel.function("sys_clock_settime").call
+probe syscall.clock_settime = kernel.function("sys_clock_settime").call
 {
 	name = "clock_settime"
 	clk_id = $which_clock
@@ -473,8 +438,7 @@ probe syscall.clock_settime = kernel.function("SyS_clock_settime").call !,
 	tp_uaddr = $tp
 	argstr = sprintf("%s, %s", clk_id_str, _struct_timespec_u($tp, 1))
 }
-probe syscall.clock_settime.return = kernel.function("SyS_clock_settime").return !,
-                                     kernel.function("sys_clock_settime").return
+probe syscall.clock_settime.return = kernel.function("sys_clock_settime").return
 {
 	name = "clock_settime"
 	retstr = returnstr(1)
@@ -482,23 +446,20 @@ probe syscall.clock_settime.return = kernel.function("SyS_clock_settime").return
 
 # close ______________________________________________________
 # long sys_close(unsigned int fd)
-probe syscall.close = kernel.function("SyS_close").call !,
-                      kernel.function("sys_close").call
+probe syscall.close = kernel.function("sys_close").call
 {
 	name = "close"
 	fd = $fd
 	argstr = sprint(fd)
 }
-probe syscall.close.return = kernel.function("SyS_close").return !,
-                             kernel.function("sys_close").return
+probe syscall.close.return = kernel.function("sys_close").return
 {
 	name = "close"
 	retstr = returnstr(1)
 }
 # connect ____________________________________________________
 # long sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
-probe syscall.connect = kernel.function("SyS_connect").call !,
-                        kernel.function("sys_connect").call ?
+probe syscall.connect = kernel.function("sys_connect").call ?
 {
 	name = "connect"
 	sockfd = $fd
@@ -506,8 +467,7 @@ probe syscall.connect = kernel.function("SyS_connect").call !,
 	addrlen = $addrlen
 	argstr = sprintf("%d, %s, %d", $fd, _struct_sockaddr_u($uservaddr, $addrlen), $addrlen)
 }
-probe syscall.connect.return = kernel.function("SyS_connect").return !,
-                               kernel.function("sys_connect").return ?
+probe syscall.connect.return = kernel.function("sys_connect").return ?
 {
 	name = "connect"
 	retstr = returnstr(1)
@@ -515,16 +475,14 @@ probe syscall.connect.return = kernel.function("SyS_connect").return !,
 
 # creat
 # long sys_creat(const char __user * pathname, int mode)
-probe syscall.creat = kernel.function("SyS_creat").call !,
-                      kernel.function("sys_creat").call ?
+probe syscall.creat = kernel.function("sys_creat").call ?
 {
 	name = "creat"
 	mode = $mode
 	pathname = user_string($pathname)
 	argstr = sprintf("%s, %#o", user_string_quoted($pathname), $mode)
 }
-probe syscall.creat.return = kernel.function("SyS_creat").return !,
-                             kernel.function("sys_creat").return ?
+probe syscall.creat.return = kernel.function("sys_creat").return ?
 {
 	name = "creat"
 	retstr = returnstr(1)
@@ -532,16 +490,14 @@ probe syscall.creat.return = kernel.function("SyS_creat").return !,
 
 # delete_module ______________________________________________
 # long sys_delete_module(const char __user *name_user, unsigned int flags)
-probe syscall.delete_module = kernel.function("SyS_delete_module").call !,
-                              kernel.function("sys_delete_module").call ?
+probe syscall.delete_module = kernel.function("sys_delete_module").call ?
 {
 	name = "delete_module"
 	name_user = user_string($name_user)
 	flags = $flags
 	argstr = sprintf("%s, %s", user_string_quoted($name_user), _module_flags_str($flags))
 }
-probe syscall.delete_module.return = kernel.function("SyS_delete_module").return !,
-                                     kernel.function("sys_delete_module").return ?
+probe syscall.delete_module.return = kernel.function("sys_delete_module").return ?
 {
 	name = "delete_module"
 	retstr = returnstr(1)
@@ -549,15 +505,13 @@ probe syscall.delete_module.return = kernel.function("SyS_delete_module").return
 
 # dup ________________________________________________________
 # long sys_dup(unsigned int fildes)
-probe syscall.dup = kernel.function("SyS_dup").call !,
-                    kernel.function("sys_dup").call
+probe syscall.dup = kernel.function("sys_dup").call
 {
 	name = "dup"
 	oldfd = $fildes
 	argstr = sprint($fildes)
 }
-probe syscall.dup.return = kernel.function("SyS_dup").return !,
-                           kernel.function("sys_dup").return
+probe syscall.dup.return = kernel.function("sys_dup").return
 {
 	name = "dup"
 	retstr = returnstr(1)
@@ -566,8 +520,7 @@ probe syscall.dup.return = kernel.function("SyS_dup").return !,
 # dup2 _______________________________________________________
 # long sys_dup2(unsigned int oldfd, unsigned int newfd)
 # Only handles corner case, others handled by dup3.
-probe syscall.dup2 = kernel.function("SyS_dup2").call !,
-                     kernel.function("sys_dup2").call
+probe syscall.dup2 = kernel.function("sys_dup2").call
 {
 	if ($oldfd != $newfd) next;
 
@@ -576,8 +529,7 @@ probe syscall.dup2 = kernel.function("SyS_dup2").call !,
 	newfd = $newfd
 	argstr = sprintf("%d, %d", $oldfd, $newfd)
 }
-probe syscall.dup2.return = kernel.function("SyS_dup2").return !,
-                            kernel.function("sys_dup2").return
+probe syscall.dup2.return = kernel.function("sys_dup2").return
 {
 	if ($oldfd != $newfd) next;
 
@@ -588,9 +540,7 @@ probe syscall.dup2.return = kernel.function("SyS_dup2").return !,
 # dup3 (handles both dup2 and dup3 except for corner case)___________
 # long sys_dup2(unsigned int oldfd, unsigned int newfd)
 # SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags)
-probe syscall.dup2 = kernel.function("SyS_dup3").call !,
-                     kernel.function("sys_dup3").call !,
-                     kernel.function("SyS_dup2").call !,
+probe syscall.dup2 = kernel.function("sys_dup3").call !,
                      kernel.function("sys_dup2").call
 {
 	oldfd = $oldfd
@@ -609,9 +559,7 @@ probe syscall.dup2 = kernel.function("SyS_dup3").call !,
 				 _dup3_flag_str(flags));
 	}
 }
-probe syscall.dup2.return = kernel.function("SyS_dup3").return !,
-                            kernel.function("sys_dup3").return !,
-                            kernel.function("SyS_dup2").return !,
+probe syscall.dup2.return = kernel.function("sys_dup3").return !,
                             kernel.function("sys_dup2").return
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -626,9 +574,7 @@ probe syscall.dup2.return = kernel.function("SyS_dup3").return !,
 # epoll_create _______________________________________________
 # long sys_epoll_create(int size)
 # SYSCALL_DEFINE1(epoll_create1, int, flags)
-probe syscall.epoll_create = kernel.function("SyS_epoll_create1").call !,
-                             kernel.function("sys_epoll_create1").call !,
-                             kernel.function("SyS_epoll_create").call !,
+probe syscall.epoll_create = kernel.function("sys_epoll_create1").call !,
                              kernel.function("sys_epoll_create").call ?
 {
 	size = @defined($size) ? $size : 0;
@@ -641,9 +587,7 @@ probe syscall.epoll_create = kernel.function("SyS_epoll_create1").call !,
 		argstr = _epoll_create1_flag_str(flags);
 	}
 }
-probe syscall.epoll_create.return = kernel.function("SyS_epoll_create1").return !,
-                                    kernel.function("sys_epoll_create1").return !,
-                                    kernel.function("SyS_epoll_create").return !,
+probe syscall.epoll_create.return = kernel.function("sys_epoll_create1").return !,
                                     kernel.function("sys_epoll_create").return ?
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -658,7 +602,6 @@ probe syscall.epoll_create.return = kernel.function("SyS_epoll_create1").return
 #			struct compat_epoll_event __user *event)
 #
 probe syscall.epoll_ctl = kernel.function("compat_sys_epoll_ctl").call ?,
-                          kernel.function("SyS_epoll_ctl").call !,
                           kernel.function("sys_epoll_ctl").call ?
 {
 	name = "epoll_ctl"
@@ -670,7 +613,6 @@ probe syscall.epoll_ctl = kernel.function("compat_sys_epoll_ctl").call ?,
 	argstr = sprintf("%d, %s, %d, %p", $epfd, _opoll_op_str($op), $fd, $event)
 }
 probe syscall.epoll_ctl.return = kernel.function("compat_sys_epoll_ctl").return ?,
-                                 kernel.function("SyS_epoll_ctl").return !,
                                  kernel.function("sys_epoll_ctl").return ?
 {
 	name = "epoll_ctl"
@@ -689,7 +631,6 @@ probe syscall.epoll_ctl.return = kernel.function("compat_sys_epoll_ctl").return
 #			compat_size_t sigsetsize)
 #
 probe syscall.epoll_pwait = kernel.function("compat_sys_epoll_pwait").call ?,
-                            kernel.function("SyS_epoll_pwait").call !,
                             kernel.function("sys_epoll_pwait").call ?
 {
 	name = "epoll_pwait"
@@ -697,7 +638,6 @@ probe syscall.epoll_pwait = kernel.function("compat_sys_epoll_pwait").call ?,
 		$epfd, $events, $maxevents, $timeout, $sigmask, $sigsetsize)
 }
 probe syscall.epoll_pwait.return = kernel.function("compat_sys_epoll_pwait").return ?,
-                                   kernel.function("SyS_epoll_pwait").return !,
                                    kernel.function("sys_epoll_pwait").return ?
 {
 	name = "epoll_pwait"
@@ -713,7 +653,6 @@ probe syscall.epoll_pwait.return = kernel.function("compat_sys_epoll_pwait").ret
 #		int maxevents, int timeout)
 #
 probe syscall.epoll_wait = kernel.function("compat_sys_epoll_wait").call ?,
-                           kernel.function("SyS_epoll_wait").call !,
                            kernel.function("sys_epoll_wait").call ?
 {
 	name = "epoll_wait"
@@ -724,7 +663,6 @@ probe syscall.epoll_wait = kernel.function("compat_sys_epoll_wait").call ?,
 	argstr = sprintf("%d, %p, %d, %d", $epfd, $events, $maxevents, $timeout)
 }
 probe syscall.epoll_wait.return = kernel.function("compat_sys_epoll_wait").return ?,
-                                  kernel.function("SyS_epoll_wait").return !,
                                   kernel.function("sys_epoll_wait").return ?
 {
 	name = "epoll_wait"
@@ -734,9 +672,7 @@ probe syscall.epoll_wait.return = kernel.function("compat_sys_epoll_wait").retur
 # eventfd _____________________________________________________
 # long sys_eventfd(unsigned int count)
 # SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags)
-probe syscall.eventfd = kernel.function("SyS_eventfd2").call !,
-                        kernel.function("sys_eventfd2").call !,
-                        kernel.function("SyS_eventfd").call !,
+probe syscall.eventfd = kernel.function("sys_eventfd2").call !,
                         kernel.function("sys_eventfd").call ?
 {
 	flags = @defined($flags) ? $flags : 0
@@ -748,9 +684,7 @@ probe syscall.eventfd = kernel.function("SyS_eventfd2").call !,
 		argstr = sprintf("%d, %s", $count, _eventfd2_flag_str(flags))
 	}
 }
-probe syscall.eventfd.return = kernel.function("SyS_eventfd2").return !,
-                               kernel.function("sys_eventfd2").return !,
-                               kernel.function("SyS_eventfd").return !,
+probe syscall.eventfd.return = kernel.function("sys_eventfd2").return !,
                                kernel.function("sys_eventfd").return ?
 {
 	flags = @defined($flags) ? $flags : 0
@@ -810,8 +744,7 @@ probe syscall.exit = kernel.function("do_exit").call
 # exit_group _________________________________________________
 # void sys_exit_group(int error_code)
 #
-probe syscall.exit_group = kernel.function("SyS_exit_group").call !,
-                           kernel.function("sys_exit_group").call
+probe syscall.exit_group = kernel.function("sys_exit_group").call
 {
 	name = "exit_group"
 	status = $error_code
@@ -823,8 +756,7 @@ probe syscall.exit_group = kernel.function("SyS_exit_group").call !,
 # faccessat __________________________________________________
 # new function with 2.6.16
 # long sys_faccessat(int dfd, const char __user *filename, int mode)
-probe syscall.faccessat = kernel.function("SyS_faccessat").call !,
-                          kernel.function("sys_faccessat").call ?
+probe syscall.faccessat = kernel.function("sys_faccessat").call ?
 {
 	name = "faccessat"
 	dirfd = $dfd
@@ -834,8 +766,7 @@ probe syscall.faccessat = kernel.function("SyS_faccessat").call !,
 	mode_str = _access_mode_str($mode)
 	argstr = sprintf("%s, %s, %s", dirfd_str, user_string_quoted($filename), mode_str)
 }
-probe syscall.faccessat.return = kernel.function("SyS_faccessat").return !,
-                                 kernel.function("sys_faccessat").return ?
+probe syscall.faccessat.return = kernel.function("sys_faccessat").return ?
 {
 	name = "faccessat"
 	retstr = returnstr(1)
@@ -845,8 +776,7 @@ probe syscall.faccessat.return = kernel.function("SyS_faccessat").return !,
 # fadvise64 __________________________________________________
 # long sys_fadvise64(int fd, loff_t offset, size_t len,  int advice)
 #
-probe syscall.fadvise64 = kernel.function("SyS_fadvise64").call !,
-                          kernel.function("sys_fadvise64").call ?
+probe syscall.fadvise64 = kernel.function("sys_fadvise64").call ?
 {
 	name = "fadvise64"
 	fd = $fd
@@ -855,8 +785,7 @@ probe syscall.fadvise64 = kernel.function("SyS_fadvise64").call !,
 	advice = $advice
 	argstr = sprintf("%d, %d, %d, %s", $fd, $offset, $len, _fadvice_advice_str($advice))
 }
-probe syscall.fadvise64.return = kernel.function("SyS_fadvise64").return !,
-                                 kernel.function("sys_fadvise64").return ?
+probe syscall.fadvise64.return = kernel.function("sys_fadvise64").return ?
 {
 	name = "fadvise64"
 	retstr = returnstr(1)
@@ -865,8 +794,7 @@ probe syscall.fadvise64.return = kernel.function("SyS_fadvise64").return !,
 # fadvise64_64 _______________________________________________
 # long sys_fadvise64_64(int fd, loff_t offset, loff_t len,  int advice)
 #
-probe syscall.fadvise64_64 = kernel.function("SyS_fadvise64_64").call !,
-                             kernel.function("sys_fadvise64_64").call ?
+probe syscall.fadvise64_64 = kernel.function("sys_fadvise64_64").call ?
 {
 	name = "fadvise64_64"
 	fd = $fd
@@ -875,8 +803,7 @@ probe syscall.fadvise64_64 = kernel.function("SyS_fadvise64_64").call !,
 	advice = $advice
 	argstr = sprintf("%d, %d, %d, %s", $fd, $offset, $len, _fadvice_advice_str($advice))
 }
-probe syscall.fadvise64_64.return = kernel.function("SyS_fadvise64_64").return !,
-                                    kernel.function("sys_fadvise64_64").return ?
+probe syscall.fadvise64_64.return = kernel.function("sys_fadvise64_64").return ?
 {
 	name = "fadvise64_64"
 	retstr = returnstr(1)
@@ -887,8 +814,7 @@ probe syscall.fadvise64_64.return = kernel.function("SyS_fadvise64_64").return !
 # fadvise64 __________________________________________________
 # long sys_fadvise64(int fd, loff_t offset, size_t len,  int advice)
 #
-probe syscall.fadvise64 = kernel.function("SyS_fadvise64").call !,
-                          kernel.function("sys_fadvise64").call
+probe syscall.fadvise64 = kernel.function("sys_fadvise64").call
 {
 	name = "fadvise64"
 	fd = 0
@@ -897,8 +823,7 @@ probe syscall.fadvise64 = kernel.function("SyS_fadvise64").call !,
 	advice = 0
 	argstr = ""
 }
-probe syscall.fadvise64.return = kernel.function("SyS_fadvise64").return !,
-                                 kernel.function("sys_fadvise64").return
+probe syscall.fadvise64.return = kernel.function("sys_fadvise64").return
 {
 	name = "fadvise64"
 	retstr = returnstr(1)
@@ -907,8 +832,7 @@ probe syscall.fadvise64.return = kernel.function("SyS_fadvise64").return !,
 # fadvise64_64 _______________________________________________
 # long sys_fadvise64_64(int fd, loff_t offset, loff_t len,  int advice)
 #
-probe syscall.fadvise64_64 = kernel.function("SyS_fadvise64_64").call !,
-                             kernel.function("sys_fadvise64_64").call
+probe syscall.fadvise64_64 = kernel.function("sys_fadvise64_64").call
 {
 	name = "fadvise64_64"
 	fd = 0
@@ -917,8 +841,7 @@ probe syscall.fadvise64_64 = kernel.function("SyS_fadvise64_64").call !,
 	advice = 0
 	argstr = ""
 }
-probe syscall.fadvise64_64.return = kernel.function("SyS_fadvise64_64").return !,
-                                    kernel.function("sys_fadvise64_64").return
+probe syscall.fadvise64_64.return = kernel.function("sys_fadvise64_64").return
 {
 	name = "fadvise64_64"
 	retstr = returnstr(1)
@@ -927,15 +850,13 @@ probe syscall.fadvise64_64.return = kernel.function("SyS_fadvise64_64").return !
 
 # fchdir _____________________________________________________
 # long sys_fchdir(unsigned int fd)
-probe syscall.fchdir = kernel.function("SyS_fchdir").call !,
-                       kernel.function("sys_fchdir").call
+probe syscall.fchdir = kernel.function("sys_fchdir").call
 {
 	name = "fchdir"
 	fd = $fd
 	argstr = sprint($fd)
 }
-probe syscall.fchdir.return = kernel.function("SyS_fchdir").return !,
-                              kernel.function("sys_fchdir").return
+probe syscall.fchdir.return = kernel.function("sys_fchdir").return
 {
 	name = "fchdir"
 	retstr = returnstr(1)
@@ -943,16 +864,14 @@ probe syscall.fchdir.return = kernel.function("SyS_fchdir").return !,
 
 # fchmod _____________________________________________________
 # long sys_fchmod(unsigned int fd, mode_t mode)
-probe syscall.fchmod = kernel.function("SyS_fchmod").call !,
-                       kernel.function("sys_fchmod").call
+probe syscall.fchmod = kernel.function("sys_fchmod").call
 {
 	name = "fchmod"
 	fildes = $fd
 	mode = $mode
 	argstr = sprintf("%d, %#o", $fd, $mode)
 }
-probe syscall.fchmod.return = kernel.function("SyS_fchmod").return !,
-                              kernel.function("sys_fchmod").return
+probe syscall.fchmod.return = kernel.function("sys_fchmod").return
 {
 	name = "fchmod"
 	retstr = returnstr(1)
@@ -962,8 +881,7 @@ probe syscall.fchmod.return = kernel.function("SyS_fchmod").return !,
 # new function with 2.6.16
 # long sys_fchmodat(int dfd, const char __user *filename,
 #	mode_t mode)
-probe syscall.fchmodat = kernel.function("SyS_fchmodat").call !,
-                         kernel.function("sys_fchmodat").call ?
+probe syscall.fchmodat = kernel.function("sys_fchmodat").call ?
 {
 	name = "fchmodat"
 	dirfd = $dfd
@@ -972,8 +890,7 @@ probe syscall.fchmodat = kernel.function("SyS_fchmodat").call !,
 	mode = $mode
 	argstr = sprintf("%s, %s, %#o", dirfd_str, user_string_quoted($filename), $mode)
 }
-probe syscall.fchmodat.return = kernel.function("SyS_fchmodat").return !,
-                                kernel.function("sys_fchmodat").return ?
+probe syscall.fchmodat.return = kernel.function("sys_fchmodat").return ?
 {
 	name = "fchmodat"
 	retstr = returnstr(1)
@@ -981,8 +898,7 @@ probe syscall.fchmodat.return = kernel.function("SyS_fchmodat").return !,
 
 # fchown _____________________________________________________
 # long sys_fchown(unsigned int fd, uid_t user, gid_t group)
-probe syscall.fchown = kernel.function("SyS_fchown").call !,
-                       kernel.function("sys_fchown").call
+probe syscall.fchown = kernel.function("sys_fchown").call
 {
 	name = "fchown"
 	fd = $fd
@@ -990,8 +906,7 @@ probe syscall.fchown = kernel.function("SyS_fchown").call !,
 	group = __int32($group)
 	argstr = sprintf("%d, %d, %d", $fd, owner, group)
 }
-probe syscall.fchown.return = kernel.function("SyS_fchown").return !,
-                              kernel.function("sys_fchown").return
+probe syscall.fchown.return = kernel.function("sys_fchown").return
 {
 	name = "fchown"
 	retstr = returnstr(1)
@@ -1017,8 +932,7 @@ probe syscall.fchown16.return = kernel.function("sys_fchown16").return ?
 # new function with 2.6.16
 # long sys_fchownat(int dfd, const char __user *filename,
 #	uid_t user, gid_t group, int flag)
-probe syscall.fchownat = kernel.function("SyS_fchownat").call !,
-                         kernel.function("sys_fchownat").call ?
+probe syscall.fchownat = kernel.function("sys_fchownat").call ?
 {
 	name = "fchownat"
 	dirfd = $dfd
@@ -1031,8 +945,7 @@ probe syscall.fchownat = kernel.function("SyS_fchownat").call !,
 	argstr = sprintf("%s, %s, %d, %d, %s",
 		dirfd_str, user_string_quoted($filename), owner, group, flags_str)
 }
-probe syscall.fchownat.return = kernel.function("SyS_fchownat").return !,
-                                kernel.function("sys_fchownat").return ?
+probe syscall.fchownat.return = kernel.function("sys_fchownat").return ?
 {
 	name = "fchownat"
 	retstr = returnstr(1)
@@ -1047,7 +960,6 @@ probe syscall.fchownat.return = kernel.function("SyS_fchownat").return !,
 probe syscall.fcntl = kernel.function("compat_sys_fcntl").call ?,
                       kernel.function("compat_sys_fcntl64").call ?,
                       kernel.function("sys_fcntl64").call ?,
-                      kernel.function("SyS_fcntl").call !,
                       kernel.function("sys_fcntl").call ?
 {
 	name = "fcntl"
@@ -1060,7 +972,6 @@ probe syscall.fcntl = kernel.function("compat_sys_fcntl").call ?,
 probe syscall.fcntl.return = kernel.function("compat_sys_fcntl").return ?,
                              kernel.function("compat_sys_fcntl64").return ?,
                              kernel.function("sys_fcntl64").return ?,
-                             kernel.function("SyS_fcntl").return !,
                              kernel.function("sys_fcntl").return ?
 {
 	name = "fcntl"
@@ -1069,15 +980,13 @@ probe syscall.fcntl.return = kernel.function("compat_sys_fcntl").return ?,
 
 # fdatasync __________________________________________________
 # long sys_fdatasync(unsigned int fd)
-probe syscall.fdatasync = kernel.function("SyS_fdatasync").call !,
-                          kernel.function("sys_fdatasync").call
+probe syscall.fdatasync = kernel.function("sys_fdatasync").call
 {
 	name = "fdatasync"
 	fd = $fd
 	argstr = sprint(fd)
 }
-probe syscall.fdatasync.return = kernel.function("SyS_fdatasync").return !,
-                                 kernel.function("sys_fdatasync").return
+probe syscall.fdatasync.return = kernel.function("sys_fdatasync").return
 {
 	name = "fdatasync"
 	retstr = returnstr(1)
@@ -1086,8 +995,7 @@ probe syscall.fdatasync.return = kernel.function("SyS_fdatasync").return !,
 # fgetxattr __________________________________________________
 # ssize_t sys_fgetxattr(int fd, char __user *name,
 # 		void __user *value, size_t size)
-probe syscall.fgetxattr = kernel.function("SyS_fgetxattr").call !,
-                          kernel.function("sys_fgetxattr").call
+probe syscall.fgetxattr = kernel.function("sys_fgetxattr").call
 {
 	name = "fgetxattr"
 	filedes = $fd
@@ -1097,16 +1005,14 @@ probe syscall.fgetxattr = kernel.function("SyS_fgetxattr").call !,
 	size  = $size
 	argstr = sprintf("%d, %s, %p, %d", filedes, user_string_quoted($name), value_uaddr, size)
 }
-probe syscall.fgetxattr.return = kernel.function("SyS_fgetxattr").return !,
-                                 kernel.function("sys_fgetxattr").return
+probe syscall.fgetxattr.return = kernel.function("sys_fgetxattr").return
 {
 	name = "fgetxattr"
 	retstr = returnstr(1)
 }
 # flistxattr _________________________________________________
 # ssize_t sys_flistxattr(int fd, char __user *list, size_t size)
-probe syscall.flistxattr = kernel.function("SyS_flistxattr").call !,
-                           kernel.function("sys_flistxattr").call
+probe syscall.flistxattr = kernel.function("sys_flistxattr").call
 {
 	name = "flistxattr"
 	filedes = $fd
@@ -1114,8 +1020,7 @@ probe syscall.flistxattr = kernel.function("SyS_flistxattr").call !,
 	size = $size
 	argstr = sprintf("%d, %p, %d", filedes, list_uaddr, size)
 }
-probe syscall.flistxattr.return = kernel.function("SyS_flistxattr").return !,
-                                  kernel.function("sys_flistxattr").return
+probe syscall.flistxattr.return = kernel.function("sys_flistxattr").return
 {
 	name = "flistxattr"
 	retstr = returnstr(1)
@@ -1123,16 +1028,14 @@ probe syscall.flistxattr.return = kernel.function("SyS_flistxattr").return !,
 
 # flock ______________________________________________________
 # long sys_flock(unsigned int fd, unsigned int cmd)
-probe syscall.flock = kernel.function("SyS_flock").call !,
-                      kernel.function("sys_flock").call
+probe syscall.flock = kernel.function("sys_flock").call
 {
 	name = "flock"
 	fd = $fd
 	operation = $cmd
 	argstr = sprintf("%d, %s", fd, _flock_cmd_str(operation))
 }
-probe syscall.flock.return = kernel.function("SyS_flock").return !,
-                             kernel.function("sys_flock").return
+probe syscall.flock.return = kernel.function("sys_flock").return
 {
 	name = "flock"
 	retstr = returnstr(1)
@@ -1209,16 +1112,14 @@ probe syscall.fork.return = kernel.function("do_fork").return
 }
 # fremovexattr _______________________________________________
 # long sys_fremovexattr(int fd, char __user *name)
-probe syscall.fremovexattr = kernel.function("SyS_fremovexattr").call !,
-                             kernel.function("sys_fremovexattr").call
+probe syscall.fremovexattr = kernel.function("sys_fremovexattr").call
 {
 	name = "fremovexattr"
 	filedes = $fd
 	name_uaddr = $name
 	argstr = sprintf("FIXME PLEASE")
 }
-probe syscall.fremovexattr.return = kernel.function("SyS_fremovexattr").return !,
-                                    kernel.function("sys_fremovexattr").return
+probe syscall.fremovexattr.return = kernel.function("sys_fremovexattr").return
 {
 	name = "fremovexattr"
 	retstr = returnstr(1)
@@ -1233,8 +1134,7 @@ probe syscall.fremovexattr.return = kernel.function("SyS_fremovexattr").return !
  *               size_t size,
  *               int flags)
  */
-probe syscall.fsetxattr = kernel.function("SyS_fsetxattr").call !,
-                          kernel.function("sys_fsetxattr").call
+probe syscall.fsetxattr = kernel.function("sys_fsetxattr").call
 {
 	name = "fsetxattr"
 	filedes = $fd
@@ -1245,8 +1145,7 @@ probe syscall.fsetxattr = kernel.function("SyS_fsetxattr").call !,
 	flags = $flags
 	argstr = sprintf("%d, %s, %p, %d, %p", filedes, user_string_quoted($name), value_uaddr, size, flags)
 }
-probe syscall.fsetxattr.return = kernel.function("SyS_fsetxattr").return !,
-                                 kernel.function("sys_fsetxattr").return
+probe syscall.fsetxattr.return = kernel.function("sys_fsetxattr").return
 {
 	name = "fsetxattr"
 	retstr = returnstr(1)
@@ -1262,10 +1161,8 @@ probe syscall.fsetxattr.return = kernel.function("SyS_fsetxattr").return !,
 # long compat_sys_newfstat(unsigned int fd, struct compat_stat __user * statbuf)
 #
 probe syscall.fstat = kernel.function("sys_fstat").call ?,
-                      kernel.function("SyS_fstat64").call ?,
                       kernel.function("sys_fstat64").call ?,
                       kernel.function("sys32_fstat64").call ?,
-                      kernel.function("SyS_newfstat").call ?,
                       kernel.function("sys_newfstat").call ?,
                       kernel.function("sys_oabi_fstat64").call ?,
                       kernel.function("compat_sys_newfstat").call ?
@@ -1276,10 +1173,8 @@ probe syscall.fstat = kernel.function("sys_fstat").call ?,
 	argstr = sprintf("%d, %p", $fd, $statbuf)
 }
 probe syscall.fstat.return = kernel.function("sys_fstat").return ?,
-                             kernel.function("SyS_fstat64").return ?,
                              kernel.function("sys_fstat64").return ?,
                              kernel.function("sys32_fstat64").return ?,
-                             kernel.function("SyS_newfstat").return ?,
                              kernel.function("sys_newfstat").return ?,
                              kernel.function("sys_oabi_fstat64").return ?,
                              kernel.function("compat_sys_newfstat").return ?
@@ -1293,9 +1188,7 @@ probe syscall.fstat.return = kernel.function("sys_fstat").return ?,
 # long sys_newfstatat(int dfd, char __user *filename, struct stat __user *statbuf, int flag)
 # long sys_fstatat64(int dfd, char __user *filename, struct stat64 __user *statbuf, int flag)
 # long compat_sys_newfstatat(unsigned int dfd, char __user *filename, struct compat_stat __user *statbuf, int flag)
-probe syscall.fstatat = kernel.function("SyS_fstatat64").call ?,
-                        kernel.function("sys_fstatat64").call ?,
-                        kernel.function("SyS_newfstatat").call ?,
+probe syscall.fstatat = kernel.function("sys_fstatat64").call ?,
                         kernel.function("sys_newfstatat").call ?,
                         kernel.function("compat_sys_newfstatat").call ?,
                         kernel.function("sys32_fstatat64").call ?
@@ -1306,9 +1199,7 @@ probe syscall.fstatat = kernel.function("SyS_fstatat64").call ?,
 	buf_uaddr = $statbuf
 	argstr = sprintf("%s, %s, %p, %s", _dfd_str($dfd), user_string_quoted($filename), $statbuf, _at_flag_str($flag))
 }
-probe syscall.fstatat.return = kernel.function("SyS_fstatat64").return ?,
-                               kernel.function("sys_fstatat64").return ?,
-                               kernel.function("SyS_newfstatat").return ?,
+probe syscall.fstatat.return = kernel.function("sys_fstatat64").return ?,
                                kernel.function("sys_newfstatat").return ?,
                                kernel.function("compat_sys_newfstatat").return ?,
                                kernel.function("sys32_fstatat64").return ?
@@ -1322,7 +1213,6 @@ probe syscall.fstatat.return = kernel.function("SyS_fstatat64").return ?,
 # long compat_sys_fstatfs(unsigned int fd, struct compat_statfs __user *buf)
 #
 probe syscall.fstatfs = kernel.function("compat_sys_fstatfs").call ?,
-                        kernel.function("SyS_fstatfs").call !,
                         kernel.function("sys_fstatfs").call
 {
 	name = "fstatfs"
@@ -1331,7 +1221,6 @@ probe syscall.fstatfs = kernel.function("compat_sys_fstatfs").call ?,
 	argstr = sprintf("%d, %p", $fd, $buf)
 }
 probe syscall.fstatfs.return = kernel.function("compat_sys_fstatfs").return ?,
-                               kernel.function("SyS_fstatfs").return !,
                                kernel.function("sys_fstatfs").return
 {
 	name = "fstatfs"
@@ -1343,7 +1232,6 @@ probe syscall.fstatfs.return = kernel.function("compat_sys_fstatfs").return ?,
 # long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz, struct compat_statfs64 __user *buf)
 #
 probe syscall.fstatfs64 = kernel.function("compat_sys_fstatfs64").call ?,
-                          kernel.function("SyS_fstatfs64").call !,
                           kernel.function("sys_fstatfs64").call ?
 {
 	name = "fstatfs"
@@ -1353,7 +1241,6 @@ probe syscall.fstatfs64 = kernel.function("compat_sys_fstatfs64").call ?,
 	argstr = sprintf("%d, %d, %p", $fd, $sz, $buf)
 }
 probe syscall.fstatfs64.return = kernel.function("compat_sys_fstatfs64").return ?,
-                                 kernel.function("SyS_fstatfs64").return !,
                                  kernel.function("sys_fstatfs64").return ?
 {
 	name = "fstatfs"
@@ -1362,31 +1249,27 @@ probe syscall.fstatfs64.return = kernel.function("compat_sys_fstatfs64").return
 
 # fsync ______________________________________________________
 # long sys_fsync(unsigned int fd)
-probe syscall.fsync = kernel.function("SyS_fsync").call !,
-                      kernel.function("sys_fsync").call
+probe syscall.fsync = kernel.function("sys_fsync").call
 {
 	name = "fsync"
 	fd = $fd
 	argstr = sprint(fd)
 }
-probe syscall.fsync.return = kernel.function("SyS_fsync").return !,
-                             kernel.function("sys_fsync").return
+probe syscall.fsync.return = kernel.function("sys_fsync").return
 {
 	name = "fsync"
 	retstr = returnstr(1)
 }
 # ftruncate __________________________________________________
 # long sys_ftruncate(unsigned int fd, unsigned long length)
-probe syscall.ftruncate = kernel.function("SyS_ftruncate").call !,
-                          kernel.function("sys_ftruncate").call
+probe syscall.ftruncate = kernel.function("sys_ftruncate").call
 {
 	name = "ftruncate"
 	fd = $fd
 	length = $length
 	argstr = sprintf("%d, %d", fd, length)
 }
-probe syscall.ftruncate.return = kernel.function("SyS_ftruncate").return !,
-                                 kernel.function("sys_ftruncate").return
+probe syscall.ftruncate.return = kernel.function("sys_ftruncate").return
 {
 	name = "ftruncate"
 	retstr = returnstr(1)
@@ -1418,8 +1301,7 @@ probe syscall.ftruncate64.return = kernel.function("sys_ftruncate64").return ?
 #		struct compat_timespec __user *utime, u32 __user *uaddr2,
 #		u32 val3)
 #
-probe syscall.futex = kernel.function("SyS_futex").call !,
-                      kernel.function("sys_futex").call ?
+probe syscall.futex = kernel.function("sys_futex").call ?
 {
 	name = "futex"
 	futex_uaddr = $uaddr
@@ -1435,8 +1317,7 @@ probe syscall.futex = kernel.function("SyS_futex").call !,
 		argstr = sprintf("%p, %s, %d", $uaddr, _futex_op_str($op),
 			$val)
 }
-probe syscall.futex.return = kernel.function("SyS_futex").return !,
-                             kernel.function("sys_futex").return ?
+probe syscall.futex.return = kernel.function("sys_futex").return ?
 {
 	name = "futex"
 	retstr = returnstr(1)
@@ -1469,8 +1350,7 @@ probe syscall.compat_futex.return = kernel.function("compat_sys_futex").return ?
 # long compat_sys_futimesat(unsigned int dfd, char __user *filename, struct compat_timeval __user *t)
 #
 
-probe syscall.futimesat = kernel.function("SyS_futimesat").call !,
-                          kernel.function("sys_futimesat").call ?
+probe syscall.futimesat = kernel.function("sys_futimesat").call ?
 {
 	name = "futimesat"
 	dirfd = $dfd
@@ -1490,8 +1370,7 @@ probe syscall.compat_futimesat = kernel.function("compat_sys_futimesat").call ?
 	argstr = sprintf("%s, %s, %s", _dfd_str($dfd), user_string_quoted($filename),
 		_struct_compat_timeval_u($t, 2))
 }
-probe syscall.futimesat.return = kernel.function("SyS_futimesat").return !,
-                                 kernel.function("sys_futimesat").return ?
+probe syscall.futimesat.return = kernel.function("sys_futimesat").return ?
 {
 	name = "futimesat"
 	retstr = returnstr(1)
@@ -1504,16 +1383,14 @@ probe syscall.compat_futimesat.return = kernel.function("compat_sys_futimesat").
 
 # getcwd _____________________________________________________
 # long sys_getcwd(char __user *buf, unsigned long size)
-probe syscall.getcwd = kernel.function("SyS_getcwd").call !,
-                       kernel.function("sys_getcwd").call
+probe syscall.getcwd = kernel.function("sys_getcwd").call
 {
 	name = "getcwd"
 	buf_uaddr = $buf
 	size = $size
 	argstr = sprintf("%p, %d", buf_uaddr, size)
 }
-probe syscall.getcwd.return = kernel.function("SyS_getcwd").return !,
-                              kernel.function("sys_getcwd").return
+probe syscall.getcwd.return = kernel.function("sys_getcwd").return
 {
 	name = "getcwd"
 	retstr = returnstr(1)
@@ -1525,9 +1402,7 @@ probe syscall.getcwd.return = kernel.function("SyS_getcwd").return !,
 # long sys_getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
 # long compat_sys_getdents64(unsigned int fd, struct linux_dirent64 __user * dirent, unsigned int count)
 #
-probe syscall.getdents = kernel.function("SyS_getdents").call ?,
-                         kernel.function("sys_getdents").call ?,
-                         kernel.function("SyS_getdents64").call ?,
+probe syscall.getdents = kernel.function("sys_getdents").call ?,
                          kernel.function("sys_getdents64").call ?,
                          kernel.function("compat_sys_getdents").call ?,
                          kernel.function("compat_sys_getdents64").call ?
@@ -1538,9 +1413,7 @@ probe syscall.getdents = kernel.function("SyS_getdents").call ?,
 	count = $count
 	argstr = sprintf("%d, %p, %d", $fd, $dirent, $count)
 }
-probe syscall.getdents.return = kernel.function("SyS_getdents").return ?,
-                                kernel.function("sys_getdents").return ?,
-                                kernel.function("SyS_getdents64").return ?,
+probe syscall.getdents.return = kernel.function("sys_getdents").return ?,
                                 kernel.function("sys_getdents64").return ?,
                                 kernel.function("compat_sys_getdents").return ?,
                                 kernel.function("compat_sys_getdents64").return ?
@@ -1614,7 +1487,6 @@ probe syscall.getgid.return = kernel.function("sys_getgid16").return ?,
 #
 probe syscall.getgroups = kernel.function("sys_getgroups16").call ?,
                           kernel.function("sys32_getgroups16").call ?,
-                          kernel.function("SyS_getgroups").call !,
                           kernel.function("sys_getgroups").call ?
 {
 	name = "getgroups"
@@ -1624,7 +1496,6 @@ probe syscall.getgroups = kernel.function("sys_getgroups16").call ?,
 }
 probe syscall.getgroups.return = kernel.function("sys_getgroups16").return ?,
                                  kernel.function("sys32_getgroups16").return ?,
-                                 kernel.function("SyS_getgroups").return !,
                                  kernel.function("sys_getgroups").return ?
 {
 	name = "getgroups"
@@ -1633,16 +1504,14 @@ probe syscall.getgroups.return = kernel.function("sys_getgroups16").return ?,
 
 # gethostname ________________________________________________
 # long sys_gethostname(char __user *name, int len)
-probe syscall.gethostname = kernel.function("SyS_gethostname").call !,
-                            kernel.function("sys_gethostname").call ?
+probe syscall.gethostname = kernel.function("sys_gethostname").call ?
 {
 	name = "gethostname"
 	name_uaddr = $name
 	len = $len
 	argstr = sprintf ("%p, %d", name_uaddr, len)
 }
-probe syscall.gethostname.return = kernel.function("SyS_gethostname").return !,
-                                   kernel.function("sys_gethostname").return ?
+probe syscall.gethostname.return = kernel.function("sys_gethostname").return ?
 {
 	name = "gethostname"
 	retstr = returnstr(1)
@@ -1651,16 +1520,14 @@ probe syscall.gethostname.return = kernel.function("SyS_gethostname").return !,
 # getitimer __________________________________________________
 # sys_getitimer(int which, struct itimerval __user *value)
 #
-probe syscall.getitimer = kernel.function("SyS_getitimer").call !,
-                          kernel.function("sys_getitimer").call
+probe syscall.getitimer = kernel.function("sys_getitimer").call
 {
 	name = "getitimer"
 	which = $which
 	value_uaddr = $value
 	argstr = sprintf("%s, %p", _itimer_which_str($which), $value)
 }
-probe syscall.getitimer.return = kernel.function("SyS_getitimer").return !,
-                                 kernel.function("sys_getitimer").return
+probe syscall.getitimer.return = kernel.function("sys_getitimer").return
 {
 	name = "getitimer"
 	retstr = returnstr(1)
@@ -1691,7 +1558,6 @@ probe syscall.compat_getitimer.return = kernel.function("compat_sys_getitimer").
 #		     compat_ulong_t addr, compat_ulong_t flags)
 #
 probe syscall.get_mempolicy = kernel.function("compat_sys_get_mempolicy").call ?,
-                              kernel.function("SyS_get_mempolicy").call !,
                               kernel.function("sys_get_mempolicy").call ?
 {
 	name = "get_mempolicy"
@@ -1704,7 +1570,6 @@ probe syscall.get_mempolicy = kernel.function("compat_sys_get_mempolicy").call ?
 		$nmask, $maxnode, $addr, $flags)
 }
 probe syscall.get_mempolicy.return = kernel.function("compat_sys_get_mempolicy").return ?,
-                                     kernel.function("SyS_get_mempolicy").return !,
                                      kernel.function("sys_get_mempolicy").return ?
 {
 	name = "get_mempolicy"
@@ -1714,8 +1579,7 @@ probe syscall.get_mempolicy.return = kernel.function("compat_sys_get_mempolicy")
 # getpeername ________________________________________________
 # long sys_getpeername(int fd, struct sockaddr __user *usockaddr, int __user *usockaddr_len)
 #
-probe syscall.getpeername = kernel.function("SyS_getpeername").call !,
-                            kernel.function("sys_getpeername").call ?
+probe syscall.getpeername = kernel.function("sys_getpeername").call ?
 {
 	name = "getpeername"
 	s = $fd
@@ -1723,8 +1587,7 @@ probe syscall.getpeername = kernel.function("SyS_getpeername").call !,
 	namelen_uaddr = $usockaddr_len
 	argstr = sprintf("%d, %p, %p", $fd, $usockaddr, $usockaddr_len)
 }
-probe syscall.getpeername.return = kernel.function("SyS_getpeername").return !,
-                                   kernel.function("sys_getpeername").return ?
+probe syscall.getpeername.return = kernel.function("sys_getpeername").return ?
 {
 	name = "getpeername"
 	retstr = returnstr(1)
@@ -1732,15 +1595,13 @@ probe syscall.getpeername.return = kernel.function("SyS_getpeername").return !,
 
 # getpgid ____________________________________________________
 # long sys_getpgid(pid_t pid)
-probe syscall.getpgid = kernel.function("SyS_getpgid").call !,
-                        kernel.function("sys_getpgid").call
+probe syscall.getpgid = kernel.function("sys_getpgid").call
 {
 	name = "getpgid"
 	pid = $pid
 	argstr = sprintf("%d", $pid)
 }
-probe syscall.getpgid.return = kernel.function("SyS_getpgid").return !,
-                               kernel.function("sys_getpgid").return
+probe syscall.getpgid.return = kernel.function("sys_getpgid").return
 {
 	name = "getpgid"
 	retstr = returnstr(1)
@@ -1787,16 +1648,14 @@ probe syscall.getppid.return = kernel.function("sys_getppid").return
 
 # getpriority ________________________________________________
 # long sys_getpriority(int which, int who)
-probe syscall.getpriority = kernel.function("SyS_getpriority").call !,
-                            kernel.function("sys_getpriority").call
+probe syscall.getpriority = kernel.function("sys_getpriority").call
 {
 	name = "getpriority"
 	which = $which
 	who = $who
 	argstr = sprintf("%s, %d", _priority_which_str(which), who)
 }
-probe syscall.getpriority.return = kernel.function("SyS_getpriority").return !,
-                                   kernel.function("sys_getpriority").return
+probe syscall.getpriority.return = kernel.function("sys_getpriority").return
 {
 	name = "getpriority"
 	retstr = returnstr(1)
@@ -1810,7 +1669,6 @@ probe syscall.getpriority.return = kernel.function("SyS_getpriority").return !,
 #                 old_uid_t __user *egid,
 #                 old_uid_t __user *sgid)
 probe syscall.getresgid = kernel.function("sys_getresgid16").call ?,
-                          kernel.function("SyS_getresgid").call !,
                           kernel.function("sys_getresgid").call
 {
 	name = "getresgid"
@@ -1820,7 +1678,6 @@ probe syscall.getresgid = kernel.function("sys_getresgid16").call ?,
 	argstr = sprintf("%p, %p, %p", $rgid, $egid, $sgid)
 }
 probe syscall.getresgid.return = kernel.function("sys_getresgid16").return ?,
-                                 kernel.function("SyS_getresgid").return !,
                                  kernel.function("sys_getresgid").return
 {
 	name = "getresgid"
@@ -1832,7 +1689,6 @@ probe syscall.getresgid.return = kernel.function("sys_getresgid16").return ?,
 #		uid_t __user *euid,
 #		uid_t __user *suid)
 probe syscall.getresuid = kernel.function("sys_getresuid16").call ?,
-                          kernel.function("SyS_getresuid").call !,
                           kernel.function("sys_getresuid").call
 {
 	name = "getresuid"
@@ -1842,7 +1698,6 @@ probe syscall.getresuid = kernel.function("sys_getresuid16").call ?,
 	argstr = sprintf("%p, %p, %p", $ruid, $euid, $suid)
 }
 probe syscall.getresuid.return = kernel.function("sys_getresuid16").return ?,
-                                 kernel.function("SyS_getresuid").return !,
                                  kernel.function("sys_getresuid").return
 {
 	name = "getresuid"
@@ -1853,9 +1708,7 @@ probe syscall.getresuid.return = kernel.function("sys_getresuid16").return ?,
 # long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim)
 # long sys_old_getrlimit(unsigned int resource, struct rlimit __user *rlim)
 # long compat_sys_getrlimit (unsigned int resource, struct compat_rlimit __user *rlim)
-probe syscall.getrlimit = kernel.function("SyS_getrlimit").call ?,
-                          kernel.function("sys_getrlimit").call ?,
-                          kernel.function("SyS_old_getrlimit").call ?,
+probe syscall.getrlimit = kernel.function("sys_getrlimit").call ?,
                           kernel.function("sys_old_getrlimit").call ?,
                           kernel.function("compat_sys_getrlimit").call ?
 {
@@ -1864,9 +1717,7 @@ probe syscall.getrlimit = kernel.function("SyS_getrlimit").call ?,
 	rlim_uaddr = $rlim
 	argstr = sprintf("%s, %p", _rlimit_resource_str($resource), $rlim)
 }
-probe syscall.getrlimit.return = kernel.function("SyS_getrlimit").return ?,
-                                 kernel.function("sys_getrlimit").return ?,
-                                 kernel.function("SyS_old_getrlimit").return ?,
+probe syscall.getrlimit.return = kernel.function("sys_getrlimit").return ?,
                                  kernel.function("sys_old_getrlimit").return ?,
                                  kernel.function("compat_sys_getrlimit").return ?
 {
@@ -1876,8 +1727,7 @@ probe syscall.getrlimit.return = kernel.function("SyS_getrlimit").return ?,
 
 # getrusage __________________________________________________
 # long sys_getrusage(int who, struct rusage __user *ru)
-probe syscall.getrusage = kernel.function("SyS_getrusage").call !,
-                          kernel.function("sys_getrusage").call
+probe syscall.getrusage = kernel.function("sys_getrusage").call
 {
 	name = "getrusage"
 	who = $who
@@ -1889,8 +1739,7 @@ probe syscall.getrusage = kernel.function("SyS_getrusage").call !,
 	usage_uaddr = $ru
 	argstr = sprintf("%s, %p", who_str, usage_uaddr)
 }
-probe syscall.getrusage.return = kernel.function("SyS_getrusage").return !,
-                                 kernel.function("sys_getrusage").return
+probe syscall.getrusage.return = kernel.function("sys_getrusage").return
 {
 	name = "getrusage"
 	retstr = returnstr(1)
@@ -1898,15 +1747,13 @@ probe syscall.getrusage.return = kernel.function("SyS_getrusage").return !,
 
 # getsid _____________________________________________________
 # long sys_getsid(pid_t pid)
-probe syscall.getsid = kernel.function("SyS_getsid").call !,
-                       kernel.function("sys_getsid").call
+probe syscall.getsid = kernel.function("sys_getsid").call
 {
 	name = "getsid"
 	pid = $pid
 	argstr = sprint(pid)
 }
-probe syscall.getsid.return = kernel.function("SyS_getsid").return !,
-                              kernel.function("sys_getsid").return
+probe syscall.getsid.return = kernel.function("sys_getsid").return
 {
 	name = "getsid"
 	retstr = returnstr(1)
@@ -1916,8 +1763,7 @@ probe syscall.getsid.return = kernel.function("SyS_getsid").return !,
 # long sys_getsockname(int fd,
 #		struct sockaddr __user *usockaddr,
 #		int __user *usockaddr_len)
-probe syscall.getsockname = kernel.function("SyS_getsockname").call !,
-                            kernel.function("sys_getsockname").call ?
+probe syscall.getsockname = kernel.function("sys_getsockname").call ?
 {
 	name = "getsockname"
 	s = $fd
@@ -1925,8 +1771,7 @@ probe syscall.getsockname = kernel.function("SyS_getsockname").call !,
 	namelen_uaddr = $usockaddr_len
 	argstr = sprintf("%d, %p, %p", $fd, $usockaddr, $usockaddr_len)
 }
-probe syscall.getsockname.return = kernel.function("SyS_getsockname").return !,
-                                   kernel.function("sys_getsockname").return ?
+probe syscall.getsockname.return = kernel.function("sys_getsockname").return ?
 {
 	name = "getsockname"
 	retstr = returnstr(1)
@@ -1940,7 +1785,6 @@ probe syscall.getsockname.return = kernel.function("SyS_getsockname").return !,
 #                int __user *optlen)
 #
 probe syscall.getsockopt = kernel.function("compat_sys_getsockopt").call ?,
-                           kernel.function("SyS_getsockopt").call !,
                            kernel.function("sys_getsockopt").call ?
 {
 	name = "getsockopt"
@@ -1955,7 +1799,6 @@ probe syscall.getsockopt = kernel.function("compat_sys_getsockopt").call ?,
 		_sockopt_optname_str($optname), $optval, $optlen)
 }
 probe syscall.getsockopt.return = kernel.function("compat_sys_getsockopt").return ?,
-                                  kernel.function("SyS_getsockopt").return !,
                                   kernel.function("sys_getsockopt").return ?
 {
 	name = "getsockopt"
@@ -1984,7 +1827,6 @@ probe syscall.gettid.return = kernel.function("sys_gettid").return
 #	struct timezone __user *tz)
 probe syscall.gettimeofday = kernel.function("compat_sys_gettimeofday").call ?,
                              kernel.function("sys32_gettimeofday").call ?,
-                             kernel.function("SyS_gettimeofday").call !,
                              kernel.function("sys_gettimeofday").call
 {
 	name = "gettimeofday"
@@ -1995,7 +1837,6 @@ probe syscall.gettimeofday = kernel.function("compat_sys_gettimeofday").call ?,
 
 probe syscall.gettimeofday.return = kernel.function("compat_sys_gettimeofday").return ?,
                                     kernel.function("sys32_gettimeofday").return ?,
-                                    kernel.function("SyS_gettimeofday").return !,
                                     kernel.function("sys_gettimeofday").return
 {
 	name = "gettimeofday"
@@ -2025,8 +1866,7 @@ probe syscall.getuid.return = kernel.function("sys_getuid16").return ?,
 # getxattr ___________________________________________________
 # ssize_t sys_getxattr(char __user *path, char __user *name,
 #		void __user *value, size_t size)
-probe syscall.getxattr = kernel.function("SyS_getxattr").call !,
-                         kernel.function("sys_getxattr").call
+probe syscall.getxattr = kernel.function("sys_getxattr").call
 {
 	name = "getxattr"
 	path = user_string(@defined($pathname) ? $pathname : $path)
@@ -2039,8 +1879,7 @@ probe syscall.getxattr = kernel.function("SyS_getxattr").call !,
 		user_string_quoted($name),
 		$value, $size)
 }
-probe syscall.getxattr.return = kernel.function("SyS_getxattr").return !,
-                                kernel.function("sys_getxattr").return
+probe syscall.getxattr.return = kernel.function("sys_getxattr").return
 {
 	name = "getxattr"
 	retstr = returnstr(1)
@@ -2051,8 +1890,7 @@ probe syscall.getxattr.return = kernel.function("SyS_getxattr").return !,
 #		unsigned long len,
 #		const char __user *uargs)
 #
-probe syscall.init_module = kernel.function("SyS_init_module").call !,
-                            kernel.function("sys_init_module").call ?
+probe syscall.init_module = kernel.function("sys_init_module").call ?
 {
 	name = "init_module"
 	umod_uaddr = $umod
@@ -2060,8 +1898,7 @@ probe syscall.init_module = kernel.function("SyS_init_module").call !,
 	uargs = user_string($uargs)
 	argstr = sprintf("%p, %d, %s", $umod, $len, user_string_quoted($uargs))
 }
-probe syscall.init_module.return = kernel.function("SyS_init_module").return !,
-                                   kernel.function("sys_init_module").return ?
+probe syscall.init_module.return = kernel.function("sys_init_module").return ?
 {
 	name = "init_module"
 	retstr = returnstr(1)
@@ -2071,8 +1908,7 @@ probe syscall.init_module.return = kernel.function("SyS_init_module").return !,
 #
 # long sys_inotify_add_watch(int fd, const char __user *path, u32 mask)
 #
-probe syscall.inotify_add_watch = kernel.function("SyS_inotify_add_watch").call !,
-                                  kernel.function("sys_inotify_add_watch").call ?
+probe syscall.inotify_add_watch = kernel.function("sys_inotify_add_watch").call ?
 {
 	name = "inotify_add_watch"
 	fd = $fd
@@ -2084,8 +1920,7 @@ probe syscall.inotify_add_watch = kernel.function("SyS_inotify_add_watch").call
 		_inotify_watch_mask_str($mask))
 }
 
-probe syscall.inotify_add_watch.return = kernel.function("SyS_inotify_add_watch").return !,
-                                         kernel.function("sys_inotify_add_watch").return ?
+probe syscall.inotify_add_watch.return = kernel.function("sys_inotify_add_watch").return ?
 {
 	name = "inotify_add_watch"
 	retstr = returnstr(1)
@@ -2095,9 +1930,7 @@ probe syscall.inotify_add_watch.return = kernel.function("SyS_inotify_add_watch"
 #
 # long sys_inotify_init(void)
 #
-probe syscall.inotify_init = kernel.function("SyS_inotify_init1").call !,
-                             kernel.function("sys_inotify_init1").call !,
-                             kernel.function("SyS_inotify_init").call !,
+probe syscall.inotify_init = kernel.function("sys_inotify_init1").call !,
                              kernel.function("sys_inotify_init").call ?
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -2109,9 +1942,7 @@ probe syscall.inotify_init = kernel.function("SyS_inotify_init1").call !,
 		argstr = _inotify_init1_flag_str(flags)
 	}
 }
-probe syscall.inotify_init.return = kernel.function("SyS_inotify_init1").return !,
-                                    kernel.function("sys_inotify_init1").return !,
-                                    kernel.function("SyS_inotify_init").return !,
+probe syscall.inotify_init.return = kernel.function("sys_inotify_init1").return !,
                                     kernel.function("sys_inotify_init").return ?
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -2123,16 +1954,14 @@ probe syscall.inotify_init.return = kernel.function("SyS_inotify_init1").return
 #
 # long sys_inotify_rm_watch(int fd, u32 wd)
 #
-probe syscall.inotify_rm_watch = kernel.function("SyS_inotify_rm_watch").call !,
-                                 kernel.function("sys_inotify_rm_watch").call ?
+probe syscall.inotify_rm_watch = kernel.function("sys_inotify_rm_watch").call ?
 {
 	name = "inotify_rm_watch"
 	fd = $fd
 	wd = $wd
 	argstr = sprintf("%d, %d", $fd, $wd)
 }
-probe syscall.inotify_rm_watch.return = kernel.function("SyS_inotify_rm_watch").return !,
-                                        kernel.function("sys_inotify_rm_watch").return ?
+probe syscall.inotify_rm_watch.return = kernel.function("sys_inotify_rm_watch").return ?
 {
 	name = "inotify_rm_watch"
 	retstr = returnstr(1)
@@ -2142,8 +1971,7 @@ probe syscall.inotify_rm_watch.return = kernel.function("SyS_inotify_rm_watch").
 # long sys_io_cancel(aio_context_t ctx_id,
 #		struct iocb __user *iocb,
 #		struct io_event __user *result)
-probe syscall.io_cancel = kernel.function("SyS_io_cancel").call !,
-                          kernel.function("sys_io_cancel").call
+probe syscall.io_cancel = kernel.function("sys_io_cancel").call
 {
 	name = "io_cancel"
 	ctx_id = $ctx_id
@@ -2151,8 +1979,7 @@ probe syscall.io_cancel = kernel.function("SyS_io_cancel").call !,
 	result_uaddr = $result
 	argstr = sprintf("%d, %p, %p", ctx_id, iocb_uaddr, result_uaddr)
 }
-probe syscall.io_cancel.return = kernel.function("SyS_io_cancel").return !,
-                                 kernel.function("sys_io_cancel").return
+probe syscall.io_cancel.return = kernel.function("sys_io_cancel").return
 {
 	name = "io_cancel"
 	retstr = returnstr(1)
@@ -2163,7 +1990,6 @@ probe syscall.io_cancel.return = kernel.function("SyS_io_cancel").return !,
 # long compat_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
 #
 probe syscall.ioctl = kernel.function("compat_sys_ioctl").call ?,
-                      kernel.function("SyS_ioctl").call !,
                       kernel.function("sys_ioctl").call ?
 {
 	name = "ioctl"
@@ -2173,7 +1999,6 @@ probe syscall.ioctl = kernel.function("compat_sys_ioctl").call ?,
 	argstr = sprintf("%d, %d, %p", $fd, $cmd, $arg)
 }
 probe syscall.ioctl.return = kernel.function("compat_sys_ioctl").return ?,
-                             kernel.function("SyS_ioctl").return !,
                              kernel.function("sys_ioctl").return ?
 {
 	name = "ioctl"
@@ -2182,15 +2007,13 @@ probe syscall.ioctl.return = kernel.function("compat_sys_ioctl").return ?,
 
 # io_destroy _________________________________________________
 # long sys_io_destroy(aio_context_t ctx)
-probe syscall.io_destroy = kernel.function("SyS_io_destroy").call !,
-                           kernel.function("sys_io_destroy").call
+probe syscall.io_destroy = kernel.function("sys_io_destroy").call
 {
 	name = "io_destroy"
 	ctx = $ctx
 	argstr = sprintf("%d", ctx)
 }
-probe syscall.io_destroy.return = kernel.function("SyS_io_destroy").return !,
-                                  kernel.function("sys_io_destroy").return
+probe syscall.io_destroy.return = kernel.function("sys_io_destroy").return
 {
 	name = "io_destroy"
 	retstr = returnstr(1)
@@ -2209,7 +2032,6 @@ probe syscall.io_destroy.return = kernel.function("SyS_io_destroy").return !,
 #		 struct compat_timespec __user *timeout)
 #
 probe syscall.io_getevents = kernel.function("compat_sys_io_getevents").call ?,
-                             kernel.function("SyS_io_getevents").call !,
                              kernel.function("sys_io_getevents").call ?
 {
 	name = "io_getevents"
@@ -2223,7 +2045,6 @@ probe syscall.io_getevents = kernel.function("compat_sys_io_getevents").call ?,
 		$nr, $events, $timeout, timestr)
 }
 probe syscall.io_getevents.return = kernel.function("compat_sys_io_getevents").return ?,
-                                    kernel.function("SyS_io_getevents").return !,
                                     kernel.function("sys_io_getevents").return ?
 {
 	name = "io_getevents"
@@ -2250,8 +2071,7 @@ probe syscall.ioperm.return = kernel.function("sys_ioperm").return ?
 # io_setup ___________________________________________________
 # long sys_io_setup(unsigned nr_events, aio_context_t __user *ctxp)
 #
-probe syscall.io_setup = kernel.function("SyS_io_setup").call !,
-                         kernel.function("sys_io_setup").call
+probe syscall.io_setup = kernel.function("sys_io_setup").call
 {
 	name = "io_setup"
 	maxevents = $nr_events
@@ -2259,8 +2079,7 @@ probe syscall.io_setup = kernel.function("SyS_io_setup").call !,
 	argstr = sprintf("%d, %p", $nr_events, $ctxp)
 }
 
-probe syscall.io_setup.return = kernel.function("SyS_io_setup").return !,
-                                kernel.function("sys_io_setup").return
+probe syscall.io_setup.return = kernel.function("sys_io_setup").return
 {
 	name = "io_setup"
 	retstr = returnstr(1)
@@ -2284,8 +2103,7 @@ probe syscall.compat_io_setup.return = kernel.function("compat_sys_io_setup").re
 # io_submit __________________________________________________
 # long sys_io_submit(aio_context_t ctx_id, long nr, struct iocb __user * __user *iocbpp)
 #
-probe syscall.io_submit = kernel.function("SyS_io_submit").call !,
-                          kernel.function("sys_io_submit").call
+probe syscall.io_submit = kernel.function("sys_io_submit").call
 {
 	name = "io_submit"
 	ctx_id = $ctx_id
@@ -2293,8 +2111,7 @@ probe syscall.io_submit = kernel.function("SyS_io_submit").call !,
 	iocbpp_uaddr = $iocbpp
 	argstr = sprintf("%d, %d, %p", $ctx_id, $nr, $iocbpp)
 }
-probe syscall.io_submit.return = kernel.function("SyS_io_submit").return !,
-                                 kernel.function("sys_io_submit").return
+probe syscall.io_submit.return = kernel.function("sys_io_submit").return
 {
 	name = "io_submit"
 	retstr = returnstr(1)
@@ -2318,16 +2135,14 @@ probe syscall.compat_io_submit.return = kernel.function("compat_sys_io_submit").
 # ioprio_get _________________________________________________
 # long sys_ioprio_get(int which, int who)
 #
-probe syscall.ioprio_get = kernel.function("SyS_ioprio_get").call !,
-                           kernel.function("sys_ioprio_get").call ?
+probe syscall.ioprio_get = kernel.function("sys_ioprio_get").call ?
 {
 	name = "ioprio_get"
 	which = $which
 	who = $who
 	argstr = sprintf("%d, %d", $which, $who)
 }
-probe syscall.ioprio_get.return = kernel.function("SyS_ioprio_get").return !,
-                                  kernel.function("sys_ioprio_get").return ?
+probe syscall.ioprio_get.return = kernel.function("sys_ioprio_get").return ?
 {
 	name = "ioprio_get"
 	retstr = returnstr(1)
@@ -2336,8 +2151,7 @@ probe syscall.ioprio_get.return = kernel.function("SyS_ioprio_get").return !,
 # ioprio_set _________________________________________________
 # long sys_ioprio_set(int which, int who, int ioprio)
 #
-probe syscall.ioprio_set = kernel.function("SyS_ioprio_set").call !,
-                           kernel.function("sys_ioprio_set").call ?
+probe syscall.ioprio_set = kernel.function("sys_ioprio_set").call ?
 {
 	name = "ioprio_set"
 	which = $which
@@ -2345,8 +2159,7 @@ probe syscall.ioprio_set = kernel.function("SyS_ioprio_set").call !,
 	ioprio = $ioprio
 	argstr = sprintf("%d, %d, %d", $which, $who, $ioprio)
 }
-probe syscall.ioprio_set.return = kernel.function("SyS_ioprio_set").return !,
-                                  kernel.function("sys_ioprio_set").return ?
+probe syscall.ioprio_set.return = kernel.function("sys_ioprio_set").return ?
 {
 	name = "ioprio_set"
 	retstr = returnstr(1)
@@ -2363,7 +2176,6 @@ probe syscall.ioprio_set.return = kernel.function("SyS_ioprio_set").return !,
 #		unsigned long flags)
 #
 probe syscall.kexec_load = kernel.function("compat_sys_kexec_load").call ?,
-                           kernel.function("SyS_kexec_load").call !,
                            kernel.function("sys_kexec_load").call ?
 {
 	name = "kexec_load"
@@ -2374,7 +2186,6 @@ probe syscall.kexec_load = kernel.function("compat_sys_kexec_load").call ?,
 	argstr = sprintf("%p, %d, %p, %d", $entry, $nr_segments, $segments, $flags)
 }
 probe syscall.kexec_load.return = kernel.function("compat_sys_kexec_load").return ?,
-                                  kernel.function("SyS_kexec_load").return !,
                                   kernel.function("sys_kexec_load").return ?
 {
 	name = "kexec_load"
@@ -2390,7 +2201,6 @@ probe syscall.kexec_load.return = kernel.function("compat_sys_kexec_load").retur
 # long compat_sys_keyctl(u32 option, u32 arg2, u32 arg3, u32 arg4, u32 arg5)
 #
 probe syscall.keyctl = kernel.function("compat_sys_keyctl").call ?,
-                       kernel.function("SyS_keyctl").call !,
                        kernel.function("sys_keyctl").call ?
 {
 	name = "keyctl"
@@ -2398,7 +2208,6 @@ probe syscall.keyctl = kernel.function("compat_sys_keyctl").call ?,
 
 }
 probe syscall.keyctl.return = kernel.function("compat_sys_keyctl").return ?,
-                              kernel.function("SyS_keyctl").return !,
                               kernel.function("sys_keyctl").return ?
 {
 	name = "keyctl"
@@ -2407,16 +2216,14 @@ probe syscall.keyctl.return = kernel.function("compat_sys_keyctl").return ?,
 
 # kill _______________________________________________________
 # long sys_kill(int pid, int sig)
-probe syscall.kill = kernel.function("SyS_kill").call !,
-                     kernel.function("sys_kill").call
+probe syscall.kill = kernel.function("sys_kill").call
 {
 	name = "kill"
 	pid = $pid
 	sig = $sig
 	argstr = sprintf("%d, %s", $pid, _signal_name($sig))
 }
-probe syscall.kill.return = kernel.function("SyS_kill").return !,
-                            kernel.function("sys_kill").return
+probe syscall.kill.return = kernel.function("sys_kill").return
 {
 	name = "kill"
 	retstr = returnstr(1)
@@ -2425,8 +2232,7 @@ probe syscall.kill.return = kernel.function("SyS_kill").return !,
 # lchown _____________________________________________________
 # long sys_lchown(const char __user * filename, uid_t user, gid_t group)
 #
-probe syscall.lchown = kernel.function("SyS_lchown").call !,
-                       kernel.function("sys_lchown").call
+probe syscall.lchown = kernel.function("sys_lchown").call
 {
 	name = "lchown"
 	path = user_string($filename)
@@ -2434,8 +2240,7 @@ probe syscall.lchown = kernel.function("SyS_lchown").call !,
 	group = __int32($group)
 	argstr = sprintf("%s, %d, %d", user_string_quoted($filename), owner, group)
 }
-probe syscall.lchown.return = kernel.function("SyS_lchown").return !,
-                              kernel.function("sys_lchown").return
+probe syscall.lchown.return = kernel.function("sys_lchown").return
 {
 	name = "lchown"
 	retstr = returnstr(1)
@@ -2465,8 +2270,7 @@ probe syscall.lchown16.return = kernel.function("sys_lchown16").return ?
 #               void __user *value,
 #               size_t size)
 #
-probe syscall.lgetxattr = kernel.function("SyS_lgetxattr").call !,
-                          kernel.function("sys_lgetxattr").call
+probe syscall.lgetxattr = kernel.function("sys_lgetxattr").call
 {
 	name = "lgetxattr"
 	path = user_string(@defined($pathname) ? $pathname : $path)
@@ -2479,8 +2283,7 @@ probe syscall.lgetxattr = kernel.function("SyS_lgetxattr").call !,
 		user_string_quoted($name),
 		value_uaddr, size)
 }
-probe syscall.lgetxattr.return = kernel.function("SyS_lgetxattr").return !,
-                                 kernel.function("sys_lgetxattr").return
+probe syscall.lgetxattr.return = kernel.function("sys_lgetxattr").return
 {
 	name = "lgetxattr"
 	retstr = returnstr(1)
@@ -2489,8 +2292,7 @@ probe syscall.lgetxattr.return = kernel.function("SyS_lgetxattr").return !,
 # link _______________________________________________________
 # long sys_link(const char __user * oldname,
 #          const char __user * newname)
-probe syscall.link = kernel.function("SyS_link").call !,
-                     kernel.function("sys_link").call
+probe syscall.link = kernel.function("sys_link").call
 {
 	name = "link"
 	oldpath = user_string($oldname)
@@ -2499,8 +2301,7 @@ probe syscall.link = kernel.function("SyS_link").call !,
 		user_string_quoted($oldname),
 		user_string_quoted($newname))
 }
-probe syscall.link.return = kernel.function("SyS_link").return !,
-                            kernel.function("sys_link").return
+probe syscall.link.return = kernel.function("sys_link").return
 {
 	name = "link"
 	retstr = returnstr(1)
@@ -2510,8 +2311,7 @@ probe syscall.link.return = kernel.function("SyS_link").return !,
 # new function with 2.6.16
 # long sys_linkat(int olddfd, const char __user *oldname,
 #	int newdfd, const char __user *newname, int flags)
-probe syscall.linkat = kernel.function("SyS_linkat").call !,
-                       kernel.function("sys_linkat").call ?
+probe syscall.linkat = kernel.function("sys_linkat").call ?
 {
 	name = "linkat"
 	olddirfd = $olddfd
@@ -2527,8 +2327,7 @@ probe syscall.linkat = kernel.function("SyS_linkat").call !,
 		newdirfd_str, user_string_quoted($newname),
 		flags_str)
 }
-probe syscall.linkat.return = kernel.function("SyS_linkat").return !,
-                              kernel.function("sys_linkat").return ?
+probe syscall.linkat.return = kernel.function("sys_linkat").return ?
 {
 	name = "linkat"
 	retstr = returnstr(1)
@@ -2536,16 +2335,14 @@ probe syscall.linkat.return = kernel.function("SyS_linkat").return !,
 
 # listen _____________________________________________________
 # long sys_listen(int fd, int backlog)
-probe syscall.listen = kernel.function("SyS_listen").call !,
-                       kernel.function("sys_listen").call ?
+probe syscall.listen = kernel.function("sys_listen").call ?
 {
 	name = "listen"
 	sockfd = $fd
 	backlog = $backlog
 	argstr = sprintf("%d, %d", $fd, $backlog)
 }
-probe syscall.listen.return = kernel.function("SyS_listen").return !,
-                              kernel.function("sys_listen").return ?
+probe syscall.listen.return = kernel.function("sys_listen").return ?
 {
 	name = "listen"
 	retstr = returnstr(1)
@@ -2554,8 +2351,7 @@ probe syscall.listen.return = kernel.function("SyS_listen").return !,
 # listxattr __________________________________________________
 # ssize_t sys_listxattr(char __user *path, char __user *list, size_t size)
 #
-probe syscall.listxattr = kernel.function("SyS_listxattr").call !,
-                          kernel.function("sys_listxattr").call
+probe syscall.listxattr = kernel.function("sys_listxattr").call
 {
 	name = "listxattr"
 	list_uaddr = $list
@@ -2566,8 +2362,7 @@ probe syscall.listxattr = kernel.function("SyS_listxattr").call !,
 		user_string_quoted(@defined($pathname) ? $pathname : $path),
 		$list, $size)
 }
-probe syscall.listxattr.return = kernel.function("SyS_listxattr").return !,
-                                 kernel.function("sys_listxattr").return
+probe syscall.listxattr.return = kernel.function("sys_listxattr").return
 {
 	name = "listxattr"
 	retstr = returnstr(1)
@@ -2576,8 +2371,7 @@ probe syscall.listxattr.return = kernel.function("SyS_listxattr").return !,
 # llistxattr _________________________________________________
 # ssize_t sys_llistxattr(char __user *path, char __user *list, size_t size)
 #
-probe syscall.llistxattr = kernel.function("SyS_llistxattr").call !,
-                           kernel.function("sys_llistxattr").call
+probe syscall.llistxattr = kernel.function("sys_llistxattr").call
 {
 	name = "llistxattr"
 	list_uaddr = $list
@@ -2588,8 +2382,7 @@ probe syscall.llistxattr = kernel.function("SyS_llistxattr").call !,
 		user_string_quoted(@defined($pathname) ? $pathname : $path),
 		$list, $size)
 }
-probe syscall.llistxattr.return = kernel.function("SyS_llistxattr").return !,
-                                  kernel.function("sys_llistxattr").return
+probe syscall.llistxattr.return = kernel.function("sys_llistxattr").return
 {
 	name = "llistxattr"
 	retstr = returnstr(1)
@@ -2601,8 +2394,7 @@ probe syscall.llistxattr.return = kernel.function("SyS_llistxattr").return !,
 #            unsigned long offset_low,
 #            loff_t __user * result,
 #            unsigned int origin)
-probe syscall.llseek = kernel.function("SyS_llseek").call !,
-                       kernel.function("sys_llseek").call ?
+probe syscall.llseek = kernel.function("sys_llseek").call ?
 {
 	name = "llseek"
 	fd = $fd
@@ -2614,8 +2406,7 @@ probe syscall.llseek = kernel.function("SyS_llseek").call !,
 	argstr = sprintf("%d, 0x%x, 0x%x, %p, %s", $fd, $offset_high,
 		$offset_low, $result, whence_str)
 }
-probe syscall.llseek.return = kernel.function("SyS_llseek").return !,
-                              kernel.function("sys_llseek").return ?
+probe syscall.llseek.return = kernel.function("sys_llseek").return ?
 {
 	name = "llseek"
 	retstr = returnstr(1)
@@ -2624,8 +2415,7 @@ probe syscall.llseek.return = kernel.function("SyS_llseek").return !,
 # lookup_dcookie _____________________________________________
 # long sys_lookup_dcookie(u64 cookie64, char __user * buf, size_t len)
 #
-probe syscall.lookup_dcookie = kernel.function("SyS_lookup_dcookie").call !,
-                               kernel.function("sys_lookup_dcookie").call ?
+probe syscall.lookup_dcookie = kernel.function("sys_lookup_dcookie").call ?
 {
 	name = "lookup_dcookie"
 	cookie = $cookie64
@@ -2633,8 +2423,7 @@ probe syscall.lookup_dcookie = kernel.function("SyS_lookup_dcookie").call !,
 	len = $len
 	argstr = sprintf("%d, %p, %d", $cookie64, $buf, $len)
 }
-probe syscall.lookup_dcookie.return = kernel.function("SyS_lookup_dcookie").return !,
-                                      kernel.function("sys_lookup_dcookie").return ?
+probe syscall.lookup_dcookie.return = kernel.function("sys_lookup_dcookie").return ?
 {
 	name = "lookup_dcookie"
 	retstr = returnstr(1)
@@ -2643,8 +2432,7 @@ probe syscall.lookup_dcookie.return = kernel.function("SyS_lookup_dcookie").retu
 # lremovexattr _______________________________________________
 # long sys_lremovexattr(char __user *path, char __user *name)
 #
-probe syscall.lremovexattr = kernel.function("SyS_lremovexattr").call !,
-                             kernel.function("sys_lremovexattr").call
+probe syscall.lremovexattr = kernel.function("sys_lremovexattr").call
 {
 	name = "lremovexattr"
 	name_uaddr = $name
@@ -2655,8 +2443,7 @@ probe syscall.lremovexattr = kernel.function("SyS_lremovexattr").call !,
 		user_string_quoted(@defined($pathname) ? $pathname : $path),
 		user_string_quoted($name))
 }
-probe syscall.lremovexattr.return = kernel.function("SyS_lremovexattr").return !,
-                                    kernel.function("sys_lremovexattr").return
+probe syscall.lremovexattr.return = kernel.function("sys_lremovexattr").return
 {
 	name = "lremovexattr"
 	retstr = returnstr(1)
@@ -2664,8 +2451,7 @@ probe syscall.lremovexattr.return = kernel.function("SyS_lremovexattr").return !
 
 # lseek ______________________________________________________
 # off_t sys_lseek(unsigned int fd, off_t offset, unsigned int origin)
-probe syscall.lseek = kernel.function("SyS_lseek").call !,
-                      kernel.function("sys_lseek").call
+probe syscall.lseek = kernel.function("sys_lseek").call
 {
 	name = "lseek"
 	fildes = $fd
@@ -2675,8 +2461,7 @@ probe syscall.lseek = kernel.function("SyS_lseek").call !,
 	whence_str = _seek_whence_str($origin)
 	argstr = sprintf("%d, %d, %s", $fd, offset, whence_str)
 }
-probe syscall.lseek.return = kernel.function("SyS_lseek").return !,
-                             kernel.function("sys_lseek").return
+probe syscall.lseek.return = kernel.function("sys_lseek").return
 {
 	name = "lseek"
 	retstr = returnstr(1)
@@ -2689,8 +2474,7 @@ probe syscall.lseek.return = kernel.function("SyS_lseek").return !,
 #               size_t size,
 #               int flags)
 #
-probe syscall.lsetxattr = kernel.function("SyS_lsetxattr").call !,
-                          kernel.function("sys_lsetxattr").call
+probe syscall.lsetxattr = kernel.function("sys_lsetxattr").call
 {
 	name = "lsetxattr"
 	path_uaddr = (@defined($pathname) ? $pathname : $path)
@@ -2705,8 +2489,7 @@ probe syscall.lsetxattr = kernel.function("SyS_lsetxattr").call !,
 			user_string_quoted($name),
 			value_uaddr, $size, $flags)
 }
-probe syscall.lsetxattr.return = kernel.function("SyS_lsetxattr").return !,
-                                 kernel.function("sys_lsetxattr").return
+probe syscall.lsetxattr.return = kernel.function("sys_lsetxattr").return
 {
 	name = "lsetxattr"
 	retstr = returnstr(1)
@@ -2722,11 +2505,9 @@ probe syscall.lsetxattr.return = kernel.function("SyS_lsetxattr").return !,
 #			struct oldabi_stat64 __user * statbuf)
 #
 probe syscall.lstat = kernel.function("sys_lstat").call ?,
-                      kernel.function("SyS_newlstat").call ?,
                       kernel.function("sys_newlstat").call ?,
                       kernel.function("compat_sys_newlstat").call ?,
                       kernel.function("sys32_lstat64").call ?,
-                      kernel.function("SyS_lstat64").call ?,
                       kernel.function("sys_lstat64").call ?,
                       kernel.function("sys_oabi_lstat64").call ?
 {
@@ -2736,11 +2517,9 @@ probe syscall.lstat = kernel.function("sys_lstat").call ?,
 	argstr = sprintf("%s, %p", user_string_quoted($filename), $statbuf)
 }
 probe syscall.lstat.return = kernel.function("sys_lstat").return ?,
-                             kernel.function("SyS_newlstat").return ?,
                              kernel.function("sys_newlstat").return ?,
                              kernel.function("compat_sys_newlstat").return ?,
                              kernel.function("sys32_lstat64").return ?,
-                             kernel.function("SyS_lstat64").return ?,
                              kernel.function("sys_lstat64").return ?,
                              kernel.function("sys_oabi_lstat64").return ?
 {
@@ -2751,8 +2530,7 @@ probe syscall.lstat.return = kernel.function("sys_lstat").return ?,
 # madvise ____________________________________________________
 # long sys_madvise(unsigned long start, size_t len_in, int behavior)
 #
-probe syscall.madvise = kernel.function("SyS_madvise").call !,
-                        kernel.function("sys_madvise").call ?
+probe syscall.madvise = kernel.function("sys_madvise").call ?
 {
 	name = "madvise"
 	start = $start
@@ -2761,8 +2539,7 @@ probe syscall.madvise = kernel.function("SyS_madvise").call !,
 	advice_str = _madvice_advice_str($behavior)
 	argstr = sprintf("%p, %d, %s", $start, $len_in, _madvice_advice_str($behavior))
 }
-probe syscall.madvise.return = kernel.function("SyS_madvise").return !,
-                               kernel.function("sys_madvise").return ?
+probe syscall.madvise.return = kernel.function("sys_madvise").return ?
 {
 	name = "madvise"
 	retstr = returnstr(1)
@@ -2784,7 +2561,6 @@ probe syscall.madvise.return = kernel.function("SyS_madvise").return !,
 #	compat_ulong_t flags)
 #
 probe syscall.mbind = kernel.function("compat_sys_mbind").call ?,
-                      kernel.function("SyS_mbind").call !,
                       kernel.function("sys_mbind").call ?
 {
 	name = "mbind"
@@ -2798,7 +2574,6 @@ probe syscall.mbind = kernel.function("compat_sys_mbind").call ?,
 		$nmask, $maxnode, $flags)
 }
 probe syscall.mbind.return = kernel.function("compat_sys_mbind").return ?,
-                             kernel.function("SyS_mbind").return !,
                              kernel.function("sys_mbind").return ?
 {
 	name = "mbind"
@@ -2809,14 +2584,12 @@ probe syscall.mbind.return = kernel.function("compat_sys_mbind").return ?,
 # long sys_migrate_pages(pid_t pid, unsigned long maxnode,
 #		const unsigned long __user *old_nodes,
 #		const unsigned long __user *new_nodes)
-probe syscall.migrate_pages = kernel.function("SyS_migrate_pages").call !,
-                              kernel.function("sys_migrate_pages").call ?
+probe syscall.migrate_pages = kernel.function("sys_migrate_pages").call ?
 {
 	name = "migrate_pages"
 	argstr = sprintf("%d, %d, %p, %p", $pid, $maxnode, $old_nodes, $new_nodes)
 }
-probe syscall.migrate_pages.return = kernel.function("SyS_migrate_pages").return !,
-                                     kernel.function("sys_migrate_pages").return ?
+probe syscall.migrate_pages.return = kernel.function("sys_migrate_pages").return ?
 {
 	name = "migrate_pages"
 	retstr = returnstr(1)
@@ -2825,8 +2598,7 @@ probe syscall.migrate_pages.return = kernel.function("SyS_migrate_pages").return
 # mincore ____________________________________________________
 # long sys_mincore(unsigned long start, size_t len, unsigned char __user * vec)
 #
-probe syscall.mincore = kernel.function("SyS_mincore").call !,
-                        kernel.function("sys_mincore").call ?
+probe syscall.mincore = kernel.function("sys_mincore").call ?
 {
 	name = "mincore"
 	start = $start
@@ -2834,8 +2606,7 @@ probe syscall.mincore = kernel.function("SyS_mincore").call !,
 	vec_uaddr = $vec
 	argstr = sprintf("%p, %d, %p", $start, $len, $vec)
 }
-probe syscall.mincore.return = kernel.function("SyS_mincore").return !,
-                               kernel.function("sys_mincore").return ?
+probe syscall.mincore.return = kernel.function("sys_mincore").return ?
 {
 	name = "mincore"
 	retstr = returnstr(1)
@@ -2843,8 +2614,7 @@ probe syscall.mincore.return = kernel.function("SyS_mincore").return !,
 
 # mkdir ______________________________________________________
 # long sys_mkdir(const char __user * pathname, int mode)
-probe syscall.mkdir = kernel.function("SyS_mkdir").call !,
-                      kernel.function("sys_mkdir").call
+probe syscall.mkdir = kernel.function("sys_mkdir").call
 {
 	name = "mkdir"
 	pathname_uaddr = $pathname
@@ -2852,8 +2622,7 @@ probe syscall.mkdir = kernel.function("SyS_mkdir").call !,
 	mode = $mode
 	argstr = sprintf("%s, %#o", user_string_quoted($pathname), $mode)
 }
-probe syscall.mkdir.return = kernel.function("SyS_mkdir").return !,
-                             kernel.function("sys_mkdir").return
+probe syscall.mkdir.return = kernel.function("sys_mkdir").return
 {
 	name = "mkdir"
 	retstr = returnstr(1)
@@ -2862,8 +2631,7 @@ probe syscall.mkdir.return = kernel.function("SyS_mkdir").return !,
 # mkdirat ____________________________________________________
 # new function with 2.6.16
 # long sys_mkdirat(int dfd, const char __user *pathname, int mode)
-probe syscall.mkdirat = kernel.function("SyS_mkdirat").call !,
-                        kernel.function("sys_mkdirat").call ?
+probe syscall.mkdirat = kernel.function("sys_mkdirat").call ?
 {
 	name = "mkdirat"
 	dirfd = $dfd
@@ -2871,8 +2639,7 @@ probe syscall.mkdirat = kernel.function("SyS_mkdirat").call !,
 	mode = $mode
 	argstr = sprintf("%s, %s, %#o", _dfd_str($dfd), user_string_quoted($pathname), $mode)
 }
-probe syscall.mkdirat.return = kernel.function("SyS_mkdirat").return !,
-                               kernel.function("sys_mkdirat").return ?
+probe syscall.mkdirat.return = kernel.function("sys_mkdirat").return ?
 {
 	name = "mkdirat"
 	retstr = returnstr(1)
@@ -2880,8 +2647,7 @@ probe syscall.mkdirat.return = kernel.function("SyS_mkdirat").return !,
 
 # mknod
 # long sys_mknod(const char __user * filename, int mode, unsigned dev)
-probe syscall.mknod = kernel.function("SyS_mknod").call !,
-                      kernel.function("sys_mknod").call
+probe syscall.mknod = kernel.function("sys_mknod").call
 {
 	name = "mknod"
 	pathname = user_string($filename)
@@ -2890,8 +2656,7 @@ probe syscall.mknod = kernel.function("SyS_mknod").call !,
 	argstr = sprintf("%s, %s, %p", user_string_quoted($filename), _mknod_mode_str($mode), dev)
 }
 
-probe syscall.mknod.return = kernel.function("SyS_mknod").return !,
-                             kernel.function("sys_mknod").return
+probe syscall.mknod.return = kernel.function("sys_mknod").return
 {
 	name = "mknod"
 	retstr = returnstr(1)
@@ -2901,8 +2666,7 @@ probe syscall.mknod.return = kernel.function("SyS_mknod").return !,
 # new function with 2.6.16
 # long sys_mknodat(int dfd, const char __user *filename,
 #	int mode, unsigned dev)
-probe syscall.mknodat = kernel.function("SyS_mknodat").call !,
-                        kernel.function("sys_mknodat").call ?
+probe syscall.mknodat = kernel.function("sys_mknodat").call ?
 {
 	name = "mknodat"
 	dirfd = $dfd
@@ -2914,8 +2678,7 @@ probe syscall.mknodat = kernel.function("SyS_mknodat").call !,
 	argstr = sprintf("%s, %s, %s, %p",
 		dirfd_str, user_string_quoted($filename), mode_str, $dev)
 }
-probe syscall.mknodat.return = kernel.function("SyS_mknodat").return !,
-                               kernel.function("sys_mknodat").return ?
+probe syscall.mknodat.return = kernel.function("sys_mknodat").return ?
 {
 	name = "mknodat"
 	retstr = returnstr(1)
@@ -2925,16 +2688,14 @@ probe syscall.mknodat.return = kernel.function("SyS_mknodat").return !,
 #
 # long sys_mlock(unsigned long start, size_t len)
 #
-probe syscall.mlock = kernel.function("SyS_mlock").call !,
-                      kernel.function("sys_mlock").call ?
+probe syscall.mlock = kernel.function("sys_mlock").call ?
 {
 	name = "mlock"
 	addr = $start
 	len = $len
 	argstr = sprintf("%p, %d", $start, $len)
 }
-probe syscall.mlock.return = kernel.function("SyS_mlock").return !,
-                             kernel.function("sys_mlock").return ?
+probe syscall.mlock.return = kernel.function("sys_mlock").return ?
 {
 	name = "mlock"
 	retstr = returnstr(1)
@@ -2943,15 +2704,13 @@ probe syscall.mlock.return = kernel.function("SyS_mlock").return !,
 #
 # long sys_mlockall(int flags)
 #
-probe syscall.mlockall = kernel.function("SyS_mlockall").call !,
-                         kernel.function("sys_mlockall").call ?
+probe syscall.mlockall = kernel.function("sys_mlockall").call ?
 {
 	name = "mlockall"
 	flags = $flags
 	argstr = _mlockall_flags_str($flags)
 }
-probe syscall.mlockall.return = kernel.function("SyS_mlockall").return !,
-                                kernel.function("sys_mlockall").return ?
+probe syscall.mlockall.return = kernel.function("sys_mlockall").return ?
 {
 	name = "mlockall"
 	retstr = returnstr(1)
@@ -2988,14 +2747,12 @@ probe syscall.modify_ldt.return = kernel.function("sys_modify_ldt").return ?
 #                int flags)
 #
 probe syscall.move_pages = kernel.function("compat_sys_move_pages").call ?,
-                           kernel.function("SyS_move_pages").call !,
                            kernel.function("sys_move_pages").call ?
 {
 	name = "move_pages"
 	argstr = sprintf("%d, %d, %p, %p, 0x%x", $pid, $nr_pages, $nodes, $status, $flags)
 }
 probe syscall.move_pages.return = kernel.function("compat_sys_move_pages").return ?,
-                                  kernel.function("SyS_move_pages").return !,
                                   kernel.function("sys_move_pages").return ?
 {
 	name = "move_pages"
@@ -3014,7 +2771,6 @@ probe syscall.move_pages.return = kernel.function("compat_sys_move_pages").retur
 #		unsigned long flags,
 #		void __user * data)
 probe syscall.mount = kernel.function("compat_sys_mount").call ?,
-                      kernel.function("SyS_mount").call !,
                       kernel.function("sys_mount").call
 {
 	name = "mount"
@@ -3031,7 +2787,6 @@ probe syscall.mount = kernel.function("compat_sys_mount").call ?,
 		mountflags_str, data)
 }
 probe syscall.mount.return = kernel.function("compat_sys_mount").return ?,
-                             kernel.function("SyS_mount").return !,
                              kernel.function("sys_mount").return
 {
 	name = "mount"
@@ -3041,8 +2796,7 @@ probe syscall.mount.return = kernel.function("compat_sys_mount").return ?,
 # mprotect ___________________________________________________
 # long sys_mprotect(unsigned long start, size_t len, unsigned long prot)
 #
-probe syscall.mprotect = kernel.function("SyS_mprotect").call !,
-                         kernel.function("sys_mprotect").call ?
+probe syscall.mprotect = kernel.function("sys_mprotect").call ?
 {
 	name = "mprotect"
 	addr = $start
@@ -3051,8 +2805,7 @@ probe syscall.mprotect = kernel.function("SyS_mprotect").call !,
 	prot_str = _mprotect_prot_str($prot)
 	argstr = sprintf("%p, %d, %s", $start, $len, _mprotect_prot_str($prot))
 }
-probe syscall.mprotect.return = kernel.function("SyS_mprotect").return !,
-                                kernel.function("sys_mprotect").return ?
+probe syscall.mprotect.return = kernel.function("sys_mprotect").return ?
 {
 	name = "mprotect"
 	retstr = returnstr(1)
@@ -3067,7 +2820,6 @@ probe syscall.mprotect.return = kernel.function("SyS_mprotect").return !,
 #			struct compat_mq_attr __user *u_omqstat)
 #
 probe syscall.mq_getsetattr = kernel.function("compat_sys_mq_getsetattr").call ?,
-                              kernel.function("SyS_mq_getsetattr").call !,
                               kernel.function("sys_mq_getsetattr").call ?
 {
 	name = "mq_getsetattr"
@@ -3077,7 +2829,6 @@ probe syscall.mq_getsetattr = kernel.function("compat_sys_mq_getsetattr").call ?
 	argstr = sprintf("%d, %p, %p", $mqdes, $u_mqstat, $u_omqstat)
 }
 probe syscall.mq_getsetattr.return = kernel.function("compat_sys_mq_getsetattr").return ?,
-                                     kernel.function("SyS_mq_getsetattr").return !,
                                      kernel.function("sys_mq_getsetattr").return ?
 {
 	name = "mq_getsetattr"
@@ -3089,7 +2840,6 @@ probe syscall.mq_getsetattr.return = kernel.function("compat_sys_mq_getsetattr")
 # long compat_sys_mq_notify(mqd_t mqdes, const struct compat_sigevent __user *u_notification)
 #
 probe syscall.mq_notify = kernel.function("compat_sys_mq_notify").call ?,
-                          kernel.function("SyS_mq_notify").call !,
                           kernel.function("sys_mq_notify").call ?
 {
 	name = "mq_notify"
@@ -3098,7 +2848,6 @@ probe syscall.mq_notify = kernel.function("compat_sys_mq_notify").call ?,
 	argstr = sprintf("%d, %p", $mqdes, $u_notification)
 }
 probe syscall.mq_notify.return = kernel.function("compat_sys_mq_notify").return ?,
-                                 kernel.function("SyS_mq_notify").return !,
                                  kernel.function("sys_mq_notify").return ?
 {
 	name = "mq_notify"
@@ -3115,7 +2864,6 @@ probe syscall.mq_notify.return = kernel.function("compat_sys_mq_notify").return
 #			struct compat_mq_attr __user *u_attr)
 #
 probe syscall.mq_open = kernel.function("compat_sys_mq_open").call ?,
-                        kernel.function("SyS_mq_open").call !,
                         kernel.function("sys_mq_open").call ?
 {
 	name = "mq_open"
@@ -3131,7 +2879,6 @@ probe syscall.mq_open = kernel.function("compat_sys_mq_open").call ?,
 		argstr = sprintf("%s, %s", user_string_quoted($u_name), _sys_open_flag_str($oflag))
 }
 probe syscall.mq_open.return = kernel.function("compat_sys_mq_open").return ?,
-                               kernel.function("SyS_mq_open").return !,
                                kernel.function("sys_mq_open").return ?
 {
 	name = "mq_open"
@@ -3150,7 +2897,6 @@ probe syscall.mq_open.return = kernel.function("compat_sys_mq_open").return ?,
 #			const struct compat_timespec __user *u_abs_timeout)
 #
 probe syscall.mq_timedreceive = kernel.function("compat_sys_mq_timedreceive").call ?,
-                                kernel.function("SyS_mq_timedreceive").call !,
                                 kernel.function("sys_mq_timedreceive").call ?
 {
 	name = "mq_timedreceive"
@@ -3163,7 +2909,6 @@ probe syscall.mq_timedreceive = kernel.function("compat_sys_mq_timedreceive").ca
 		$u_msg_prio, $u_abs_timeout)
 }
 probe syscall.mq_timedreceive.return = kernel.function("compat_sys_mq_timedreceive").return ?,
-                                       kernel.function("SyS_mq_timedreceive").return !,
                                        kernel.function("sys_mq_timedreceive").return ?
 {
 	name = "mq_timedreceive"
@@ -3182,7 +2927,6 @@ probe syscall.mq_timedreceive.return = kernel.function("compat_sys_mq_timedrecei
 #			const struct compat_timespec __user *u_abs_timeout)
 #
 probe syscall.mq_timedsend = kernel.function("compat_sys_mq_timedsend").call ?,
-                             kernel.function("SyS_mq_timedsend").call !,
                              kernel.function("sys_mq_timedsend").call ?
 {
 	name = "mq_timedsend"
@@ -3195,7 +2939,6 @@ probe syscall.mq_timedsend = kernel.function("compat_sys_mq_timedsend").call ?,
 		$msg_prio, $u_abs_timeout)
 }
 probe syscall.mq_timedsend.return = kernel.function("compat_sys_mq_timedsend").return ?,
-                                    kernel.function("SyS_mq_timedsend").return !,
                                     kernel.function("sys_mq_timedsend").return ?
 {
 	name = "mq_timedsend"
@@ -3205,16 +2948,14 @@ probe syscall.mq_timedsend.return = kernel.function("compat_sys_mq_timedsend").r
 # mq_unlink __________________________________________________
 # long sys_mq_unlink(const char __user *u_name)
 #
-probe syscall.mq_unlink = kernel.function("SyS_mq_unlink").call !,
-                          kernel.function("sys_mq_unlink").call ?
+probe syscall.mq_unlink = kernel.function("sys_mq_unlink").call ?
 {
 	name = "mq_unlink"
 	u_name_uaddr = $u_name
 	u_name = user_string($u_name)
 	argstr = user_string_quoted($u_name)
 }
-probe syscall.mq_unlink.return = kernel.function("SyS_mq_unlink").return !,
-                                 kernel.function("sys_mq_unlink").return ?
+probe syscall.mq_unlink.return = kernel.function("sys_mq_unlink").return ?
 {
 	name = "mq_unlink"
 	retstr = returnstr(1)
@@ -3228,7 +2969,6 @@ probe syscall.mq_unlink.return = kernel.function("SyS_mq_unlink").return !,
 #            unsigned long new_addr)
 #
 probe syscall.mremap = kernel.function("ia64_mremap").call ?,
-                       kernel.function("SyS_mremap").call !,
                        kernel.function("sys_mremap").call ?
 {
 	name = "mremap"
@@ -3241,7 +2981,6 @@ probe syscall.mremap = kernel.function("ia64_mremap").call ?,
 		_mremap_flags($flags), $new_addr)
 }
 probe syscall.mremap.return = kernel.function("ia64_mremap").return ?,
-                              kernel.function("SyS_mremap").return !,
                               kernel.function("sys_mremap").return ?
 {
 	name = "mremap"
@@ -3251,8 +2990,7 @@ probe syscall.mremap.return = kernel.function("ia64_mremap").return ?,
 # msgctl _____________________________________________________
 # long sys_msgctl (int msqid, int cmd, struct msqid_ds __user *buf)
 #
-probe syscall.msgctl = kernel.function("SyS_msgctl").call !,
-                       kernel.function("sys_msgctl").call ?
+probe syscall.msgctl = kernel.function("sys_msgctl").call ?
 {
 	name = "msgctl"
 	msqid = $msqid
@@ -3260,8 +2998,7 @@ probe syscall.msgctl = kernel.function("SyS_msgctl").call !,
 	buf_uaddr = $buf
 	argstr = sprintf("%d, %d, %p", $msqid, $cmd, $buf)
 }
-probe syscall.msgctl.return = kernel.function("SyS_msgctl").return !,
-                              kernel.function("sys_msgctl").return ?
+probe syscall.msgctl.return = kernel.function("sys_msgctl").return ?
 {
 	name = "msgctl"
 	retstr = returnstr(1)
@@ -3284,8 +3021,7 @@ probe syscall.compat_sys_msgctl.return = kernel.function("compat_sys_msgctl").re
 # msgget _____________________________________________________
 # long sys_msgget (key_t key, int msgflg)
 #
-probe syscall.msgget = kernel.function("SyS_msgget").call !,
-                       kernel.function("sys_msgget").call ?
+probe syscall.msgget = kernel.function("sys_msgget").call ?
 {
 	name = "msgget"
 	key = $key
@@ -3293,8 +3029,7 @@ probe syscall.msgget = kernel.function("SyS_msgget").call !,
 	msgflg_str = _sys_open_flag_str($msgflg)
 	argstr = sprintf("%d, %s", $key, _sys_open_flag_str($msgflg))
 }
-probe syscall.msgget.return = kernel.function("SyS_msgget").return !,
-                              kernel.function("sys_msgget").return ?
+probe syscall.msgget.return = kernel.function("sys_msgget").return ?
 {
 	name = "msgget"
 	retstr = returnstr(1)
@@ -3307,8 +3042,7 @@ probe syscall.msgget.return = kernel.function("SyS_msgget").return !,
 #             long msgtyp,
 #             int msgflg)
 #
-probe syscall.msgrcv = kernel.function("SyS_msgrcv").call !,
-                       kernel.function("sys_msgrcv").call ?
+probe syscall.msgrcv = kernel.function("sys_msgrcv").call ?
 {
 	name = "msgrcv"
 	msqid = $msqid
@@ -3318,8 +3052,7 @@ probe syscall.msgrcv = kernel.function("SyS_msgrcv").call !,
 	msgflg = $msgflg
 	argstr = sprintf("%d, %p, %d, %d, %d", $msqid, $msgp, $msgsz, $msgtyp, $msgflg)
 }
-probe syscall.msgrcv.return = kernel.function("SyS_msgrcv").return !,
-                              kernel.function("sys_msgrcv").return ?
+probe syscall.msgrcv.return = kernel.function("sys_msgrcv").return ?
 {
 	name = "msgrcv"
 	retstr = returnstr(1)
@@ -3346,8 +3079,7 @@ probe syscall.compat_sys_msgrcv.return = kernel.function("compat_sys_msgrcv").re
 #             size_t msgsz,
 #             int msgflg)
 #
-probe syscall.msgsnd = kernel.function("SyS_msgsnd").call !,
-                       kernel.function("sys_msgsnd").call ?
+probe syscall.msgsnd = kernel.function("sys_msgsnd").call ?
 {
 	name = "msgsnd"
 	msqid = $msqid
@@ -3356,8 +3088,7 @@ probe syscall.msgsnd = kernel.function("SyS_msgsnd").call !,
 	msgflg = $msgflg
 	argstr = sprintf("%d, %p, %d, %d", $msqid, $msgp, $msgsz, $msgflg)
 }
-probe syscall.msgsnd.return = kernel.function("SyS_msgsnd").return !,
-                              kernel.function("sys_msgsnd").return ?
+probe syscall.msgsnd.return = kernel.function("sys_msgsnd").return ?
 {
 	name = "msgsnd"
 	retstr = returnstr(1)
@@ -3379,8 +3110,7 @@ probe syscall.compat_sys_msgsnd.return = kernel.function("compat_sys_msgsnd").re
 
 # msync ______________________________________________________
 # long sys_msync(unsigned long start, size_t len, int flags)
-probe syscall.msync = kernel.function("SyS_msync").call !,
-                      kernel.function("sys_msync").call ?
+probe syscall.msync = kernel.function("sys_msync").call ?
 {
 	name = "msync"
 	start = $start
@@ -3388,8 +3118,7 @@ probe syscall.msync = kernel.function("SyS_msync").call !,
 	flags = $flags
 	argstr = sprintf("%p, %d, %s", start, length, _msync_flag_str(flags))
 }
-probe syscall.msync.return = kernel.function("SyS_msync").return !,
-                             kernel.function("sys_msync").return ?
+probe syscall.msync.return = kernel.function("sys_msync").return ?
 {
 	name = "msync"
 	retstr = returnstr(1)
@@ -3397,16 +3126,14 @@ probe syscall.msync.return = kernel.function("SyS_msync").return !,
 
 # munlock ____________________________________________________
 # long sys_munlock(unsigned long start, size_t len)
-probe syscall.munlock = kernel.function("SyS_munlock").call !,
-                        kernel.function("sys_munlock").call ?
+probe syscall.munlock = kernel.function("sys_munlock").call ?
 {
 	name = "munlock"
 	addr = $start
 	len = $len
 	argstr = sprintf("%p, %d", addr, len)
 }
-probe syscall.munlock.return = kernel.function("SyS_munlock").return !,
-                               kernel.function("sys_munlock").return ?
+probe syscall.munlock.return = kernel.function("sys_munlock").return ?
 {
 	name = "munlock"
 	retstr = returnstr(1)
@@ -3427,16 +3154,14 @@ probe syscall.munlockall.return = kernel.function("sys_munlockall").return ?
 
 # munmap _____________________________________________________
 # long sys_munmap(unsigned long addr, size_t len)
-probe syscall.munmap = kernel.function("SyS_munmap").call !,
-                       kernel.function("sys_munmap").call
+probe syscall.munmap = kernel.function("sys_munmap").call
 {
 	name = "munmap"
 	start = $addr
 	length = $len
 	argstr = sprintf("%p, %d", start, length)
 }
-probe syscall.munmap.return = kernel.function("SyS_munmap").return !,
-                              kernel.function("sys_munmap").return
+probe syscall.munmap.return = kernel.function("sys_munmap").return
 {
 	name = "munmap"
 	retstr = returnstr(1)
diff --git a/tapset/syscalls2.stp b/tapset/syscalls2.stp
index 31a2956..20a3747 100644
--- a/tapset/syscalls2.stp
+++ b/tapset/syscalls2.stp
@@ -28,16 +28,14 @@
 # long compat_sys_nanosleep(struct compat_timespec __user *rqtp,
 #		struct compat_timespec __user *rmtp)
 #
-probe syscall.nanosleep = kernel.function("SyS_nanosleep").call !,
-                          kernel.function("sys_nanosleep").call
+probe syscall.nanosleep = kernel.function("sys_nanosleep").call
 {
 	name = "nanosleep"
 	req_uaddr = $rqtp
 	rem_uaddr = $rmtp
 	argstr = sprintf("%s, %p", _struct_timespec_u($rqtp, 1), $rmtp)
 }
-probe syscall.nanosleep.return = kernel.function("SyS_nanosleep").return !,
-                                 kernel.function("sys_nanosleep").return
+probe syscall.nanosleep.return = kernel.function("sys_nanosleep").return
 {
 	name = "nanosleep"
 	retstr = returnstr(1)
@@ -88,15 +86,13 @@ probe syscall.nfsservctl.return = kernel.function("sys_nfsservctl").return ?,
 # nice _______________________________________________________
 # long sys_nice(int increment)
 #
-probe syscall.nice = kernel.function("SyS_nice").call !,
-                     kernel.function("sys_nice").call ?
+probe syscall.nice = kernel.function("sys_nice").call ?
 {
 	name = "nice"
 	inc = $increment
 	argstr = sprintf("%d", $increment)
 }
-probe syscall.nice.return = kernel.function("SyS_nice").return !,
-                            kernel.function("sys_nice").return ?
+probe syscall.nice.return = kernel.function("sys_nice").return ?
 {
 	name = "nice"
 	retstr = returnstr(1)
@@ -123,7 +119,6 @@ probe syscall.ni_syscall.return = kernel.function("sys_ni_syscall").return
 #
 probe syscall.open = kernel.function("compat_sys_open").call ?,
                      kernel.function("sys32_open").call ?,
-                     kernel.function("SyS_open").call !,
                      kernel.function("sys_open").call ?
 {
 	name = "open"
@@ -139,7 +134,6 @@ probe syscall.open = kernel.function("compat_sys_open").call ?,
 }
 probe syscall.open.return = kernel.function("compat_sys_open").return ?,
                             kernel.function("sys32_open").return ?,
-                            kernel.function("SyS_open").return !,
                             kernel.function("sys_open").return ?
 {
 	name = "open"
@@ -151,7 +145,6 @@ probe syscall.open.return = kernel.function("compat_sys_open").return ?,
 # long compat_sys_openat(unsigned int dfd, const char __user *filename, int flags, int mode)
 #
 probe syscall.openat = kernel.function("compat_sys_openat").call ?,
-                       kernel.function("SyS_openat").call !,
                        kernel.function("sys_openat").call ?
 {
 	name = "openat"
@@ -168,7 +161,6 @@ probe syscall.openat = kernel.function("compat_sys_openat").call ?,
 			_sys_open_flag_str($flags))
 }
 probe syscall.openat.return = kernel.function("compat_sys_openat").return ?,
-                              kernel.function("SyS_openat").return !,
                               kernel.function("sys_openat").return ?
 {
 	name = "openat"
@@ -273,15 +265,13 @@ probe syscall.pause.return = kernel.function("sys_pause").return ?,
 # asmlinkage long
 # sys_personality(u_long personality)
 #
-probe syscall.personality = kernel.function("SyS_personality").call !,
-                            kernel.function("sys_personality").call
+probe syscall.personality = kernel.function("sys_personality").call
 {
 	name = "personality"
 	persona = $personality
 	argstr = sprintf("%p", persona);
 }
-probe syscall.personality.return = kernel.function("SyS_personality").return !,
-                                   kernel.function("sys_personality").return
+probe syscall.personality.return = kernel.function("sys_personality").return
 {
 	name = "personality"
 	retstr = returnstr(1)
@@ -303,9 +293,7 @@ function _ia64_pipe1:long() %{
 #
 # SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags)
 # pipe2() was added to Linux in version 2.6.27.
-probe syscall.pipe = kernel.function("SyS_pipe2").call !,
-                     kernel.function("sys_pipe2").call !,
-                     kernel.function("SyS_pipe").call !,
+probe syscall.pipe = kernel.function("sys_pipe2").call !,
                      kernel.function("sys_ia64_pipe").call ?,
                      kernel.function("sys_pipe").call
 {
@@ -337,9 +325,7 @@ probe syscall.pipe = kernel.function("SyS_pipe2").call !,
 		argstr = "[0, 0]";
 	}
 }
-probe syscall.pipe.return = kernel.function("SyS_pipe2").return !,
-                            kernel.function("sys_pipe2").return !,
-                            kernel.function("SyS_pipe").return !,
+probe syscall.pipe.return = kernel.function("sys_pipe2").return !,
                             kernel.function("sys_ia64_pipe").return ?,
                             kernel.function("sys_pipe").return
 {
@@ -375,8 +361,7 @@ probe syscall.pipe.return = kernel.function("SyS_pipe2").return !,
 #
 # long sys_pivot_root(const char __user *new_root, const char __user *put_old)
 #
-probe syscall.pivot_root = kernel.function("SyS_pivot_root").call !,
-                           kernel.function("sys_pivot_root").call
+probe syscall.pivot_root = kernel.function("sys_pivot_root").call
 {
 	name = "pivot_root"
 	new_root_str = user_string($new_root)
@@ -384,8 +369,7 @@ probe syscall.pivot_root = kernel.function("SyS_pivot_root").call !,
 	argstr = sprintf("%s, %s", user_string_quoted($new_root),
 		user_string_quoted($put_old))
 }
-probe syscall.pivot_root.return = kernel.function("SyS_pivot_root").return !,
-                                  kernel.function("sys_pivot_root").return
+probe syscall.pivot_root.return = kernel.function("sys_pivot_root").return
 {
 	name = "pivot_root"
 	retstr = returnstr(1)
@@ -395,8 +379,7 @@ probe syscall.pivot_root.return = kernel.function("SyS_pivot_root").return !,
 #
 # long sys_poll(struct pollfd __user * ufds, unsigned int nfds, long timeout)
 #
-probe syscall.poll = kernel.function("SyS_poll").call !,
-                     kernel.function("sys_poll").call
+probe syscall.poll = kernel.function("sys_poll").call
 {
 	name = "poll"
 	ufds_uaddr = $ufds
@@ -405,8 +388,7 @@ probe syscall.poll = kernel.function("SyS_poll").call !,
 	argstr = sprintf("%p, %d, %d", $ufds, $nfds,
 		(@defined($timeout_msecs) ? $timeout_msecs : $timeout))
 }
-probe syscall.poll.return = kernel.function("SyS_poll").return !,
-                            kernel.function("sys_poll").return
+probe syscall.poll.return = kernel.function("sys_poll").return
 {
 	name = "poll"
 	retstr = returnstr(1)
@@ -418,8 +400,7 @@ probe syscall.poll.return = kernel.function("SyS_poll").return !,
 #	struct timespec __user *tsp, const sigset_t __user *sigmask,
 #	size_t sigsetsize)
 #
-probe syscall.ppoll = kernel.function("SyS_ppoll").call !,
-                      kernel.function("sys_ppoll").call ?
+probe syscall.ppoll = kernel.function("sys_ppoll").call ?
 {
 	name = "ppoll"
 	argstr = sprintf("%p, %d, %s, %p, %d",
@@ -429,8 +410,7 @@ probe syscall.ppoll = kernel.function("SyS_ppoll").call !,
 		$sigmask,
 		$sigsetsize)
 }
-probe syscall.ppoll.return = kernel.function("SyS_ppoll").return !,
-                             kernel.function("sys_ppoll").return ?
+probe syscall.ppoll.return = kernel.function("sys_ppoll").return ?
 {
 	name = "ppoll"
 	retstr = returnstr(1)
@@ -464,8 +444,7 @@ probe syscall.compat_ppoll.return = kernel.function("compat_sys_ppoll").return ?
 #	     unsigned long arg4,
 #	     unsigned long arg5)
 #
-probe syscall.prctl = kernel.function("SyS_prctl").call !,
-                      kernel.function("sys_prctl").call
+probe syscall.prctl = kernel.function("sys_prctl").call
 {
 	name = "prctl"
 	option = $option
@@ -476,8 +455,7 @@ probe syscall.prctl = kernel.function("SyS_prctl").call !,
 	argstr = sprintf("%p, %p, %p, %p, %p", option, arg2, arg3,
 		arg4, arg5)
 }
-probe syscall.prctl.return = kernel.function("SyS_prctl").return !,
-                             kernel.function("sys_prctl").return
+probe syscall.prctl.return = kernel.function("sys_prctl").return
 {
 	name = "prctl"
 	retstr = returnstr(1)
@@ -489,8 +467,7 @@ probe syscall.prctl.return = kernel.function("SyS_prctl").return !,
 #		 size_t count,
 #		 loff_t pos)
 #
-probe syscall.pread = kernel.function("SyS_pread64").call !,
-                      kernel.function("sys_pread64").call
+probe syscall.pread = kernel.function("sys_pread64").call
 {
 	name = "pread"
 	fd = $fd
@@ -499,8 +476,7 @@ probe syscall.pread = kernel.function("SyS_pread64").call !,
 	offset = $pos
 	argstr = sprintf("%d, %p, %d, %d", $fd, $buf, $count, $pos)
 }
-probe syscall.pread.return = kernel.function("SyS_pread64").return !,
-                             kernel.function("sys_pread64").return
+probe syscall.pread.return = kernel.function("sys_pread64").return
 {
 	name = "pread"
 	retstr = returnstr(1)
@@ -511,15 +487,13 @@ probe syscall.pread.return = kernel.function("SyS_pread64").return !,
 # long sys_pselect6(int n, fd_set __user *inp, fd_set __user *outp,
 #	fd_set __user *exp, struct timespec __user *tsp, void __user *sig)
 #
-probe syscall.pselect6 = kernel.function("SyS_pselect6").call !,
-                         kernel.function("sys_pselect6").call ?
+probe syscall.pselect6 = kernel.function("sys_pselect6").call ?
 {
 	name = "pselect6"
 	argstr = sprintf("%d, %p, %p, %p, %s, %p", $n, $inp, $outp, $exp,
 		_struct_timespec_u($tsp, 1), $sig)
 }
-probe syscall.pselect6.return = kernel.function("SyS_pselect6").return !,
-                                kernel.function("sys_pselect6").return ?
+probe syscall.pselect6.return = kernel.function("sys_pselect6").return ?
 {
 	name = "pselect6"
 	retstr = returnstr(1)
@@ -572,8 +546,7 @@ probe syscall.compat_pselect7.return = kernel.function("compat_sys_pselect7").re
 #		long addr,
 #		long data)
 #
-probe syscall.ptrace = kernel.function("SyS_ptrace").call !,
-                       kernel.function("sys_ptrace").call ?
+probe syscall.ptrace = kernel.function("sys_ptrace").call ?
 {
 	name = "ptrace"
 	request = $request
@@ -582,8 +555,7 @@ probe syscall.ptrace = kernel.function("SyS_ptrace").call !,
 	data = $data
 	argstr = sprintf("%d, %d, %p, %p", request, pid, addr, data)
 }
-probe syscall.ptrace.return = kernel.function("SyS_ptrace").return !,
-                              kernel.function("sys_ptrace").return ?
+probe syscall.ptrace.return = kernel.function("sys_ptrace").return ?
 {
 	name = "ptrace"
 	retstr = returnstr(1)
@@ -596,8 +568,7 @@ probe syscall.ptrace.return = kernel.function("SyS_ptrace").return !,
 #		  size_t count,
 #		  loff_t pos)
 #
-probe syscall.pwrite = kernel.function("SyS_pwrite64").call !,
-                       kernel.function("sys_pwrite64").call
+probe syscall.pwrite = kernel.function("sys_pwrite64").call
 {
 	name = "pwrite"
 	fd = $fd
@@ -608,8 +579,7 @@ probe syscall.pwrite = kernel.function("SyS_pwrite64").call !,
 		text_strn(user_string($buf), syscall_string_trunc, 1),
 		$count, $pos)
 }
-probe syscall.pwrite.return = kernel.function("SyS_pwrite64").return !,
-                              kernel.function("sys_pwrite64").return
+probe syscall.pwrite.return = kernel.function("sys_pwrite64").return
 {
 	name = "pwrite"
 	retstr = returnstr(1)
@@ -647,8 +617,7 @@ probe syscall.pwrite32.return = kernel.function("sys32_pwrite64").return ?
 #		  qid_t id,
 #		  void __user *addr)
 #
-probe syscall.quotactl = kernel.function("SyS_quotactl").call !,
-                         kernel.function("sys_quotactl").call ?
+probe syscall.quotactl = kernel.function("sys_quotactl").call ?
 {
 	name = "quotactl"
 	cmd = $cmd
@@ -659,8 +628,7 @@ probe syscall.quotactl = kernel.function("SyS_quotactl").call !,
 	addr_uaddr = $addr
 	argstr = sprintf("%s, %s, %d, %p", cmd_str, special_str, $id, $addr)
 }
-probe syscall.quotactl.return = kernel.function("SyS_quotactl").return !,
-                                kernel.function("sys_quotactl").return ?
+probe syscall.quotactl.return = kernel.function("sys_quotactl").return ?
 {
 	name = "quotactl"
 	retstr = returnstr(1)
@@ -669,8 +637,7 @@ probe syscall.quotactl.return = kernel.function("SyS_quotactl").return !,
 
 # read _______________________________________________________
 # ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)
-probe syscall.read = kernel.function("SyS_read").call !,
-                     kernel.function("sys_read").call
+probe syscall.read = kernel.function("sys_read").call
 {
 	name = "read"
 	fd = $fd
@@ -678,8 +645,7 @@ probe syscall.read = kernel.function("SyS_read").call !,
 	count = $count
 	argstr = sprintf("%d, %p, %d", $fd, $buf, $count)
 }
-probe syscall.read.return = kernel.function("SyS_read").return !,
-                            kernel.function("sys_read").return
+probe syscall.read.return = kernel.function("sys_read").return
 {
 	name = "read"
 	retstr = returnstr(1)
@@ -692,8 +658,7 @@ probe syscall.read.return = kernel.function("SyS_read").return !,
 #		   loff_t offset,
 #		   size_t count)
 #
-probe syscall.readahead = kernel.function("SyS_readahead").call !,
-                          kernel.function("sys_readahead").call
+probe syscall.readahead = kernel.function("sys_readahead").call
 {
 	name = "readahead"
 	fd = $fd
@@ -701,8 +666,7 @@ probe syscall.readahead = kernel.function("SyS_readahead").call !,
 	count = $count
 	argstr = sprintf("%d, %p, %p", fd, offset, count)
 }
-probe syscall.readahead.return = kernel.function("SyS_readahead").return !,
-                                 kernel.function("sys_readahead").return
+probe syscall.readahead.return = kernel.function("sys_readahead").return
 {
 	name = "readahead"
 	retstr = returnstr(1)
@@ -732,8 +696,7 @@ probe syscall.readdir.return = kernel.function("compat_sys_old_readdir").return
 #		  char __user * buf,
 #		  int bufsiz)
 #
-probe syscall.readlink = kernel.function("SyS_readlink").call !,
-                         kernel.function("sys_readlink").call
+probe syscall.readlink = kernel.function("sys_readlink").call
 {
 	name = "readlink"
 	path = user_string($path)
@@ -742,8 +705,7 @@ probe syscall.readlink = kernel.function("SyS_readlink").call !,
 	argstr = sprintf("%s, %p, %d", user_string_quoted($path),
 		$buf, $bufsiz)
 }
-probe syscall.readlink.return = kernel.function("SyS_readlink").return !,
-                                kernel.function("sys_readlink").return
+probe syscall.readlink.return = kernel.function("sys_readlink").return
 {
 	name = "readlink"
 	retstr = returnstr(1)
@@ -755,8 +717,7 @@ probe syscall.readlink.return = kernel.function("SyS_readlink").return !,
 #		  char __user * buf,
 #		  int bufsiz)
 #
-probe syscall.readlinkat = kernel.function("SyS_readlinkat").call !,
-                           kernel.function("sys_readlinkat").call ?
+probe syscall.readlinkat = kernel.function("sys_readlinkat").call ?
 {
 	name = "readlinkat"
 	dfd = $dfd
@@ -768,8 +729,7 @@ probe syscall.readlinkat = kernel.function("SyS_readlinkat").call !,
 		$buf, $bufsiz)
 }
 
-probe syscall.readlinkat.return = kernel.function("SyS_readlinkat").return !,
-                                  kernel.function("sys_readlinkat").return ?
+probe syscall.readlinkat.return = kernel.function("sys_readlinkat").return ?
 {
 	name = "readlinkat"
 	retstr = returnstr(1)
@@ -785,7 +745,6 @@ probe syscall.readlinkat.return = kernel.function("SyS_readlinkat").return !,
 #		unsigned long vlen)
 #
 probe syscall.readv = kernel.function("compat_sys_readv").call ?,
-                      kernel.function("SyS_readv").call !,
                       kernel.function("sys_readv").call
 {
 	name = "readv"
@@ -795,7 +754,6 @@ probe syscall.readv = kernel.function("compat_sys_readv").call ?,
 	argstr = sprintf("%d, %p, %d", $fd, $vec, $vlen)
 }
 probe syscall.readv.return = kernel.function("compat_sys_readv").return ?,
-                             kernel.function("SyS_readv").return !,
                              kernel.function("sys_readv").return
 {
 	name = "readv"
@@ -809,8 +767,7 @@ probe syscall.readv.return = kernel.function("compat_sys_readv").return ?,
 #		unsigned int cmd,
 #		void __user * arg)
 #
-probe syscall.reboot = kernel.function("SyS_reboot").call !,
-                       kernel.function("sys_reboot").call
+probe syscall.reboot = kernel.function("sys_reboot").call
 {
 	name = "reboot"
 	magic = $magic1
@@ -823,8 +780,7 @@ probe syscall.reboot = kernel.function("SyS_reboot").call !,
 	argstr = sprintf("%s, %s, %s, %p", magic_str, magic2_str,
 		flag_str, $arg)
 }
-probe syscall.reboot.return = kernel.function("SyS_reboot").return !,
-                              kernel.function("sys_reboot").return
+probe syscall.reboot.return = kernel.function("sys_reboot").return
 {
 	name = "reboot"
 	retstr = returnstr(1)
@@ -859,8 +815,7 @@ probe syscall.recv.return = kernel.function("sys_recv").return ?
 #		  struct sockaddr __user *addr,
 #		  int __user *addr_len)
 #
-probe syscall.recvfrom = kernel.function("SyS_recvfrom").call !,
-                         kernel.function("sys_recvfrom").call ?
+probe syscall.recvfrom = kernel.function("sys_recvfrom").call ?
 {
 	name = "recvfrom"
 	s = $fd
@@ -873,8 +828,7 @@ probe syscall.recvfrom = kernel.function("SyS_recvfrom").call !,
 	argstr = sprintf("%d, %p, %d, %s, %p, %p",
 		$fd, $ubuf, $size, _recvflags_str($flags), $addr, $addr_len)
 }
-probe syscall.recvfrom.return = kernel.function("SyS_recvfrom").return !,
-                                kernel.function("sys_recvfrom").return ?
+probe syscall.recvfrom.return = kernel.function("sys_recvfrom").return ?
 {
 	name = "recvfrom"
 	retstr = returnstr(1)
@@ -886,8 +840,7 @@ probe syscall.recvfrom.return = kernel.function("SyS_recvfrom").return !,
 #		 struct msghdr __user *msg,
 #		 unsigned int flags)
 #
-probe syscall.recvmsg = kernel.function("SyS_recvmsg").call !,
-                        kernel.function("sys_recvmsg").call ?
+probe syscall.recvmsg = kernel.function("sys_recvmsg").call ?
 {
 	name = "recvmsg"
 	s = $fd
@@ -896,8 +849,7 @@ probe syscall.recvmsg = kernel.function("SyS_recvmsg").call !,
 	flags_str = _recvflags_str($flags)
 	argstr = sprintf("%d, %p, %s", $fd, $msg, _recvflags_str($flags))
 }
-probe syscall.recvmsg.return = kernel.function("SyS_recvmsg").return !,
-                               kernel.function("sys_recvmsg").return ?
+probe syscall.recvmsg.return = kernel.function("sys_recvmsg").return ?
 {
 	name = "recvmsg"
 	retstr = returnstr(1)
@@ -930,8 +882,7 @@ probe syscall.compat_sys_recvmsg.return = kernel.function("compat_sys_recvmsg").
 #			    unsigned long pgoff,
 #			    unsigned long flags)
 #
-probe syscall.remap_file_pages = kernel.function("SyS_remap_file_pages").call !,
-                                 kernel.function("sys_remap_file_pages").call ?
+probe syscall.remap_file_pages = kernel.function("sys_remap_file_pages").call ?
 {
 	name = "remap_file_pages"
 	start = $start
@@ -942,8 +893,7 @@ probe syscall.remap_file_pages = kernel.function("SyS_remap_file_pages").call !,
 	argstr = sprintf("%p, %p, %p, %p, %p", start, size, prot,
 		pgoff, flags)
 }
-probe syscall.remap_file_pages.return = kernel.function("SyS_remap_file_pages").return !,
-                                        kernel.function("sys_remap_file_pages").return ?
+probe syscall.remap_file_pages.return = kernel.function("sys_remap_file_pages").return ?
 {
 	name = "remap_file_pages"
 	retstr = returnstr(1)
@@ -955,8 +905,7 @@ probe syscall.remap_file_pages.return = kernel.function("SyS_remap_file_pages").
 # sys_removexattr(char __user *path,
 #		     char __user *name)
 #
-probe syscall.removexattr = kernel.function("SyS_removexattr").call !,
-                            kernel.function("sys_removexattr").call
+probe syscall.removexattr = kernel.function("sys_removexattr").call
 {
 	name = "removexattr"
 	name_str = user_string($name)
@@ -966,8 +915,7 @@ probe syscall.removexattr = kernel.function("SyS_removexattr").call !,
 		user_string_quoted(@defined($pathname) ? $pathname : $path),
 		user_string_quoted($name))
 }
-probe syscall.removexattr.return = kernel.function("SyS_removexattr").return !,
-                                   kernel.function("sys_removexattr").return
+probe syscall.removexattr.return = kernel.function("sys_removexattr").return
 {
 	name = "removexattr"
 	retstr = returnstr(1)
@@ -978,8 +926,7 @@ probe syscall.removexattr.return = kernel.function("SyS_removexattr").return !,
 # sys_rename(const char __user * oldname,
 #		const char __user * newname)
 #
-probe syscall.rename = kernel.function("SyS_rename").call !,
-                       kernel.function("sys_rename").call
+probe syscall.rename = kernel.function("sys_rename").call
 {
 	name = "rename"
 	oldpath = user_string($oldname)
@@ -987,8 +934,7 @@ probe syscall.rename = kernel.function("SyS_rename").call !,
 	argstr = sprintf("%s, %s", user_string_quoted($oldname),
 		user_string_quoted($newname))
 }
-probe syscall.rename.return = kernel.function("SyS_rename").return !,
-                              kernel.function("sys_rename").return
+probe syscall.rename.return = kernel.function("sys_rename").return
 {
 	name = "rename"
 	retstr = returnstr(1)
@@ -998,8 +944,7 @@ probe syscall.rename.return = kernel.function("SyS_rename").return !,
 # new function with 2.6.16
 # long sys_renameat(int olddfd, const char __user *oldname,
 #	int newdfd, const char __user *newname)
-probe syscall.renameat = kernel.function("SyS_renameat").call !,
-                         kernel.function("sys_renameat").call ?
+probe syscall.renameat = kernel.function("sys_renameat").call ?
 {
 	name = "renameat"
 	olddfd = $olddfd
@@ -1014,8 +959,7 @@ probe syscall.renameat = kernel.function("SyS_renameat").call !,
 		olddfd_str, user_string_quoted($oldname),
 		newdfd_str, user_string_quoted($newname))
 }
-probe syscall.renameat.return = kernel.function("SyS_renameat").return !,
-                                kernel.function("sys_renameat").return ?
+probe syscall.renameat.return = kernel.function("sys_renameat").return ?
 {
 	name = "renameat"
 	retstr = returnstr(1)
@@ -1029,8 +973,7 @@ probe syscall.renameat.return = kernel.function("SyS_renameat").return !,
 #		     key_serial_t destringid)
 # compat_sys_request_key() calls sys_request_key, so don't need probe there.
 #
-probe syscall.request_key = kernel.function("SyS_request_key").call !,
-                            kernel.function("sys_request_key").call ?
+probe syscall.request_key = kernel.function("sys_request_key").call ?
 {
 	name = "request_key"
 	type_uaddr = $_type
@@ -1039,8 +982,7 @@ probe syscall.request_key = kernel.function("SyS_request_key").call !,
 	destringid = $destringid
 	argstr = sprintf("%p, %p, %p, %p", $_type, $_description, $_callout_info, $destringid)
 }
-probe syscall.request_key.return = kernel.function("SyS_request_key").return !,
-                                   kernel.function("sys_request_key").return ?
+probe syscall.request_key.return = kernel.function("sys_request_key").return ?
 {
 	name = "request_key"
 	retstr = returnstr(1)
@@ -1066,15 +1008,13 @@ probe syscall.restart_syscall.return = kernel.function("sys_restart_syscall").re
 # asmlinkage long
 # sys_rmdir(const char __user * pathname)
 #
-probe syscall.rmdir = kernel.function("SyS_rmdir").call !,
-                      kernel.function("sys_rmdir").call
+probe syscall.rmdir = kernel.function("sys_rmdir").call
 {
 	name = "rmdir"
 	pathname = user_string($pathname)
 	argstr = user_string_quoted($pathname)
 }
-probe syscall.rmdir.return = kernel.function("SyS_rmdir").return !,
-                             kernel.function("sys_rmdir").return
+probe syscall.rmdir.return = kernel.function("sys_rmdir").return
 {
 	name = "rmdir"
 	retstr = returnstr(1)
@@ -1087,8 +1027,7 @@ probe syscall.rmdir.return = kernel.function("SyS_rmdir").return !,
 #			struct sigaction __user *oact,
 #			size_t sigsetsize)
 #
-probe syscall.rt_sigaction = kernel.function("SyS_rt_sigaction").call !,
-                             kernel.function("sys_rt_sigaction").call ?
+probe syscall.rt_sigaction = kernel.function("sys_rt_sigaction").call ?
 {
 	name = "rt_sigaction"
 	sig = $sig
@@ -1098,8 +1037,7 @@ probe syscall.rt_sigaction = kernel.function("SyS_rt_sigaction").call !,
 	argstr = sprintf("%s, {%s}, %p, %d", _signal_name($sig),
 		_struct_sigaction_u($act), $oact, $sigsetsize)
 }
-probe syscall.rt_sigaction.return = kernel.function("SyS_rt_sigaction").return !,
-                                    kernel.function("sys_rt_sigaction").return ?
+probe syscall.rt_sigaction.return = kernel.function("sys_rt_sigaction").return ?
 {
 	name = "rt_sigaction"
 	retstr = returnstr(1)
@@ -1138,16 +1076,14 @@ probe syscall.rt_sigaction32.return = kernel.function("sys32_rt_sigaction").retu
 #
 # long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize)
 #
-probe syscall.rt_sigpending = kernel.function("SyS_rt_sigpending").call !,
-                              kernel.function("sys_rt_sigpending").call ?
+probe syscall.rt_sigpending = kernel.function("sys_rt_sigpending").call ?
 {
 	name = "rt_sigpending"
 	set_uaddr = $set
 	sigsetsize = $sigsetsize
 	argstr = sprintf("%p, %d", $set, $sigsetsize)
 }
-probe syscall.rt_sigpending.return = kernel.function("SyS_rt_sigpending").return !,
-                                     kernel.function("sys_rt_sigpending").return ?
+probe syscall.rt_sigpending.return = kernel.function("sys_rt_sigpending").return ?
 {
 	name = "rt_sigpending"
 	retstr = returnstr(1)
@@ -1160,7 +1096,6 @@ probe syscall.rt_sigpending.return = kernel.function("SyS_rt_sigpending").return
 #
 probe syscall.rt_sigprocmask = kernel.function("sys32_rt_sigprocmask").call ?,
                                kernel.function("compat_sys_rt_sigprocmask").call ?,
-                               kernel.function("SyS_rt_sigprocmask").call !,
                                kernel.function("sys_rt_sigprocmask").call ?
 {
 	name = "rt_sigprocmask"
@@ -1173,7 +1108,6 @@ probe syscall.rt_sigprocmask = kernel.function("sys32_rt_sigprocmask").call ?,
 }
 probe syscall.rt_sigprocmask.return = kernel.function("sys32_rt_sigprocmask").return ?,
                                       kernel.function("compat_sys_rt_sigprocmask").return ?,
-                                      kernel.function("SyS_rt_sigprocmask").return !,
                                       kernel.function("sys_rt_sigprocmask").return ?
 {
 	name = "rt_sigprocmask"
@@ -1184,8 +1118,7 @@ probe syscall.rt_sigprocmask.return = kernel.function("sys32_rt_sigprocmask").re
 #
 # long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t __user *uinfo)
 #
-probe syscall.rt_sigqueueinfo = kernel.function("SyS_rt_sigqueueinfo").call !,
-                                kernel.function("sys_rt_sigqueueinfo").call
+probe syscall.rt_sigqueueinfo = kernel.function("sys_rt_sigqueueinfo").call
 {
 	name = "rt_sigqueueinfo"
 	pid = $pid
@@ -1193,8 +1126,7 @@ probe syscall.rt_sigqueueinfo = kernel.function("SyS_rt_sigqueueinfo").call !,
 	uinfo_uaddr = $uinfo
 	argstr = sprintf("%d, %s, %p", $pid, _signal_name($sig), $uinfo)
 }
-probe syscall.rt_sigqueueinfo.return = kernel.function("SyS_rt_sigqueueinfo").return !,
-                                       kernel.function("sys_rt_sigqueueinfo").return
+probe syscall.rt_sigqueueinfo.return = kernel.function("sys_rt_sigqueueinfo").return
 {
 	name = "rt_sigqueueinfo"
 	retstr = returnstr(1)
@@ -1222,7 +1154,6 @@ probe syscall.rt_sigreturn.return = kernel.function("sys_rt_sigreturn").return ?
 #
 probe syscall.rt_sigsuspend = kernel.function("compat_sys_rt_sigsuspend").call ?,
                               kernel.function("ia64_rt_sigsuspend").call ?,
-                              kernel.function("SyS_rt_sigsuspend").call !,
                               kernel.function("sys_rt_sigsuspend").call ?
 {
 	name = "rt_sigsuspend"
@@ -1230,7 +1161,6 @@ probe syscall.rt_sigsuspend = kernel.function("compat_sys_rt_sigsuspend").call ?
 }
 probe syscall.rt_sigsuspend.return = kernel.function("compat_sys_rt_sigsuspend").return ?,
                                      kernel.function("ia64_rt_sigsuspend").return ?,
-                                     kernel.function("SyS_rt_sigsuspend").return !,
                                      kernel.function("sys_rt_sigsuspend").return ?
 {
 	name = "rt_sigsuspend"
@@ -1248,7 +1178,6 @@ probe syscall.rt_sigsuspend.return = kernel.function("compat_sys_rt_sigsuspend")
 #		struct compat_timespec __user *uts, compat_size_t sigsetsize)
 #
 probe syscall.rt_sigtimedwait = kernel.function("compat_sys_rt_sigtimedwait").call ?,
-                                kernel.function("SyS_rt_sigtimedwait").call !,
                                 kernel.function("sys_rt_sigtimedwait").call
 {
 	name = "rt_sigtimedwait"
@@ -1259,7 +1188,6 @@ probe syscall.rt_sigtimedwait = kernel.function("compat_sys_rt_sigtimedwait").ca
 	argstr = sprintf("%p, %p, %p, %d", $uthese, $uinfo, $uts, $sigsetsize)
 }
 probe syscall.rt_sigtimedwait.return = kernel.function("compat_sys_rt_sigtimedwait").return ?,
-                                       kernel.function("SyS_rt_sigtimedwait").return !,
                                        kernel.function("sys_rt_sigtimedwait").return
 {
 	name = "rt_sigtimedwait"
@@ -1273,8 +1201,7 @@ probe syscall.rt_sigtimedwait.return = kernel.function("compat_sys_rt_sigtimedwa
 #			     unsigned int len,
 #			     unsigned long __user *user_mask_ptr)
 #
-probe syscall.sched_getaffinity = kernel.function("SyS_sched_getaffinity").call !,
-                                  kernel.function("sys_sched_getaffinity").call
+probe syscall.sched_getaffinity = kernel.function("sys_sched_getaffinity").call
 {
 	name = "sched_getaffinity"
 	pid = $pid
@@ -1282,8 +1209,7 @@ probe syscall.sched_getaffinity = kernel.function("SyS_sched_getaffinity").call
 	mask_uaddr = $user_mask_ptr
 	argstr = sprintf("%d, %p, %p", pid, len, mask_uaddr)
 }
-probe syscall.sched_getaffinity.return = kernel.function("SyS_sched_getaffinity").return !,
-                                         kernel.function("sys_sched_getaffinity").return
+probe syscall.sched_getaffinity.return = kernel.function("sys_sched_getaffinity").return
 {
 	name = "sched_getaffinity"
 	retstr = returnstr(1)
@@ -1294,16 +1220,14 @@ probe syscall.sched_getaffinity.return = kernel.function("SyS_sched_getaffinity"
 # sys_sched_getparam(pid_t pid,
 #			  struct sched_param __user *param)
 #
-probe syscall.sched_getparam = kernel.function("SyS_sched_getparam").call !,
-                               kernel.function("sys_sched_getparam").call
+probe syscall.sched_getparam = kernel.function("sys_sched_getparam").call
 {
 	name = "sched_getparam"
 	pid = $pid
 	p_uaddr = $param
 	argstr = sprintf("%d, %p", pid, p_uaddr)
 }
-probe syscall.sched_getparam.return = kernel.function("SyS_sched_getparam").return !,
-                                      kernel.function("sys_sched_getparam").return
+probe syscall.sched_getparam.return = kernel.function("sys_sched_getparam").return
 {
 	name = "sched_getparam"
 	retstr = returnstr(1)
@@ -1313,15 +1237,13 @@ probe syscall.sched_getparam.return = kernel.function("SyS_sched_getparam").retu
 # asmlinkage long
 # sys_sched_get_priority_max(int policy)
 #
-probe syscall.sched_get_priority_max = kernel.function("SyS_sched_get_priority_max").call !,
-                                       kernel.function("sys_sched_get_priority_max").call
+probe syscall.sched_get_priority_max = kernel.function("sys_sched_get_priority_max").call
 {
 	name = "sched_get_priority_max"
 	policy = $policy
 	argstr = sprint(policy)
 }
-probe syscall.sched_get_priority_max.return = kernel.function("SyS_sched_get_priority_max").return !,
-                                              kernel.function("sys_sched_get_priority_max").return
+probe syscall.sched_get_priority_max.return = kernel.function("sys_sched_get_priority_max").return
 {
 	name = "sched_get_priority_max"
 	retstr = returnstr(1)
@@ -1331,15 +1253,13 @@ probe syscall.sched_get_priority_max.return = kernel.function("SyS_sched_get_pri
 # asmlinkage long
 # sys_sched_get_priority_min(int policy)
 #
-probe syscall.sched_get_priority_min = kernel.function("SyS_sched_get_priority_min").call !,
-                                       kernel.function("sys_sched_get_priority_min").call
+probe syscall.sched_get_priority_min = kernel.function("sys_sched_get_priority_min").call
 {
 	name = "sched_get_priority_min"
 	policy = $policy
 	argstr = sprint(policy)
 }
-probe syscall.sched_get_priority_min.return = kernel.function("SyS_sched_get_priority_min").return !,
-                                              kernel.function("sys_sched_get_priority_min").return
+probe syscall.sched_get_priority_min.return = kernel.function("sys_sched_get_priority_min").return
 {
 	name = "sched_get_priority_min"
 	retstr = returnstr(1)
@@ -1348,15 +1268,13 @@ probe syscall.sched_get_priority_min.return = kernel.function("SyS_sched_get_pri
 #
 # long sys_sched_getscheduler(pid_t pid)
 #
-probe syscall.sched_getscheduler = kernel.function("SyS_sched_getscheduler").call !,
-                                   kernel.function("sys_sched_getscheduler").call
+probe syscall.sched_getscheduler = kernel.function("sys_sched_getscheduler").call
 {
 	name = "sched_getscheduler"
 	pid = $pid
 	argstr = sprint($pid)
 }
-probe syscall.sched_getscheduler.return = kernel.function("SyS_sched_getscheduler").return !,
-                                          kernel.function("sys_sched_getscheduler").return
+probe syscall.sched_getscheduler.return = kernel.function("sys_sched_getscheduler").return
 {
 	name = "sched_getscheduler"
 	retstr = returnstr(1)
@@ -1365,16 +1283,14 @@ probe syscall.sched_getscheduler.return = kernel.function("SyS_sched_getschedule
 #
 # long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval)
 #
-probe syscall.sched_rr_get_interval = kernel.function("SyS_sched_rr_get_interval").call !,
-                                      kernel.function("sys_sched_rr_get_interval").call
+probe syscall.sched_rr_get_interval = kernel.function("sys_sched_rr_get_interval").call
 {
 	name = "sched_rr_get_interval"
 	pid = $pid
 	tp_uaddr = $interval
 	argstr = sprintf("%d, %s", $pid, _struct_timespec_u($interval, 1))
 }
-probe syscall.sched_rr_get_interval.return = kernel.function("SyS_sched_rr_get_interval").return !,
-                                             kernel.function("sys_sched_rr_get_interval").return
+probe syscall.sched_rr_get_interval.return = kernel.function("sys_sched_rr_get_interval").return
 {
 	name = "sched_rr_get_interval"
 	retstr = returnstr(1)
@@ -1387,8 +1303,7 @@ probe syscall.sched_rr_get_interval.return = kernel.function("SyS_sched_rr_get_i
 # FIXME: why the problem with x86_64?
 #
 %( arch != "x86_64" %?
-probe syscall.sched_setaffinity = kernel.function("SyS_sched_setaffinity").call !,
-                                  kernel.function("sys_sched_setaffinity").call
+probe syscall.sched_setaffinity = kernel.function("sys_sched_setaffinity").call
 {
 	name = "sched_setaffinity"
 	pid = $pid
@@ -1397,8 +1312,7 @@ probe syscall.sched_setaffinity = kernel.function("SyS_sched_setaffinity").call
 	argstr = sprintf("%d, %d, %p", $pid, $len, $user_mask_ptr)
 }
 %:
-probe syscall.sched_setaffinity = kernel.function("SyS_sched_setaffinity").call !,
-                                  kernel.function("sys_sched_setaffinity").call
+probe syscall.sched_setaffinity = kernel.function("sys_sched_setaffinity").call
 {
 	name = "sched_setaffinity"
 	pid = $pid
@@ -1407,8 +1321,7 @@ probe syscall.sched_setaffinity = kernel.function("SyS_sched_setaffinity").call
 	argstr = sprintf("%d, <unknown>, %p", $pid, $user_mask_ptr)
 }
 %)
-probe syscall.sched_setaffinity.return = kernel.function("SyS_sched_setaffinity").return !,
-                                         kernel.function("sys_sched_setaffinity").return
+probe syscall.sched_setaffinity.return = kernel.function("sys_sched_setaffinity").return
 {
 	name = "sched_setaffinity"
 	retstr = returnstr(1)
@@ -1418,16 +1331,14 @@ probe syscall.sched_setaffinity.return = kernel.function("SyS_sched_setaffinity"
 #
 # long sys_sched_setparam(pid_t pid, struct sched_param __user *param)
 #
-probe syscall.sched_setparam = kernel.function("SyS_sched_setparam").call !,
-                               kernel.function("sys_sched_setparam").call ?
+probe syscall.sched_setparam = kernel.function("sys_sched_setparam").call ?
 {
 	name = "sched_setparam"
 	pid = $pid
 	p_uaddr = $param
 	argstr = sprintf("%d, %p", $pid, $param)
 }
-probe syscall.sched_setparam.return = kernel.function("SyS_sched_setparam").return !,
-                                      kernel.function("sys_sched_setparam").return ?
+probe syscall.sched_setparam.return = kernel.function("sys_sched_setparam").return ?
 {
 	name = "sched_setparam"
 	retstr = returnstr(1)
@@ -1437,8 +1348,7 @@ probe syscall.sched_setparam.return = kernel.function("SyS_sched_setparam").retu
 #
 # long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param)
 #
-probe syscall.sched_setscheduler = kernel.function("SyS_sched_setscheduler").call !,
-                                   kernel.function("sys_sched_setscheduler").call ?
+probe syscall.sched_setscheduler = kernel.function("sys_sched_setscheduler").call ?
 {
 	name = "sched_setscheduler"
 	pid = $pid
@@ -1447,8 +1357,7 @@ probe syscall.sched_setscheduler = kernel.function("SyS_sched_setscheduler").cal
 	p_uaddr = $param
 	argstr = sprintf("%d, %s, %p", $pid, policy_str, $param)
 }
-probe syscall.sched_setscheduler.return = kernel.function("SyS_sched_setscheduler").return !,
-                                          kernel.function("sys_sched_setscheduler").return ?
+probe syscall.sched_setscheduler.return = kernel.function("sys_sched_setscheduler").return ?
 {
 	name = "sched_setscheduler"
 	retstr = returnstr(1)
@@ -1475,8 +1384,7 @@ probe syscall.sched_yield.return = kernel.function("sys_sched_yield").return
 #		fd_set __user *exp,
 #		struct timeval __user *tvp)
 #
-probe syscall.select = kernel.function("SyS_select").call !,
-                       kernel.function("sys_select").call
+probe syscall.select = kernel.function("sys_select").call
 {
 	name = "select"
 	n = $n
@@ -1487,8 +1395,7 @@ probe syscall.select = kernel.function("SyS_select").call !,
 	argstr = sprintf("%d, %p, %p, %p, %s", $n, $inp, $outp, $exp,
 		_struct_timeval_u($tvp, 1))
 }
-probe syscall.select.return = kernel.function("SyS_select").return !,
-                              kernel.function("sys_select").return
+probe syscall.select.return = kernel.function("sys_select").return
 {
 	name = "select"
 	retstr = returnstr(1)
@@ -1522,8 +1429,7 @@ probe syscall.compat_select.return = kernel.function("compat_sys_select").return
 #		 int cmd,
 #		 union semun arg)
 #
-probe syscall.semctl = kernel.function("SyS_semctl").call !,
-                       kernel.function("sys_semctl").call ?
+probe syscall.semctl = kernel.function("sys_semctl").call ?
 {
 	name = "semctl"
 	semid = $semid
@@ -1535,8 +1441,7 @@ probe syscall.semctl = kernel.function("SyS_semctl").call !,
 	 */
 	argstr = sprintf("%d, %d, %s", $semid, $semnum, _semctl_cmd($cmd))
 }
-probe syscall.semctl.return = kernel.function("SyS_semctl").return !,
-                              kernel.function("sys_semctl").return ?
+probe syscall.semctl.return = kernel.function("sys_semctl").return ?
 {
 	name = "semctl"
 	retstr = returnstr(1)
@@ -1559,8 +1464,7 @@ probe syscall.compat_sys_semctl.return = kernel.function("compat_sys_semctl").re
 # semget _____________________________________________________
 # long sys_semget (key_t key, int nsems, int semflg)
 #
-probe syscall.semget = kernel.function("SyS_semget").call !,
-                       kernel.function("sys_semget").call ?
+probe syscall.semget = kernel.function("sys_semget").call ?
 {
 	name = "semget"
 	key = $key
@@ -1568,8 +1472,7 @@ probe syscall.semget = kernel.function("SyS_semget").call !,
 	semflg = $semflg
 	argstr = sprintf("%d, %d, %s", $key, $nsems, __sem_flags($semflg))
 }
-probe syscall.semget.return = kernel.function("SyS_semget").return !,
-                              kernel.function("sys_semget").return ?
+probe syscall.semget.return = kernel.function("sys_semget").return ?
 {
 	name = "semget"
 	retstr = returnstr(1)
@@ -1581,8 +1484,7 @@ probe syscall.semget.return = kernel.function("SyS_semget").return !,
 #		struct sembuf __user *tsops,
 #		unsigned nsops)
 #
-probe syscall.semop = kernel.function("SyS_semtimedop").call !,
-                      kernel.function("sys_semtimedop").call ?
+probe syscall.semop = kernel.function("sys_semtimedop").call ?
 {
 	name = "semop"
 	semid = $semid
@@ -1590,8 +1492,7 @@ probe syscall.semop = kernel.function("SyS_semtimedop").call !,
 	nsops = $nsops
 	argstr = sprintf("%d, %p, %d", $semid, $tsops, $nsops)
 }
-probe syscall.semop.return = kernel.function("SyS_semtimedop").return !,
-                             kernel.function("sys_semtimedop").return ?
+probe syscall.semop.return = kernel.function("sys_semtimedop").return ?
 {
 	name = "semop"
 	retstr = returnstr(1)
@@ -1604,8 +1505,7 @@ probe syscall.semop.return = kernel.function("SyS_semtimedop").return !,
 #		    unsigned nsops,
 #		    const struct timespec __user *timeout)
 #
-probe syscall.semtimedop = kernel.function("SyS_semtimedop").call !,
-                           kernel.function("sys_semtimedop").call ?
+probe syscall.semtimedop = kernel.function("sys_semtimedop").call ?
 {
 	name = "semtimedop"
 	semid = $semid
@@ -1615,8 +1515,7 @@ probe syscall.semtimedop = kernel.function("SyS_semtimedop").call !,
 	argstr = sprintf("%d, %p, %d, %s", $semid, $tsops, $nsops,
 		_struct_timespec_u($timeout, 1))
 }
-probe syscall.semtimedop.return = kernel.function("SyS_semtimedop").return !,
-                                  kernel.function("sys_semtimedop").return ?
+probe syscall.semtimedop.return = kernel.function("sys_semtimedop").return ?
 {
 	name = "semtimedop"
 	retstr = returnstr(1)
@@ -1649,8 +1548,7 @@ probe syscall.compat_sys_semtimedop.return = kernel.function("compat_sys_semtime
 #		size_t len,
 #		unsigned flags)
 #
-probe syscall.send = kernel.function("SyS_send").call !,
-                     kernel.function("sys_send").call ?
+probe syscall.send = kernel.function("sys_send").call ?
 {
 	name = "send"
 	s = $fd
@@ -1660,8 +1558,7 @@ probe syscall.send = kernel.function("SyS_send").call !,
 	flags_str = _sendflags_str($flags)
 	argstr = sprintf("%d, %p, %d, %s", $fd, $buff, $len, flags_str)
 }
-probe syscall.send.return = kernel.function("SyS_send").return !,
-                            kernel.function("sys_send").return ?
+probe syscall.send.return = kernel.function("sys_send").return ?
 {
 	name = "send"
 	retstr = returnstr(1)
@@ -1674,9 +1571,7 @@ probe syscall.send.return = kernel.function("SyS_send").return !,
 #		  off_t __user *offset,
 #		  size_t count)
 #
-probe syscall.sendfile = kernel.function("SyS_sendfile").call ?,
-                         kernel.function("sys_sendfile").call ?,
-                         kernel.function("SyS_sendfile64").call ?,
+probe syscall.sendfile = kernel.function("sys_sendfile").call ?,
                          kernel.function("sys_sendfile64").call ?
 {
 	name = "sendfile"
@@ -1687,9 +1582,7 @@ probe syscall.sendfile = kernel.function("SyS_sendfile").call ?,
 	argstr = sprintf("%d, %d, %p, %d", $out_fd, $in_fd, $offset,
 		$count)
 }
-probe syscall.sendfile.return = kernel.function("SyS_sendfile").return ?,
-                                kernel.function("sys_sendfile").return ?,
-                                kernel.function("SyS_sendfile64").return ?,
+probe syscall.sendfile.return = kernel.function("sys_sendfile").return ?,
                                 kernel.function("sys_sendfile64").return ?
 {
 	name = "sendfile"
@@ -1700,8 +1593,7 @@ probe syscall.sendfile.return = kernel.function("SyS_sendfile").return ?,
 #
 # long sys_sendmsg(int fd, struct msghdr __user *msg, unsigned flags)
 #
-probe syscall.sendmsg = kernel.function("SyS_sendmsg").call !,
-                        kernel.function("sys_sendmsg").call ?
+probe syscall.sendmsg = kernel.function("sys_sendmsg").call ?
 {
 	name = "sendmsg"
 	s = $fd
@@ -1710,8 +1602,7 @@ probe syscall.sendmsg = kernel.function("SyS_sendmsg").call !,
 	flags_str = _sendflags_str($flags)
 	argstr = sprintf("%d, %p, %s", $fd, $msg, _sendflags_str($flags))
 }
-probe syscall.sendmsg.return = kernel.function("SyS_sendmsg").return !,
-                               kernel.function("sys_sendmsg").return ?
+probe syscall.sendmsg.return = kernel.function("sys_sendmsg").return ?
 {
 	name = "sendmsg"
 	retstr = returnstr(1)
@@ -1743,8 +1634,7 @@ probe syscall.compat_sys_sendmsg.return = kernel.function("compat_sys_sendmsg").
 #		struct sockaddr __user *addr,
 #		int addr_len)
 #
-probe syscall.sendto = kernel.function("SyS_sendto").call !,
-                       kernel.function("sys_sendto").call ?
+probe syscall.sendto = kernel.function("sys_sendto").call ?
 {
 	name = "sendto"
 	s = $fd
@@ -1757,8 +1647,7 @@ probe syscall.sendto = kernel.function("SyS_sendto").call !,
 	argstr = sprintf("%d, %p, %d, %s, %s, %d", $fd, $buff,
 		$len, flags_str, _struct_sockaddr_u($addr, $addr_len), $addr_len)
 }
-probe syscall.sendto.return = kernel.function("SyS_sendto").return !,
-                              kernel.function("sys_sendto").return ?
+probe syscall.sendto.return = kernel.function("sys_sendto").return ?
 {
 	name = "sendto"
 	retstr = returnstr(1)
@@ -1770,16 +1659,14 @@ probe syscall.sendto.return = kernel.function("SyS_sendto").return !,
 # sys_setdomainname(char __user *name,
 #			 int len)
 #
-probe syscall.setdomainname = kernel.function("SyS_setdomainname").call !,
-                              kernel.function("sys_setdomainname").call
+probe syscall.setdomainname = kernel.function("sys_setdomainname").call
 {
 	name = "setdomainname"
 	hostname_uaddr = $name
 	len = $len
 	argstr = sprintf("%p, %d", $name, $len)
 }
-probe syscall.setdomainname.return = kernel.function("SyS_setdomainname").return !,
-                                     kernel.function("sys_setdomainname").return
+probe syscall.setdomainname.return = kernel.function("sys_setdomainname").return
 {
 	name = "setdomainname"
 	retstr = returnstr(1)
@@ -1790,7 +1677,6 @@ probe syscall.setdomainname.return = kernel.function("SyS_setdomainname").return
 # long sys_setfsgid16(old_gid_t gid)
 #
 probe syscall.setfsgid = kernel.function("sys_setfsgid16").call ?,
-                         kernel.function("SyS_setfsgid").call !,
                          kernel.function("sys_setfsgid").call ?
 {
 	name = "setfsgid"
@@ -1798,7 +1684,6 @@ probe syscall.setfsgid = kernel.function("sys_setfsgid16").call ?,
 	argstr = sprint($gid)
 }
 probe syscall.setfsgid.return = kernel.function("sys_setfsgid16").return ?,
-                                kernel.function("SyS_setfsgid").return !,
                                 kernel.function("sys_setfsgid").return ?
 {
 	name = "setfsgid"
@@ -1810,7 +1695,6 @@ probe syscall.setfsgid.return = kernel.function("sys_setfsgid16").return ?,
 # long sys_setfsuid16(old_uid_t uid)
 #
 probe syscall.setfsuid = kernel.function("sys_setfsuid16").call ?,
-                         kernel.function("SyS_setfsuid").call !,
                          kernel.function("sys_setfsuid").call ?
 {
 	name = "setfsuid"
@@ -1818,7 +1702,6 @@ probe syscall.setfsuid = kernel.function("sys_setfsuid16").call ?,
 	argstr = sprint($uid)
 }
 probe syscall.setfsuid.return = kernel.function("sys_setfsuid16").return ?,
-                                kernel.function("SyS_setfsuid").return !,
                                 kernel.function("sys_setfsuid").return ?
 {
 	name = "setfsuid"
@@ -1831,7 +1714,6 @@ probe syscall.setfsuid.return = kernel.function("sys_setfsuid16").return ?,
 # long sys_setgid16(old_gid_t gid)
 #
 probe syscall.setgid = kernel.function("sys_setgid16").call ?,
-                       kernel.function("SyS_setgid").call !,
                        kernel.function("sys_setgid").call ?
 {
 	name = "setgid"
@@ -1839,7 +1721,6 @@ probe syscall.setgid = kernel.function("sys_setgid16").call ?,
 	argstr = sprint($gid)
 }
 probe syscall.setgid.return = kernel.function("sys_setgid16").return ?,
-                              kernel.function("SyS_setgid").return !,
                               kernel.function("sys_setgid").return ?
 {
 	name = "setgid"
@@ -1854,7 +1735,6 @@ probe syscall.setgid.return = kernel.function("sys_setgid16").return ?,
 #
 probe syscall.setgroups = kernel.function("sys_setgroups16").call ?,
                           kernel.function("sys32_setgroups16").call ?,
-                          kernel.function("SyS_setgroups").call !,
                           kernel.function("sys_setgroups").call ?
 {
 	name = "setgroups"
@@ -1864,7 +1744,6 @@ probe syscall.setgroups = kernel.function("sys_setgroups16").call ?,
 }
 probe syscall.setgroups.return = kernel.function("sys_setgroups16").return ?,
                                  kernel.function("sys32_setgroups16").return ?,
-                                 kernel.function("SyS_setgroups").return !,
                                  kernel.function("sys_setgroups").return ?
 {
 	name = "setgroups"
@@ -1877,8 +1756,7 @@ probe syscall.setgroups.return = kernel.function("sys_setgroups16").return ?,
 # sys_sethostname(char __user *name,
 #		     int len)
 #
-probe syscall.sethostname = kernel.function("SyS_sethostname").call !,
-                            kernel.function("sys_sethostname").call
+probe syscall.sethostname = kernel.function("sys_sethostname").call
 {
 	name = "sethostname"
 	hostname_uaddr = $name
@@ -1886,8 +1764,7 @@ probe syscall.sethostname = kernel.function("SyS_sethostname").call !,
 	len = $len
 	argstr = sprintf("%s, %d", user_string_quoted($name), $len)
 }
-probe syscall.sethostname.return = kernel.function("SyS_sethostname").return !,
-                                   kernel.function("sys_sethostname").return
+probe syscall.sethostname.return = kernel.function("sys_sethostname").return
 {
 	name = "sethostname"
 	retstr = returnstr(1)
@@ -1898,8 +1775,7 @@ probe syscall.sethostname.return = kernel.function("SyS_sethostname").return !,
 #		   struct itimerval __user *value,
 #		   struct itimerval __user *ovalue)
 #
-probe syscall.setitimer = kernel.function("SyS_setitimer").call !,
-                          kernel.function("sys_setitimer").call
+probe syscall.setitimer = kernel.function("sys_setitimer").call
 {
 	name = "setitimer"
 	which = $which
@@ -1908,8 +1784,7 @@ probe syscall.setitimer = kernel.function("SyS_setitimer").call !,
 	argstr = sprintf("%s, %s, %p", _itimer_which_str($which),
 		_struct_itimerval_u($value), $ovalue)
 }
-probe syscall.setitimer.return = kernel.function("SyS_setitimer").return !,
-                                 kernel.function("sys_setitimer").return
+probe syscall.setitimer.return = kernel.function("sys_setitimer").return
 {
 	name = "setitimer"
 	retstr = returnstr(1)
@@ -1940,7 +1815,6 @@ probe syscall.compat_setitimer.return = kernel.function("compat_sys_setitimer").
 #	unsigned long maxnode)
 #
 probe syscall.set_mempolicy = kernel.function("compat_sys_set_mempolicy").call ?,
-                              kernel.function("SyS_set_mempolicy").call !,
                               kernel.function("sys_set_mempolicy").call ?
 {
 	name = "set_mempolicy"
@@ -1950,7 +1824,6 @@ probe syscall.set_mempolicy = kernel.function("compat_sys_set_mempolicy").call ?
 	argstr = sprintf("%d, %p, %d", $mode, $nmask, $maxnode)
 }
 probe syscall.set_mempolicy.return = kernel.function("compat_sys_set_mempolicy").return ?,
-                                     kernel.function("SyS_set_mempolicy").return !,
                                      kernel.function("sys_set_mempolicy").return ?
 {
 	name = "set_mempolicy"
@@ -1963,16 +1836,14 @@ probe syscall.set_mempolicy.return = kernel.function("compat_sys_set_mempolicy")
 # sys_setpgid(pid_t pid,
 #		 pid_t pgid)
 #
-probe syscall.setpgid = kernel.function("SyS_setpgid").call !,
-                        kernel.function("sys_setpgid").call
+probe syscall.setpgid = kernel.function("sys_setpgid").call
 {
 	name = "setpgid"
 	pid = $pid
 	pgid = $pgid
 	argstr = sprintf("%d, %d", $pid, $pgid)
 }
-probe syscall.setpgid.return = kernel.function("SyS_setpgid").return !,
-                               kernel.function("sys_setpgid").return
+probe syscall.setpgid.return = kernel.function("sys_setpgid").return
 {
 	name = "setpgid"
 	retstr = returnstr(1)
@@ -1984,8 +1855,7 @@ probe syscall.setpgid.return = kernel.function("SyS_setpgid").return !,
 #		     int who,
 #		     int niceval)
 #
-probe syscall.setpriority = kernel.function("SyS_setpriority").call !,
-                            kernel.function("sys_setpriority").call
+probe syscall.setpriority = kernel.function("sys_setpriority").call
 {
 	name = "setpriority"
 	which = $which
@@ -1994,8 +1864,7 @@ probe syscall.setpriority = kernel.function("SyS_setpriority").call !,
 	prio = $niceval
 	argstr = sprintf("%s, %d, %d", which_str, $who, $niceval)
 }
-probe syscall.setpriority.return = kernel.function("SyS_setpriority").return !,
-                                   kernel.function("sys_setpriority").return
+probe syscall.setpriority.return = kernel.function("sys_setpriority").return
 {
 	name = "setpriority"
 	retstr = returnstr(1)
@@ -2004,16 +1873,14 @@ probe syscall.setpriority.return = kernel.function("SyS_setpriority").return !,
 # setregid ___________________________________________________
 # long sys_setregid(gid_t rgid, gid_t egid)
 #
-probe syscall.setregid = kernel.function("SyS_setregid").call !,
-                         kernel.function("sys_setregid").call
+probe syscall.setregid = kernel.function("sys_setregid").call
 {
 	name = "setregid"
 	rgid = __int32($rgid)
 	egid = __int32($egid)
 	argstr = sprintf("%d, %d", rgid, egid)
 }
-probe syscall.setregid.return = kernel.function("SyS_setregid").return !,
-                                kernel.function("sys_setregid").return
+probe syscall.setregid.return = kernel.function("sys_setregid").return
 {
 	name = "setregid"
 	retstr = returnstr(1)
@@ -2036,8 +1903,7 @@ probe syscall.setregid16.return = kernel.function("sys_setregid16").return ?
 # setresgid __________________________________________________
 # long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
 #
-probe syscall.setresgid = kernel.function("SyS_setresgid").call !,
-                          kernel.function("sys_setresgid").call
+probe syscall.setresgid = kernel.function("sys_setresgid").call
 {
 	name = "setresgid"
 	rgid = __int32($rgid)
@@ -2045,8 +1911,7 @@ probe syscall.setresgid = kernel.function("SyS_setresgid").call !,
 	sgid = __int32($sgid)
 	argstr = sprintf("%d, %d, %d", rgid, egid, sgid)
 }
-probe syscall.setresgid.return = kernel.function("SyS_setresgid").return !,
-                                 kernel.function("sys_setresgid").return
+probe syscall.setresgid.return = kernel.function("sys_setresgid").return
 {
 	name = "setresgid"
 	retstr = returnstr(1)
@@ -2075,8 +1940,7 @@ probe syscall.setresgid16.return = kernel.function("sys_setresgid16").return ?
 #
 # long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
 #
-probe syscall.setresuid = kernel.function("SyS_setresuid").call !,
-                          kernel.function("sys_setresuid").call
+probe syscall.setresuid = kernel.function("sys_setresuid").call
 {
 	name = "setresuid"
 	ruid = __int32($ruid)
@@ -2084,8 +1948,7 @@ probe syscall.setresuid = kernel.function("SyS_setresuid").call !,
 	suid = __int32($suid)
 	argstr = sprintf("%d, %d, %d", ruid, euid, suid)
 }
-probe syscall.setresuid.return = kernel.function("SyS_setresuid").return !,
-                                 kernel.function("sys_setresuid").return
+probe syscall.setresuid.return = kernel.function("sys_setresuid").return
 {
 	name = "setresuid"
 	retstr = returnstr(1)
@@ -2112,16 +1975,14 @@ probe syscall.setresuid16.return = kernel.function("sys_setresuid16").return ?
 # setreuid ___________________________________________________
 # long sys_setreuid(uid_t ruid, uid_t euid)
 #
-probe syscall.setreuid = kernel.function("SyS_setreuid").call !,
-                         kernel.function("sys_setreuid").call
+probe syscall.setreuid = kernel.function("sys_setreuid").call
 {
 	name = "setreuid"
 	ruid = __int32($ruid)
 	euid = __int32($euid)
 	argstr = sprintf("%d, %d", ruid, euid)
 }
-probe syscall.setreuid.return = kernel.function("SyS_setreuid").return !,
-                                kernel.function("sys_setreuid").return
+probe syscall.setreuid.return = kernel.function("sys_setreuid").return
 {
 	name = "setreuid"
 	retstr = returnstr(1)
@@ -2147,8 +2008,7 @@ probe syscall.setreuid16.return = kernel.function("sys_setreuid16").return ?
 # sys_setrlimit(unsigned int resource,
 #		   struct rlimit __user *rlim)
 #
-probe syscall.setrlimit = kernel.function("SyS_setrlimit").call !,
-                          kernel.function("sys_setrlimit").call
+probe syscall.setrlimit = kernel.function("sys_setrlimit").call
 {
 	name = "setrlimit"
 	resource = $resource
@@ -2156,8 +2016,7 @@ probe syscall.setrlimit = kernel.function("SyS_setrlimit").call !,
 	argstr = sprintf("%s, %s", _rlimit_resource_str($resource),
 		_struct_rlimit_u($rlim))
 }
-probe syscall.setrlimit.return = kernel.function("SyS_setrlimit").return !,
-                                 kernel.function("sys_setrlimit").return
+probe syscall.setrlimit.return = kernel.function("sys_setrlimit").return
 {
 	name = "setrlimit"
 	retstr = returnstr(1)
@@ -2186,7 +2045,6 @@ probe syscall.setsid.return = kernel.function("sys_setsid").return
 #		    int optlen)
 #
 probe syscall.setsockopt = kernel.function("compat_sys_setsockopt").call ?,
-                           kernel.function("SyS_setsockopt").call !,
                            kernel.function("sys_setsockopt").call ?
 {
 	name = "setsockopt"
@@ -2201,7 +2059,6 @@ probe syscall.setsockopt = kernel.function("compat_sys_setsockopt").call ?,
 		optname_str, $optval, $optlen)
 }
 probe syscall.setsockopt.return = kernel.function("compat_sys_setsockopt").return ?,
-                                  kernel.function("SyS_setsockopt").return !,
                                   kernel.function("sys_setsockopt").return ?
 {
 	name = "setsockopt"
@@ -2213,15 +2070,13 @@ probe syscall.setsockopt.return = kernel.function("compat_sys_setsockopt").retur
 # asmlinkage long
 # sys_set_tid_address(int __user *tidptr)
 #
-probe syscall.set_tid_address = kernel.function("SyS_set_tid_address").call !,
-                                kernel.function("sys_set_tid_address").call
+probe syscall.set_tid_address = kernel.function("sys_set_tid_address").call
 {
 	name = "set_tid_address"
 	tidptr_uaddr = $tidptr
 	argstr = sprintf("%p", tidptr_uaddr)
 }
-probe syscall.set_tid_address.return = kernel.function("SyS_set_tid_address").return !,
-                                       kernel.function("sys_set_tid_address").return
+probe syscall.set_tid_address.return = kernel.function("sys_set_tid_address").return
 {
 	name = "set_tid_address"
 	retstr = returnstr(1)
@@ -2231,16 +2086,14 @@ probe syscall.set_tid_address.return = kernel.function("SyS_set_tid_address").re
 # long sys_settimeofday(struct timeval __user *tv,
 #			struct timezone __user *tz)
 #
-probe syscall.settimeofday = kernel.function("SyS_settimeofday").call !,
-                             kernel.function("sys_settimeofday").call
+probe syscall.settimeofday = kernel.function("sys_settimeofday").call
 {
 	name = "settimeofday"
 	tv_uaddr = $tv
 	tz_uaddr = $tz
 	argstr = sprintf("%s, %s", _struct_timeval_u($tv, 1), _struct_timezone_u($tz))
 }
-probe syscall.settimeofday.return = kernel.function("SyS_settimeofday").return !,
-                                    kernel.function("sys_settimeofday").return
+probe syscall.settimeofday.return = kernel.function("sys_settimeofday").return
 {
 	name = "settimeofday"
 	retstr = returnstr(1)
@@ -2270,7 +2123,6 @@ probe syscall.settimeofday32.return = kernel.function("sys32_settimeofday").retu
 # long sys_setuid16(old_uid_t uid)
 #
 probe syscall.setuid = kernel.function("sys_setuid16").call ?,
-                       kernel.function("SyS_setuid").call !,
                        kernel.function("sys_setuid").call
 {
 	name = "setuid"
@@ -2278,7 +2130,6 @@ probe syscall.setuid = kernel.function("sys_setuid16").call ?,
 	argstr = sprint($uid)
 }
 probe syscall.setuid.return = kernel.function("sys_setuid16").return ?,
-                              kernel.function("SyS_setuid").return !,
                               kernel.function("sys_setuid").return
 {
 	name = "setuid"
@@ -2292,8 +2143,7 @@ probe syscall.setuid.return = kernel.function("sys_setuid16").return ?,
 #		  size_t size,
 #		  int flags)
 #
-probe syscall.setxattr = kernel.function("SyS_setxattr").call !,
-                         kernel.function("sys_setxattr").call
+probe syscall.setxattr = kernel.function("sys_setxattr").call
 {
 	name = "setxattr"
 	path_uaddr = (@defined($pathname) ? $pathname : $path)
@@ -2308,8 +2158,7 @@ probe syscall.setxattr = kernel.function("SyS_setxattr").call !,
 			user_string_quoted($name),
 			value_uaddr, $size, $flags)
 }
-probe syscall.setxattr.return = kernel.function("SyS_setxattr").return !,
-                                kernel.function("sys_setxattr").return
+probe syscall.setxattr.return = kernel.function("sys_setxattr").return
 {
 	name = "setxattr"
 	retstr = returnstr(1)
@@ -2333,8 +2182,7 @@ probe syscall.sgetmask.return = kernel.function("sys_sgetmask").return ?
 #
 # long sys_shmat(int shmid, char __user *shmaddr, int shmflg)
 #
-probe syscall.shmat = kernel.function("SyS_shmat").call !,
-                      kernel.function("sys_shmat").call ?
+probe syscall.shmat = kernel.function("sys_shmat").call ?
 {
 	name = "shmat"
 	shmid = $shmid
@@ -2342,8 +2190,7 @@ probe syscall.shmat = kernel.function("SyS_shmat").call !,
 	shmflg = $shmflg
 	argstr = sprintf("%d, %p, %s", $shmid, $shmaddr, _shmat_flags_str($shmflg))
 }
-probe syscall.shmat.return = kernel.function("SyS_shmat").return !,
-                             kernel.function("sys_shmat").return ?
+probe syscall.shmat.return = kernel.function("sys_shmat").return ?
 {
 	name = "shmat"
 	retstr = returnstr(1)
@@ -2374,8 +2221,7 @@ probe syscall.compat_sys_shmat.return =	kernel.function("compat_sys_shmat").retu
 #		 int cmd,
 #		 struct shmid_ds __user *buf)
 #
-probe syscall.shmctl = kernel.function("SyS_shmctl").call !,
-                       kernel.function("sys_shmctl").call ?
+probe syscall.shmctl = kernel.function("sys_shmctl").call ?
 {
 	name = "shmctl"
 	shmid = $shmid
@@ -2383,8 +2229,7 @@ probe syscall.shmctl = kernel.function("SyS_shmctl").call !,
 	buf_uaddr = $buf
 	argstr = sprintf("%d, %s, %p", $shmid, _semctl_cmd($cmd), $buf)
 }
-probe syscall.shmctl.return = kernel.function("SyS_shmctl").return !,
-                              kernel.function("sys_shmctl").return ?
+probe syscall.shmctl.return = kernel.function("sys_shmctl").return ?
 {
 	name = "shmctl"
 	retstr = returnstr(1)
@@ -2411,15 +2256,13 @@ probe syscall.compat_sys_shmctl.return = kernel.function("compat_sys_shmctl").re
 #
 # long sys_shmdt(char __user *shmaddr)
 #
-probe syscall.shmdt = kernel.function("SyS_shmdt").call !,
-                      kernel.function("sys_shmdt").call ?
+probe syscall.shmdt = kernel.function("sys_shmdt").call ?
 {
 	name = "shmdt"
 	shmaddr_uaddr = $shmaddr
 	argstr = sprintf("%p", $shmaddr)
 }
-probe syscall.shmdt.return = kernel.function("SyS_shmdt").return !,
-                             kernel.function("sys_shmdt").return ?
+probe syscall.shmdt.return = kernel.function("sys_shmdt").return ?
 {
 	name = "shmdt"
 	retstr = returnstr(1)
@@ -2431,8 +2274,7 @@ probe syscall.shmdt.return = kernel.function("SyS_shmdt").return !,
 #		 size_t size,
 #		 int shmflg)
 #
-probe syscall.shmget = kernel.function("SyS_shmget").call !,
-                       kernel.function("sys_shmget").call ?
+probe syscall.shmget = kernel.function("sys_shmget").call ?
 {
 	name = "shmget"
 	key = $key
@@ -2440,8 +2282,7 @@ probe syscall.shmget = kernel.function("SyS_shmget").call !,
 	shmflg = $shmflg
 	argstr = sprintf("%d, %d, %d", $key, $size, $shmflg)
 }
-probe syscall.shmget.return = kernel.function("SyS_shmget").return !,
-                              kernel.function("sys_shmget").return ?
+probe syscall.shmget.return = kernel.function("sys_shmget").return ?
 {
 	name = "shmget"
 	retstr = returnstr(1)
@@ -2451,8 +2292,7 @@ probe syscall.shmget.return = kernel.function("SyS_shmget").return !,
 #
 # long sys_shutdown(int fd, int how)
 #
-probe syscall.shutdown = kernel.function("SyS_shutdown").call !,
-                         kernel.function("sys_shutdown").call ?
+probe syscall.shutdown = kernel.function("sys_shutdown").call ?
 {
 	name = "shutdown"
 	s = $fd
@@ -2460,8 +2300,7 @@ probe syscall.shutdown = kernel.function("SyS_shutdown").call !,
 	how_str = _shutdown_how_str($how)
 	argstr = sprintf("%d, %s", $fd, how_str)
 }
-probe syscall.shutdown.return = kernel.function("SyS_shutdown").return !,
-                                kernel.function("sys_shutdown").return ?
+probe syscall.shutdown.return = kernel.function("sys_shutdown").return ?
 {
 	name = "shutdown"
 	retstr = returnstr(1)
@@ -2503,16 +2342,14 @@ probe syscall.sigaction32.return = kernel.function("sys32_sigaction").return ?,
 # signal _____________________________________________________
 # unsigned long sys_signal(int sig, __sighandler_t handler)
 #
-probe syscall.signal = kernel.function("SyS_signal").call !,
-                       kernel.function("sys_signal").call ?
+probe syscall.signal = kernel.function("sys_signal").call ?
 {
 	name = "signal"
 	sig = $sig
 	handler = $handler
 	argstr = sprintf("%s, %s", _signal_name($sig), _sighandler_str($handler))
 }
-probe syscall.signal.return = kernel.function("SyS_signal").return !,
-                              kernel.function("sys_signal").return ?
+probe syscall.signal.return = kernel.function("sys_signal").return ?
 {
 	name = "signal"
 	retstr = returnstr(1)
@@ -2524,9 +2361,7 @@ probe syscall.signal.return = kernel.function("SyS_signal").return !,
 # long compat_sys_signalfd(int ufd, const compat_sigset_t __user *sigmask,
 # 		 compat_size_t sigsetsize)
 #
-probe syscall.signalfd = kernel.function("SyS_signalfd4").call !,
-                         kernel.function("sys_signalfd4").call !,
-                         kernel.function("SyS_signalfd").call !,
+probe syscall.signalfd = kernel.function("sys_signalfd4").call !,
                          kernel.function("sys_signalfd").call ?
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -2539,9 +2374,7 @@ probe syscall.signalfd = kernel.function("SyS_signalfd4").call !,
 		       	 	 $sizemask, _signalfd4_flags_str($flags))
 	}
 }
-probe syscall.signalfd.return = kernel.function("SyS_signalfd4").return !,
-                                kernel.function("sys_signalfd4").return !,
-                                kernel.function("SyS_signalfd").return !,
+probe syscall.signalfd.return = kernel.function("sys_signalfd4").return !,
                                 kernel.function("sys_signalfd").return ?
 {
 	flags = @defined($flags) ? $flags : 0;
@@ -2562,14 +2395,12 @@ probe syscall.compat_signalfd.return = kernel.function("compat_sys_signalfd").re
 # sigpending _________________________________________________
 # long sys_sigpending(old_sigset_t __user *set)
 #
-probe syscall.sigpending = kernel.function("SyS_sigpending").call !,
-                           kernel.function("sys_sigpending").call ?
+probe syscall.sigpending = kernel.function("sys_sigpending").call ?
 {
 	name = "sigpending"
 	argstr = sprintf("%p", $set)
 }
-probe syscall.sigpending.return = kernel.function("SyS_sigpending").return !,
-                                  kernel.function("sys_sigpending").return ?
+probe syscall.sigpending.return = kernel.function("sys_sigpending").return ?
 {
 	name = "sigpending"
 	retstr = returnstr(1)
@@ -2578,8 +2409,7 @@ probe syscall.sigpending.return = kernel.function("SyS_sigpending").return !,
 # sigprocmask ________________________________________________
 # long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset)
 #
-probe syscall.sigprocmask = kernel.function("SyS_sigprocmask").call !,
-                            kernel.function("sys_sigprocmask").call ?
+probe syscall.sigprocmask = kernel.function("sys_sigprocmask").call ?
 {
 	name = "sigprocmask"
 	how  = $how
@@ -2588,8 +2418,7 @@ probe syscall.sigprocmask = kernel.function("SyS_sigprocmask").call !,
 	oldset_uaddr = $oset
 	argstr = sprintf("%s, %p, %p", how_str, $set, $oset)
 }
-probe syscall.sigprocmask.return = kernel.function("SyS_sigprocmask").return !,
-                                   kernel.function("sys_sigprocmask").return ?
+probe syscall.sigprocmask.return = kernel.function("sys_sigprocmask").return ?
 {
 	name = "sigprocmask"
 	retstr = returnstr(1)
@@ -2629,8 +2458,7 @@ probe syscall.sigsuspend.return = kernel.function("sys_sigsuspend").return ?,
 # socket _____________________________________________________
 # long sys_socket(int family, int type, int protocol)
 #
-probe syscall.socket = kernel.function("SyS_socket").call !,
-                       kernel.function("sys_socket").call ?
+probe syscall.socket = kernel.function("sys_socket").call ?
 {
 	name = "socket"
 	family = $family
@@ -2640,8 +2468,7 @@ probe syscall.socket = kernel.function("SyS_socket").call !,
 		_sock_type_str($type),
 		$protocol)
 }
-probe syscall.socket.return = kernel.function("SyS_socket").return !,
-                              kernel.function("sys_socket").return ?
+probe syscall.socket.return = kernel.function("sys_socket").return ?
 {
 	name = "socket"
 	retstr = returnstr(1)
@@ -2671,8 +2498,7 @@ probe syscall.socket.return = kernel.function("SyS_socket").return !,
 #		    int protocol,
 #		    int __user *usockvec)
 #
-probe syscall.socketpair = kernel.function("SyS_socketpair").call !,
-                           kernel.function("sys_socketpair").call ?
+probe syscall.socketpair = kernel.function("sys_socketpair").call ?
 {
 	name = "socketpair"
 	family = $family
@@ -2684,8 +2510,7 @@ probe syscall.socketpair = kernel.function("SyS_socketpair").call !,
 		_sock_type_str($type),
 		$protocol, sv_uaddr)
 }
-probe syscall.socketpair.return = kernel.function("SyS_socketpair").return !,
-                                  kernel.function("sys_socketpair").return ?
+probe syscall.socketpair.return = kernel.function("sys_socketpair").return ?
 {
 	name = "socketpair"
 	retstr = returnstr(1)
@@ -2697,15 +2522,13 @@ probe syscall.socketpair.return = kernel.function("SyS_socketpair").return !,
 #		   int fd_out, loff_t __user *off_out,
 #		   size_t len, unsigned int flags)
 #
-probe syscall.splice = kernel.function("SyS_splice").call !,
-                       kernel.function("sys_splice").call ?
+probe syscall.splice = kernel.function("sys_splice").call ?
 {
 	name = "splice"
 	argstr = sprintf("%d, %p, %d, %p, %d, 0x%x",
 		$fd_in, $off_in, $fd_out, $off_out, $len, $flags)
 }
-probe syscall.splice.return = kernel.function("SyS_splice").return !,
-                              kernel.function("sys_splice").return ?
+probe syscall.splice.return = kernel.function("sys_splice").return ?
 {
 	name = "splice"
 	retstr = returnstr(1)
@@ -2715,15 +2538,13 @@ probe syscall.splice.return = kernel.function("SyS_splice").return !,
 #
 # long sys_ssetmask(int newmask)
 #
-probe syscall.ssetmask = kernel.function("SyS_ssetmask").call !,
-                         kernel.function("sys_ssetmask").call ?
+probe syscall.ssetmask = kernel.function("sys_ssetmask").call ?
 {
 	name = "ssetmask"
 	newmask = $newmask
 	argstr = sprint($newmask)
 }
-probe syscall.ssetmask.return = kernel.function("SyS_ssetmask").return !,
-                                kernel.function("sys_ssetmask").return ?
+probe syscall.ssetmask.return = kernel.function("sys_ssetmask").return ?
 {
 	name = "ssetmask"
 	retstr = returnstr(1)
@@ -2736,10 +2557,8 @@ probe syscall.ssetmask.return = kernel.function("SyS_ssetmask").return !,
 # long sys_oabi_stat64(char __user * filename, struct oldabi_stat64 __user * statbuf)
 # long compat_sys_newstat(char __user * filename, struct compat_stat __user *statbuf)
 probe syscall.stat = kernel.function("sys_stat").call ?,
-                     kernel.function("SyS_newstat").call ?,
                      kernel.function("sys_newstat").call ?,
                      kernel.function("sys32_stat64").call ?,
-                     kernel.function("SyS_stat64").call ?,
                      kernel.function("sys_stat64").call ?,
                      kernel.function("sys_oabi_stat64").call ?,
                      kernel.function("compat_sys_newstat").call ?
@@ -2751,10 +2570,8 @@ probe syscall.stat = kernel.function("sys_stat").call ?,
 	argstr = sprintf("%s, %p", user_string_quoted($filename), buf_uaddr)
 }
 probe syscall.stat.return = kernel.function("sys_stat").return ?,
-                            kernel.function("SyS_newstat").return ?,
                             kernel.function("sys_newstat").return ?,
                             kernel.function("sys32_stat64").return ?,
-                            kernel.function("SyS_stat64").return ?,
                             kernel.function("sys_stat64").return ?,
                             kernel.function("sys_oabi_stat64").return ?,
                             kernel.function("compat_sys_newstat").return ?
@@ -2768,7 +2585,6 @@ probe syscall.stat.return = kernel.function("sys_stat").return ?,
 # long compat_sys_statfs(const char __user *path, struct compat_statfs __user *buf)
 #
 probe syscall.statfs = kernel.function("compat_sys_statfs").call ?,
-                       kernel.function("SyS_statfs").call !,
                        kernel.function("sys_statfs").call ?
 {
 	name = "statfs"
@@ -2780,7 +2596,6 @@ probe syscall.statfs = kernel.function("compat_sys_statfs").call ?,
 }
 
 probe syscall.statfs.return = kernel.function("compat_sys_statfs").return ?,
-                              kernel.function("SyS_statfs").return !,
                               kernel.function("sys_statfs").return ?
 {
 	name = "statfs"
@@ -2793,7 +2608,6 @@ probe syscall.statfs.return = kernel.function("compat_sys_statfs").return ?,
 # long compat_sys_statfs64(const char __user *path, compat_size_t sz, struct compat_statfs64 __user *buf)
 #
 probe syscall.statfs64 = kernel.function("compat_sys_statfs64").call ?,
-                         kernel.function("SyS_statfs64").call !,
                          kernel.function("sys_statfs64").call ?
 {
 	name = "statfs"
@@ -2807,7 +2621,6 @@ probe syscall.statfs64 = kernel.function("compat_sys_statfs64").call ?,
 }
 
 probe syscall.statfs64.return = kernel.function("compat_sys_statfs64").return ?,
-                                kernel.function("SyS_statfs64").return !,
                                 kernel.function("sys_statfs64").return ?
 {
 	name = "statfs"
@@ -2820,7 +2633,6 @@ probe syscall.statfs64.return = kernel.function("compat_sys_statfs64").return ?,
 # long compat_sys_stime(compat_time_t __user *tptr)
 #
 probe syscall.stime = kernel.function("compat_sys_stime").call ?,
-                      kernel.function("SyS_stime").call !,
                       kernel.function("sys_stime").call ?
 {
 	name = "stime"
@@ -2829,7 +2641,6 @@ probe syscall.stime = kernel.function("compat_sys_stime").call ?,
 	argstr = sprintf("%p", $tptr)
 }
 probe syscall.stime.return = kernel.function("compat_sys_stime").return ?,
-                             kernel.function("SyS_stime").return !,
                              kernel.function("sys_stime").return ?
 {
 	name = "stime"
@@ -2841,15 +2652,13 @@ probe syscall.stime.return = kernel.function("compat_sys_stime").return ?,
 # asmlinkage long
 # sys_swapoff(const char __user * specialfile)
 #
-probe syscall.swapoff = kernel.function("SyS_swapoff").call !,
-                        kernel.function("sys_swapoff").call ?
+probe syscall.swapoff = kernel.function("sys_swapoff").call ?
 {
 	name = "swapoff"
 	path = user_string($specialfile)
 	argstr = user_string_quoted($specialfile)
 }
-probe syscall.swapoff.return = kernel.function("SyS_swapoff").return !,
-                               kernel.function("sys_swapoff").return ?
+probe syscall.swapoff.return = kernel.function("sys_swapoff").return ?
 {
 	name = "swapoff"
 	retstr = returnstr(1)
@@ -2860,16 +2669,14 @@ probe syscall.swapoff.return = kernel.function("SyS_swapoff").return !,
 # sys_swapon(const char __user * specialfile,
 #		int swap_flags)
 #
-probe syscall.swapon = kernel.function("SyS_swapon").call !,
-                       kernel.function("sys_swapon").call ?
+probe syscall.swapon = kernel.function("sys_swapon").call ?
 {
 	name = "swapon"
 	path = user_string($specialfile)
 	swapflags = $swap_flags
 	argstr = sprintf("%s, %d", user_string_quoted($specialfile), swapflags)
 }
-probe syscall.swapon.return = kernel.function("SyS_swapon").return !,
-                              kernel.function("sys_swapon").return ?
+probe syscall.swapon.return = kernel.function("sys_swapon").return ?
 {
 	name = "swapon"
 	retstr = returnstr(1)
@@ -2878,8 +2685,7 @@ probe syscall.swapon.return = kernel.function("SyS_swapon").return !,
 # symlink ____________________________________________________
 # long sys_symlink(const char __user * oldname,
 #		 const char __user * newname)
-probe syscall.symlink = kernel.function("SyS_symlink").call !,
-                        kernel.function("sys_symlink").call
+probe syscall.symlink = kernel.function("sys_symlink").call
 {
 	name = "symlink"
 	oldpath = user_string($oldname)
@@ -2887,8 +2693,7 @@ probe syscall.symlink = kernel.function("SyS_symlink").call !,
 	argstr = sprintf("%s, %s", user_string_quoted($oldname),
 		user_string_quoted($newname))
 }
-probe syscall.symlink.return = kernel.function("SyS_symlink").return !,
-                               kernel.function("sys_symlink").return
+probe syscall.symlink.return = kernel.function("sys_symlink").return
 {
 	name = "symlink"
 	retstr = returnstr(1)
@@ -2898,8 +2703,7 @@ probe syscall.symlink.return = kernel.function("SyS_symlink").return !,
 # new function with 2.6.16
 # long sys_symlinkat(const char __user *oldname, int newdfd,
 #	const char __user *newname)
-probe syscall.symlinkat = kernel.function("SyS_symlinkat").call !,
-                          kernel.function("sys_symlinkat").call ?
+probe syscall.symlinkat = kernel.function("sys_symlinkat").call ?
 {
 	name = "symlinkat"
 	oldname = $oldname
@@ -2911,8 +2715,7 @@ probe syscall.symlinkat = kernel.function("SyS_symlinkat").call !,
 	argstr = sprintf("%s, %s, %s", user_string_quoted($oldname),
 		newdfd_str, user_string_quoted($newname))
 }
-probe syscall.symlinkat.return = kernel.function("SyS_symlinkat").return !,
-                                 kernel.function("sys_symlinkat").return ?
+probe syscall.symlinkat.return = kernel.function("sys_symlinkat").return ?
 {
 	name = "symlinkat"
 	retstr = returnstr(1)
@@ -2938,14 +2741,12 @@ probe syscall.sync.return = kernel.function("sys_sync").return
 # long sys_sysctl(struct __sysctl_args __user *args)
 #
 probe syscall.sysctl = kernel.function("compat_sys_sysctl").call ?,
-                       kernel.function("SyS_sysctl").call !,
                        kernel.function("sys_sysctl").call ?
 {
 	name = "sysctl"
 	argstr = sprintf("%p", $args)
 }
 probe syscall.sysctl.return = kernel.function("compat_sys_sysctl").return ?,
-                              kernel.function("SyS_sysctl").return !,
                               kernel.function("sys_sysctl").return ?
 {
 	name = "sysctl"
@@ -2959,8 +2760,7 @@ probe syscall.sysctl.return = kernel.function("compat_sys_sysctl").return ?,
 #	     unsigned long arg1,
 #	     unsigned long arg2)
 #
-probe syscall.sysfs = kernel.function("SyS_sysfs").call !,
-                      kernel.function("sys_sysfs").call
+probe syscall.sysfs = kernel.function("sys_sysfs").call
 {
 	name = "sysfs"
 	option = $option
@@ -2975,8 +2775,7 @@ probe syscall.sysfs = kernel.function("SyS_sysfs").call !,
 	else
 		argstr = sprintf("%d, %d, %d", $option, $arg1, $arg2)
 }
-probe syscall.sysfs.return = kernel.function("SyS_sysfs").return !,
-                             kernel.function("sys_sysfs").return
+probe syscall.sysfs.return = kernel.function("sys_sysfs").return
 {
 	name = "sysfs"
 	retstr = returnstr(1)
@@ -2986,7 +2785,6 @@ probe syscall.sysfs.return = kernel.function("SyS_sysfs").return !,
 # long sys_sysinfo(struct sysinfo __user *info)
 # long compat_sys_sysinfo(struct compat_sysinfo __user *info)
 probe syscall.sysinfo = kernel.function("compat_sys_sysinfo").call ?,
-                        kernel.function("SyS_sysinfo").call !,
                         kernel.function("sys_sysinfo").call
 {
 	name = "sysinfo"
@@ -2994,7 +2792,6 @@ probe syscall.sysinfo = kernel.function("compat_sys_sysinfo").call ?,
 	argstr = sprintf("%p", $info)
 }
 probe syscall.sysinfo.return = kernel.function("compat_sys_sysinfo").return ?,
-                               kernel.function("SyS_sysinfo").return !,
                                kernel.function("sys_sysinfo").return
 {
 	name = "sysinfo"
@@ -3005,8 +2802,7 @@ probe syscall.sysinfo.return = kernel.function("compat_sys_sysinfo").return ?,
 #
 # long sys_syslog(int type, char __user * buf, int len)
 #
-probe syscall.syslog = kernel.function("SyS_syslog").call !,
-                       kernel.function("sys_syslog").call
+probe syscall.syslog = kernel.function("sys_syslog").call
 {
 	name = "syslog"
 	type = $type
@@ -3014,8 +2810,7 @@ probe syscall.syslog = kernel.function("SyS_syslog").call !,
 	len = $len
 	argstr = sprintf("%d, %p, %d", $type, $buf, $len)
 }
-probe syscall.syslog.return = kernel.function("SyS_syslog").return !,
-                              kernel.function("sys_syslog").return
+probe syscall.syslog.return = kernel.function("sys_syslog").return
 {
 	name = "syslog"
 	retstr = returnstr(1)
@@ -3025,14 +2820,12 @@ probe syscall.syslog.return = kernel.function("SyS_syslog").return !,
 #
 # long sys_tee(int fdin, int fdout, size_t len, unsigned int flags)
 #
-probe syscall.tee = kernel.function("SyS_tee").call !,
-                    kernel.function("sys_tee").call ?
+probe syscall.tee = kernel.function("sys_tee").call ?
 {
 	name = "tee"
 	argstr = sprintf("%d, %d, %d, 0x%x", $fdin, $fdout, $len, $flags)
 }
-probe syscall.tee.return = kernel.function("SyS_tee").return !,
-                           kernel.function("sys_tee").return ?
+probe syscall.tee.return = kernel.function("sys_tee").return ?
 {
 	name = "tee"
 	retstr = returnstr(1)
@@ -3045,8 +2838,7 @@ probe syscall.tee.return = kernel.function("SyS_tee").return !,
 #		int pid,
 #		int sig)
 #
-probe syscall.tgkill = kernel.function("SyS_tgkill").call !,
-                       kernel.function("sys_tgkill").call
+probe syscall.tgkill = kernel.function("sys_tgkill").call
 {
 	name = "tgkill"
 	tgid = $tgid
@@ -3054,8 +2846,7 @@ probe syscall.tgkill = kernel.function("SyS_tgkill").call !,
 	sig = $sig
 	argstr = sprintf("%d, %d, %s", $tgid, $pid, _signal_name($sig))
 }
-probe syscall.tgkill.return = kernel.function("SyS_tgkill").return !,
-                              kernel.function("sys_tgkill").return
+probe syscall.tgkill.return = kernel.function("sys_tgkill").return
 {
 	name = "tgkill"
 	retstr = returnstr(1)
@@ -3070,7 +2861,6 @@ probe syscall.tgkill.return = kernel.function("SyS_tgkill").return !,
 probe syscall.time = kernel.function("sys32_time").call ?,
                      kernel.function("sys_time64").call ?,
                      kernel.function("compat_sys_time").call ?,
-                     kernel.function("SyS_time").call !,
                      kernel.function("sys_time").call ?
 {
 	name = "time"
@@ -3080,7 +2870,6 @@ probe syscall.time = kernel.function("sys32_time").call ?,
 probe syscall.time.return = kernel.function("sys32_time").return ?,
                             kernel.function("sys_time64").return ?,
                             kernel.function("compat_sys_time").return ?,
-                            kernel.function("SyS_time").return !,
                             kernel.function("sys_time").return ?
 {
 	name = "time"
@@ -3093,8 +2882,7 @@ probe syscall.time.return = kernel.function("sys32_time").return ?,
 #			struct sigevent __user *timer_event_spec,
 #			timer_t __user * created_timer_id)
 #
-probe syscall.timer_create = kernel.function("SyS_timer_create").call !,
-                             kernel.function("sys_timer_create").call
+probe syscall.timer_create = kernel.function("sys_timer_create").call
 {
 	name = "timer_create"
 	clockid = $which_clock
@@ -3103,8 +2891,7 @@ probe syscall.timer_create = kernel.function("SyS_timer_create").call !,
 	timerid_uaddr = $created_timer_id
 	argstr = sprintf("%s, %p, %p", clockid_str, $timer_event_spec, $created_timer_id)
 }
-probe syscall.timer_create.return = kernel.function("SyS_timer_create").return !,
-                                    kernel.function("sys_timer_create").return
+probe syscall.timer_create.return = kernel.function("sys_timer_create").return
 {
 	name = "timer_create"
 	retstr = returnstr(1)
@@ -3114,15 +2901,13 @@ probe syscall.timer_create.return = kernel.function("SyS_timer_create").return !
 #
 # long sys_timer_delete(timer_t timer_id)
 #
-probe syscall.timer_delete = kernel.function("SyS_timer_delete").call !,
-                             kernel.function("sys_timer_delete").call
+probe syscall.timer_delete = kernel.function("sys_timer_delete").call
 {
 	name = "timer_delete"
 	timerid = $timer_id
 	argstr = sprint($timer_id)
 }
-probe syscall.timer_delete.return = kernel.function("SyS_timer_delete").return !,
-                                    kernel.function("sys_timer_delete").return
+probe syscall.timer_delete.return = kernel.function("sys_timer_delete").return
 {
 	name = "timer_delete"
 	retstr = returnstr(1)
@@ -3132,15 +2917,13 @@ probe syscall.timer_delete.return = kernel.function("SyS_timer_delete").return !
 #
 # long sys_timer_getoverrun(timer_t timer_id)
 #
-probe syscall.timer_getoverrun = kernel.function("SyS_timer_getoverrun").call !,
-                                 kernel.function("sys_timer_getoverrun").call
+probe syscall.timer_getoverrun = kernel.function("sys_timer_getoverrun").call
 {
 	name = "timer_getoverrun"
 	timerid = $timer_id
 	argstr = sprint($timer_id)
 }
-probe syscall.timer_getoverrun.return = kernel.function("SyS_timer_getoverrun").return !,
-                                        kernel.function("sys_timer_getoverrun").return
+probe syscall.timer_getoverrun.return = kernel.function("sys_timer_getoverrun").return
 {
 	name = "timer_getoverrun"
 	retstr = returnstr(1)
@@ -3151,16 +2934,14 @@ probe syscall.timer_getoverrun.return = kernel.function("SyS_timer_getoverrun").
 # long sys_timer_gettime(timer_t timer_id,
 #			 struct itimerspec __user *setting)
 #
-probe syscall.timer_gettime = kernel.function("SyS_timer_gettime").call !,
-                              kernel.function("sys_timer_gettime").call
+probe syscall.timer_gettime = kernel.function("sys_timer_gettime").call
 {
 	name = "timer_gettime"
 	timerid = $timer_id
 	value_uaddr = $setting
 	argstr = sprintf("%d, %p", $timer_id, $setting)
 }
-probe syscall.timer_gettime.return = kernel.function("SyS_timer_gettime").return !,
-                                     kernel.function("sys_timer_gettime").return
+probe syscall.timer_gettime.return = kernel.function("sys_timer_gettime").return
 {
 	name = "timer_gettime"
 	retstr = returnstr(1)
@@ -3173,8 +2954,7 @@ probe syscall.timer_gettime.return = kernel.function("SyS_timer_gettime").return
 #			 const struct itimerspec __user *new_setting,
 #			 struct itimerspec __user *old_setting)
 #
-probe syscall.timer_settime = kernel.function("SyS_timer_settime").call !,
-                              kernel.function("sys_timer_settime").call
+probe syscall.timer_settime = kernel.function("sys_timer_settime").call
 {
 	name = "timer_settime"
 	timerid = $timer_id
@@ -3185,8 +2965,7 @@ probe syscall.timer_settime = kernel.function("SyS_timer_settime").call !,
 		_struct_itimerspec_u($new_setting),
 		$old_setting)
 }
-probe syscall.timer_settime.return = kernel.function("SyS_timer_settime").return !,
-                                     kernel.function("sys_timer_settime").return
+probe syscall.timer_settime.return = kernel.function("sys_timer_settime").return
 {
 	name = "timer_settime"
 	retstr = returnstr(1)
@@ -3217,14 +2996,12 @@ probe syscall.timerfd.return = kernel.function("sys_timerfd").return ?,
 # long sys_times(struct tms __user * tbuf)
 # long compat_sys_times(struct compat_tms __user *tbuf)
 probe syscall.times = kernel.function("compat_sys_times").call ?,
-                      kernel.function("SyS_times").call !,
                       kernel.function("sys_times").call ?
 {
 	name = "times"
 	argstr = sprintf("%p", $tbuf)
 }
 probe syscall.times.return = kernel.function("compat_sys_times").return ?,
-                             kernel.function("SyS_times").return !,
                              kernel.function("sys_times").return ?
 {
 	name = "times"
@@ -3237,16 +3014,14 @@ probe syscall.times.return = kernel.function("compat_sys_times").return ?,
 # sys_tkill(int pid,
 #	     int sig)
 #
-probe syscall.tkill = kernel.function("SyS_tkill").call !,
-                      kernel.function("sys_tkill").call
+probe syscall.tkill = kernel.function("sys_tkill").call
 {
 	name = "tkill"
 	pid = $pid
 	sig = $sig
 	argstr = sprintf("%d, %s", $pid, _signal_name($sig))
 }
-probe syscall.tkill.return = kernel.function("SyS_tkill").return !,
-                             kernel.function("sys_tkill").return
+probe syscall.tkill.return = kernel.function("sys_tkill").return
 {
 	name = "tkill"
 	retstr = returnstr(1)
@@ -3257,8 +3032,7 @@ probe syscall.tkill.return = kernel.function("SyS_tkill").return !,
 # sys_truncate(const char __user * path, unsigned long length)
 # sys_truncate64(const char __user * path, loff_t length)
 #
-probe syscall.truncate = kernel.function("SyS_truncate").call !,
-                         kernel.function("sys_truncate").call ?,
+probe syscall.truncate = kernel.function("sys_truncate").call ?,
                          kernel.function("sys_truncate64").call ?
 {
 	name = "truncate"
@@ -3267,8 +3041,7 @@ probe syscall.truncate = kernel.function("SyS_truncate").call !,
 	length = $length
 	argstr = sprintf("%s, %d", user_string_quoted($path), $length)
 }
-probe syscall.truncate.return = kernel.function("SyS_truncate").return !,
-                                kernel.function("sys_truncate").return ?,
+probe syscall.truncate.return = kernel.function("sys_truncate").return ?,
                                 kernel.function("sys_truncate64").return ?
 {
 	name = "truncate"
@@ -3294,15 +3067,13 @@ probe syscall.tux.return = kernel.function("sys_tux").return ?
 # umask ______________________________________________________
 # long sys_umask(int mask)
 #
-probe syscall.umask = kernel.function("SyS_umask").call !,
-                      kernel.function("sys_umask").call
+probe syscall.umask = kernel.function("sys_umask").call
 {
 	name = "umask"
 	mask = $mask
 	argstr = sprintf("%#o", $mask)
 }
-probe syscall.umask.return = kernel.function("SyS_umask").return !,
-                             kernel.function("sys_umask").return
+probe syscall.umask.return = kernel.function("sys_umask").return
 {
 	name = "umask"
 	retstr = returnstr(3)
@@ -3311,8 +3082,7 @@ probe syscall.umask.return = kernel.function("SyS_umask").return !,
 # umount _____________________________________________________
 # long sys_umount(char __user * name, int flags)
 #
-probe syscall.umount = kernel.function("SyS_umount").call !,
-                       kernel.function("sys_umount").call
+probe syscall.umount = kernel.function("sys_umount").call
 {
 	name = "umount"
 	target = user_string($name)
@@ -3320,8 +3090,7 @@ probe syscall.umount = kernel.function("SyS_umount").call !,
 	flags_str = _umountflags_str($flags)
 	argstr = sprintf("%s, %s", user_string_quoted($name), flags_str)
 }
-probe syscall.umount.return = kernel.function("SyS_umount").return !,
-                              kernel.function("sys_umount").return
+probe syscall.umount.return = kernel.function("sys_umount").return
 {
 	name = "umount"
 	retstr = returnstr(1)
@@ -3338,7 +3107,6 @@ probe syscall.uname = kernel.function("sys_uname").call ?,
                       kernel.function("sys_olduname").call ?,
                       kernel.function("sys32_olduname").call ?,
                       kernel.function("sys32_uname").call ?,
-                      kernel.function("SyS_newuname").call !,
                       kernel.function("sys_newuname").call ?
 {
 	name = "uname"
@@ -3349,7 +3117,6 @@ probe syscall.uname.return = kernel.function("sys_uname").return ?,
                              kernel.function("sys_olduname").return ?,
                              kernel.function("sys32_olduname").return ?,
                              kernel.function("sys32_uname").return ?,
-                             kernel.function("SyS_newuname").return !,
                              kernel.function("sys_newuname").return ?
 {
 	name = "uname"
@@ -3359,16 +3126,14 @@ probe syscall.uname.return = kernel.function("sys_uname").return ?,
 # unlink _____________________________________________________
 # long sys_unlink(const char __user * pathname)
 #
-probe syscall.unlink = kernel.function("SyS_unlink").call !,
-                       kernel.function("sys_unlink").call
+probe syscall.unlink = kernel.function("sys_unlink").call
 {
 	name = "unlink"
 	pathname_uaddr = $pathname
 	pathname = user_string($pathname)
 	argstr = user_string_quoted($pathname)
 }
-probe syscall.unlink.return = kernel.function("SyS_unlink").return !,
-                              kernel.function("sys_unlink").return
+probe syscall.unlink.return = kernel.function("sys_unlink").return
 {
 	name = "unlink"
 	retstr = returnstr(1)
@@ -3378,8 +3143,7 @@ probe syscall.unlink.return = kernel.function("SyS_unlink").return !,
 # new function with 2.6.16
 # long sys_unlinkat(int dfd, const char __user *pathname,
 #	int flag)
-probe syscall.unlinkat = kernel.function("SyS_unlinkat").call !,
-                         kernel.function("sys_unlinkat").call ?
+probe syscall.unlinkat = kernel.function("sys_unlinkat").call ?
 {
 	name = "unlinkat"
 	dfd = $dfd
@@ -3390,8 +3154,7 @@ probe syscall.unlinkat = kernel.function("SyS_unlinkat").call !,
 	flag_str = _at_flag_str($flag)
 	argstr = sprintf("%s, %s, %s", dfd_str, user_string_quoted($pathname), flag_str)
 }
-probe syscall.unlinkat.return = kernel.function("SyS_unlinkat").return !,
-                                kernel.function("sys_unlinkat").return ?
+probe syscall.unlinkat.return = kernel.function("sys_unlinkat").return ?
 {
 	name = "unlinkat"
 	retstr = returnstr(1)
@@ -3400,15 +3163,13 @@ probe syscall.unlinkat.return = kernel.function("SyS_unlinkat").return !,
 # unshare ____________________________________________________
 # new function with 2.6.16
 # long sys_unshare(unsigned long unshare_flags)
-probe syscall.unshare = kernel.function("SyS_unshare").call !,
-                        kernel.function("sys_unshare").call ?
+probe syscall.unshare = kernel.function("sys_unshare").call ?
 {
 	name = "unshare"
 	unshare_flags = $unshare_flags
 	argstr = __fork_flags(unshare_flags)
 }
-probe syscall.unshare.return = kernel.function("SyS_unshare").return !,
-                               kernel.function("sys_unshare").return ?
+probe syscall.unshare.return = kernel.function("sys_unshare").return ?
 {
 	name = "unshare"
 	retstr = returnstr(1)
@@ -3419,16 +3180,14 @@ probe syscall.unshare.return = kernel.function("SyS_unshare").return !,
 # asmlinkage long
 # sys_uselib(const char __user * library)
 #
-probe syscall.uselib = kernel.function("SyS_uselib").call !,
-                       kernel.function("sys_uselib").call
+probe syscall.uselib = kernel.function("sys_uselib").call
 {
 	name = "uselib"
 	library_uaddr = $library
 	library = user_string($library)
 	argstr = user_string_quoted($library)
 }
-probe syscall.uselib.return = kernel.function("SyS_uselib").return !,
-                              kernel.function("sys_uselib").return
+probe syscall.uselib.return = kernel.function("sys_uselib").return
 {
 	name = "uselib"
 	retstr = returnstr(1)
@@ -3436,8 +3195,7 @@ probe syscall.uselib.return = kernel.function("SyS_uselib").return !,
 # ustat ______________________________________________________
 # long sys_ustat(unsigned dev, struct ustat __user * ubuf)
 #
-probe syscall.ustat = kernel.function("SyS_ustat").call !,
-                      kernel.function("sys_ustat").call
+probe syscall.ustat = kernel.function("sys_ustat").call
 {
 	name = "ustat"
 	dev = $dev
@@ -3462,8 +3220,7 @@ probe syscall.ustat32 = kernel.function("compat_sys_ustat").call ?
 	argstr = sprintf("%d, %p", $dev, $u)
 }
 
-probe syscall.ustat.return = kernel.function("SyS_ustat").return ?,
-                             kernel.function("sys_ustat").return ?,
+probe syscall.ustat.return = kernel.function("sys_ustat").return ?,
                              kernel.function("sys32_ustat").return ?,
                              kernel.function("compat_sys_ustat").return ?
 {
@@ -3473,8 +3230,7 @@ probe syscall.ustat.return = kernel.function("SyS_ustat").return ?,
 
 # utime ______________________________________________________
 # long sys_utime(char __user * filename, struct utimbuf __user * times)
-probe syscall.utime = kernel.function("SyS_utime").call !,
-                      kernel.function("sys_utime").call ?
+probe syscall.utime = kernel.function("sys_utime").call ?
 {
 	name = "utime"
 	filename_uaddr = $filename
@@ -3485,8 +3241,7 @@ probe syscall.utime = kernel.function("SyS_utime").call !,
 	argstr = sprintf("%s, [%s, %s]", user_string_quoted($filename),
 		ctime(actime), ctime(modtime))
 }
-probe syscall.utime.return = kernel.function("SyS_utime").return !,
-                             kernel.function("sys_utime").return ?
+probe syscall.utime.return = kernel.function("sys_utime").return ?
 {
 	name = "utime"
 	retstr = returnstr(1)
@@ -3514,8 +3269,7 @@ probe syscall.compat_utime.return = kernel.function("compat_sys_utime").return ?
 #
 # long sys_utimes(char __user * filename, struct timeval __user * utimes)
 #
-probe syscall.utimes = kernel.function("SyS_utimes").call !,
-                       kernel.function("sys_utimes").call
+probe syscall.utimes = kernel.function("sys_utimes").call
 {
 	name = "utimes"
 	filename_uaddr = $filename
@@ -3524,8 +3278,7 @@ probe syscall.utimes = kernel.function("SyS_utimes").call !,
 	argstr = sprintf("%s, %s", user_string_quoted($filename),
 		_struct_timeval_u($utimes, 2))
 }
-probe syscall.utimes.return = kernel.function("SyS_utimes").return !,
-                              kernel.function("sys_utimes").return
+probe syscall.utimes.return = kernel.function("sys_utimes").return
 {
 	name = "utimes"
 	retstr = returnstr(1)
@@ -3551,8 +3304,7 @@ probe syscall.compat_sys_utimes.return = kernel.function("compat_sys_utimes").re
 # long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags)
 # long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)
 #
-probe syscall.utimensat = kernel.function("SyS_utimensat").call !,
-                          kernel.function("sys_utimensat").call ?
+probe syscall.utimensat = kernel.function("sys_utimensat").call ?
 {
 	name = "utimensat"
 	argstr = sprintf("%s, %s, %s, %s", _dfd_str($dfd), user_string_quoted($filename), _struct_timespec_u($utimes, 2),
@@ -3564,8 +3316,7 @@ probe syscall.compat_utimensat = kernel.function("compat_sys_utimensat").call ?
 	argstr = sprintf("%s, %s, %s, %s", _dfd_str($dfd), user_string_quoted($filename), _struct_compat_timespec_u($t, 2),
 		_at_flag_str($flags))
 }
-probe syscall.utimensat.return = kernel.function("SyS_utimensat").return !,
-                                 kernel.function("sys_utimensat").return ?
+probe syscall.utimensat.return = kernel.function("sys_utimensat").return ?
 {
 	name = "utimensat"
 	retstr = returnstr(1)
@@ -3599,8 +3350,7 @@ probe syscall.vhangup.return = kernel.function("sys_vhangup").return
 # long compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,
 #	    unsigned int nr_segs, unsigned int flags)
 #
-probe syscall.vmsplice = kernel.function("SyS_vmsplice").call !,
-                         kernel.function("sys_vmsplice").call ?
+probe syscall.vmsplice = kernel.function("sys_vmsplice").call ?
 {
 	name = "vmsplice"
 	argstr = sprintf("%d, %p, %d, 0x%x", $fd, $iov, $nr_segs, $flags)
@@ -3610,8 +3360,7 @@ probe syscall.compat_vmsplice = kernel.function("compat_sys_vmsplice").call ?
 	name = "vmsplice"
 	argstr = sprintf("%d, %p, %d, 0x%x", $fd, $iov32, $nr_segs, $flags)
 }
-probe syscall.vmsplice.return = kernel.function("SyS_vmsplice").return !,
-                                kernel.function("sys_vmsplice").return ?
+probe syscall.vmsplice.return = kernel.function("sys_vmsplice").return ?
 {
 	name = "vmsplice"
 	retstr = returnstr(1)
@@ -3629,8 +3378,7 @@ probe syscall.compat_vmsplice.return = kernel.function("compat_sys_vmsplice").re
 #	     int options,
 #	     struct rusage __user *ru)
 #
-probe syscall.wait4 = kernel.function("SyS_wait4").call !,
-                      kernel.function("sys_wait4").call
+probe syscall.wait4 = kernel.function("sys_wait4").call
 {
 	name = "wait4"
 	pid = (@defined($upid) ? $upid : $pid)
@@ -3642,8 +3390,7 @@ probe syscall.wait4 = kernel.function("SyS_wait4").call !,
 		(@defined($upid) ? $upid : $pid),
 		$stat_addr, _wait4_opt_str($options), $ru)
 }
-probe syscall.wait4.return = kernel.function("SyS_wait4").return !,
-                             kernel.function("sys_wait4").return
+probe syscall.wait4.return = kernel.function("sys_wait4").return
 {
 	name = "wait4"
 	retstr = returnstr(1)
@@ -3656,8 +3403,7 @@ probe syscall.wait4.return = kernel.function("SyS_wait4").return !,
 #		int options,
 #		struct rusage __user *ru)
 #
-probe syscall.waitid = kernel.function("SyS_waitid").call !,
-                       kernel.function("sys_waitid").call
+probe syscall.waitid = kernel.function("sys_waitid").call
 {
 	name = "waitid"
 	pid = (@defined($upid) ? $upid : $pid)
@@ -3671,8 +3417,7 @@ probe syscall.waitid = kernel.function("SyS_waitid").call !,
 		(@defined($upid) ? $upid : $pid), $infop,
 		_waitid_opt_str($options), $ru)
 }
-probe syscall.waitid.return = kernel.function("SyS_waitid").return !,
-                              kernel.function("sys_waitid").return
+probe syscall.waitid.return = kernel.function("sys_waitid").return
 {
 	name = "waitid"
 	retstr = returnstr(1)
@@ -3685,8 +3430,7 @@ probe syscall.waitid.return = kernel.function("SyS_waitid").return !,
 #	     int options,
 #	     struct rusage __user *ru)
 #
-probe syscall.waitpid = kernel.function("SyS_wait4").call !,
-                        kernel.function("sys_wait4").call
+probe syscall.waitpid = kernel.function("sys_wait4").call
 {
 	name = "waitpid"
 	pid = $pid
@@ -3697,8 +3441,7 @@ probe syscall.waitpid = kernel.function("SyS_wait4").call !,
 	argstr = sprintf("%d, %p, %s, %p", $pid, $stat_addr,
 		options_str, $ru)
 }
-probe syscall.waitpid.return = kernel.function("SyS_wait4").return !,
-                               kernel.function("sys_wait4").return
+probe syscall.waitpid.return = kernel.function("sys_wait4").return
 {
 	name = "waitpid"
 	retstr = returnstr(1)
@@ -3711,8 +3454,7 @@ probe syscall.waitpid.return = kernel.function("SyS_wait4").return !,
 #	     const char __user * buf,
 #	     size_t count)
 #
-probe syscall.write = kernel.function("SyS_write").call !,
-                      kernel.function("sys_write").call
+probe syscall.write = kernel.function("sys_write").call
 {
 	name = "write"
 	fd = $fd
@@ -3720,8 +3462,7 @@ probe syscall.write = kernel.function("SyS_write").call !,
 	count = $count
 	argstr = sprintf("%d, %s, %d", $fd, text_strn(user_string($buf), syscall_string_trunc, 1), $count)
 }
-probe syscall.write.return = kernel.function("SyS_write").return !,
-                             kernel.function("sys_write").return
+probe syscall.write.return = kernel.function("sys_write").return
 {
 	name = "write"
 	retstr = returnstr(1)
@@ -3737,7 +3478,6 @@ probe syscall.write.return = kernel.function("SyS_write").return !,
 #		unsigned long vlen)
 #
 probe syscall.writev = kernel.function("compat_sys_writev").call ?,
-                       kernel.function("SyS_writev").call !,
                        kernel.function("sys_writev").call
 {
 	name = "writev"
@@ -3747,7 +3487,6 @@ probe syscall.writev = kernel.function("compat_sys_writev").call ?,
 	argstr = sprintf("%d, %p, %d", $fd, $vec, $vlen)
 }
 probe syscall.writev.return = kernel.function("compat_sys_writev").return ?,
-                              kernel.function("SyS_writev").return !,
                               kernel.function("sys_writev").return
 {
 	name = "writev"
diff --git a/testsuite/semok/defined_list_vars.stp b/testsuite/semok/defined_list_vars.stp
index 7f73ff0..a44ee2c 100755
--- a/testsuite/semok/defined_list_vars.stp
+++ b/testsuite/semok/defined_list_vars.stp
@@ -9,8 +9,7 @@
 # with "probe " and "{}"
 
 stap -L '
-my_syscall.poll = kernel.function("SyS_poll").call !,
-                  kernel.function("sys_poll").call
+my_syscall.poll = kernel.function("sys_poll").call
 {
   timeout = (@defined($timeout_msecs) ? $timeout_msecs : $timeout)
 }
